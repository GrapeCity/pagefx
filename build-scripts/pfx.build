<?xml version="1.0"?>
<project xmlns="http://nant.sf.net" name="Builds Common Assembly" default="rebuild">

	<property name="project_dir" value="${project::get-base-directory()}" unless="${property::exists('project_dir')}"/>
	<property name="root_dir" value="${project_dir}/.."/>
	<property name="libs_dir" value="${root_dir}/libs"/>

	<!-- input properties -->
	<property name="runtime" value="clr" unless="${property::exists('runtime')}"/>
	<property name="debug" value="true" unless="${property::exists('debug')}"/>
	<property name="delaysign" value="false" unless="${property::exists('delaysign')}"/>
	
	<property name="nant.settings.currentframework" value="net-3.5" />
	<if test="${runtime == 'mono'}">
		<property name="nant.settings.currentframework" value="mono-3.5" />
	</if>

	<property name="main-scripts" value="common, core, flash, pfc, testrunner, tools, mono"/>
	<property name="fx-scripts" value="../framework/flash/flashapi, mono, ../framework/starling/starling, ../framework/flex/flex"/>
	
	<target name="build" depends="__loaddeps">
		<property name="target" value="build"/>
		<call target="__runscripts"/>
	</target>

	<target name="clean">
		<property name="target" value="clean"/>
		<call target="__runscripts"/>
	</target>
	
	<target name="rebuild" depends="clean, build"/>

	<target name="test">
		<property name="target" value="test"/>
		<call target="__runscripts"/>
		<!-- TODO: generate unit tests for test files and compile to separate assembly, and then run these unit tests  -->
	</target>

	<target name="__runscripts">
		<foreach item="String" in="${main-scripts}" property="script" delim="," trim="Both">
			<nant buildfile="${script}.build" target="${target}">
				<properties>
					<property name="pfxdir" value="${project_dir}/build"/>
					<property name="libset" value="1"/>
				</properties>
			</nant>
		</foreach>
		<foreach item="String" in="${fx-scripts}" property="script" delim="," trim="Both">
			<nant buildfile="${script}.build" target="${target}">
				<properties>
					<property name="pfxdir" value="${project_dir}/build"/>
					<property name="libset" value="2"/>
				</properties>
			</nant>
		</foreach>
	</target>
	
	<target name="__loaddeps" depends="__getnuget">
		
		<foreach property="package" item="String" in="Newtonsoft.Json;NUnit" delim=";" trim="Both">
			<xmlpeek file="${project_dir}/packages.config" xpath="/packages/package[@id='${package}']/@version" property="package_version"/>
			<call target="nuget-install"/>

			<property name="pack_dir" value="${project_dir}/build/${package}.${package_version}"/>
			<property name="target_dir" value="${libs_dir}/${package}"/>
			
			<if test="${package == 'Newtonsoft.Json'}">
				<property name="target_dir" value="${libs_dir}/json"/>
			</if>
			
			<mkdir dir="${target_dir}"/>
			
			<copy todir="${target_dir}" failonerror="false">
				<fileset basedir="${pack_dir}/lib/net35">
					<include name="*.dll"/>
				</fileset>
			</copy>
			<copy todir="${target_dir}" failonerror="false">
				<fileset basedir="${pack_dir}/lib">
					<include name="*.dll"/>
				</fileset>
			</copy>
				
			<delete dir="${pack_dir}" failonerror="false"/>
		</foreach>
	
	</target>
	
	<target name="__getnuget">
		<if test="${not file::exists(project_dir + '\nuget.exe')}">
			<get src="http://az320820.vo.msecnd.net/downloads/nuget.exe" dest="${project_dir}\nuget.exe" failonerror="false"/>
		</if>
	</target>
	
	<target name="nuget-install">
		<exec program="nuget.exe" basedir="${project_dir}" workingdir="${project_dir}" verbose="true" failonerror="false">
			<arg value="install"/>
			<arg value="${package}"/>
			<arg value="-OutputDirectory"/>
			<arg value="build"/>
		</exec>
	</target>

</project>