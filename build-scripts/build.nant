<?xml version="1.0"?>
<project xmlns="http://nant.sf.net" name="PageFX" default="local">

  <!-- 
  =================================================================================================================
      help: Gives usage information to build the project
  =================================================================================================================
  -->
  <target name="help" description="Prints usage information to build the project">
	<echo message="Usage:"/>
	<echo message="    nant local      - to run local build"/>
	<echo message="    nant continuous - to run continuous build"/>
	<echo message="    nant nightly    - to run nightly build"/>
	<echo message="    nant qa         - to run QA targets"/>
	<echo message="Input Properties:"/>
	<echo message="    dir.deploy      - specifies directory where zip files will be copied"/>
	<echo message="    project.dir     - specifies project root directory"/>
  </target>

  <!-- ======================================================================== -->
  <!-- Global Properties -->
  <!-- ======================================================================== -->

  <property name="project.name" value="PageFX" />
  <tstamp property="build.date" pattern="yyyy.MM.dd" />
  <tstamp property="build.time" pattern="HH.mm" />
  <echo message="BUILD DATE TIME: ${build.date} ${build.time}"/>

  <property name="build.number" value="0.5.250.0" unless="${property::exists('build.number')}"/>
  <echo message="build.number = ${build.number}"/>

  <property name="project.dir"
            value="${project::get-base-directory()}"
            unless="${property::exists('project.dir')}"/>

  <fail unless="${directory::exists(project.dir)}" message="Project directory ${project.dir} does not exist"/>

  <property name="dir.root" value="${project.dir}/.."/>
  <property name="dir.src" value="${dir.root}/source"/>
  <property name="dir.mono" value="${dir.root}/mono"/>

  <!-- Flex 3 SDK dirs in source-->
  <property name="flex.sdkdir" value="${dir.src}\sdks\flex.3.0"/>
  <property name="flex.dlldir" value="${flex.sdkdir}\dll"/>
  <property name="flex.localedir" value="${flex.sdkdir}\locale"/>
  <property name="flex.rslsdir" value="${flex.sdkdir}\rsls"/>
  <property name="flex4.5.sdkdir" value="${dir.src}\sdks\flex4.5"/>
  <property name="flex4.5.dlldir" value="${flex4.5.sdkdir}\dll"/>

  <!-- PageFX directories -->
  <property name="pfx.home" value="c:\pfx"/>
  <property name="pfx.bindir" value="${pfx.home}\bin"/>
  <property name="pfx.frameworkdir" value="${pfx.home}\framework"/>
  <property name="pfx.flexsdkdir" value="${pfx.home}\flexsdk"/>
  <property name="pfx.testdir" value="${pfx.home}\tests"/>
  <property name="pfx.toolsdir" value="${pfx.home}\tools"/>

  <property name="qa.rootdir" value="c:\QA\PageFX"/>
  <property name="qa.bindir" value="${pfx.home}\qa\bin"/>

  <property name="bench-report.dir" value="C:\QA\PageFX\bench\script" />

  <!--<property name="dir.build" value="c:\builds\PageFX\build"/>-->

  <property name="dir.pfx_templates" value="${dir.src}/VSIntegration/Templates"/>

  <property name="pfx.home.vstemplates" value="${pfx.home}/Visual Studio/templates"/>
  <property name="pfx.home.vsbin" value="${pfx.home}/Visual Studio/bin"/>

  <property name="build.kind" value="local" />
  <property name="config" value="debug"/>

  <property name="pfx.reportsdir" value="${pfx.home}\reports"/>
  <property name="nunit.outputdir" value="${pfx.reportsdir}\nunit"/>

  <property name="deploy.dir" value="${dir.root}\Artifacts" unless="${property::exists('deploy.dir')}"/>

  <property name="dir.dotnet" value="${directory::get-parent-directory(framework::get-framework-directory(framework::get-target-framework()))}"/>
  <property name="dir.dotnet3.5" value="${dir.dotnet}/v3.5"/>

  <property name="qa.asmname" value="DataDynamics.PageFX.QA"/>
  <property name="qa.projdir" value="${dir.src}/tests/${qa.asmname}"/>
  <property name="qa.csproj" value="${qa.projdir}/${qa.asmname}.csproj"/>

  <property name="testset" value="all" unless="${property::exists('testset')}"/>

  <!-- ======================================================================== -->
  <!-- Flags to control build process -->
  <!-- ======================================================================== -->

  <property name="manual.checkout" value="false"/>

  <property name="flag.release" value="false"/>

  <!-- This flag disables or enables generation of CommonAssemblyInfo -->
  <property name="flag.asminfo" value="true" unless="${property::exists('flag.asminfo')}"/>

  <property name="has.artifacts" value="false"/>
  <property name="flag.clean" value="true"/>
  <property name="flag.makehome" value="true"/>
  <property name="flag.samples" value="false"/>
  <property name="flag.compile.samples" value="false"/>
  <property name="flag.compile.tools" value="true"/>
  <property name="flag.build.qatools" value="false"/>
  <property name="flag.deploy.qatools" value="false"/>
  <property name="flag.compile.tests" value="true"/>
  <property name="flag.run.tests" value="false"/>
  <property name="flag.run.benchmarks" value="false"/>
  <property name="flag.install.pfx" value="false"/>

  <property name="flag.build.apistatus" value="false"/>

  <property name="domsi" value="false"/>
  <property name="dozip" value="false"/>

  <property name="scc.fail-when-non-changed" value="true"/>

  <!--
  =================================================================================================================
  PUBLIC ROOT TARGETS
  =================================================================================================================
  -->

  <target name="fast">
	<echo message="FAST BUILD"/>
	<property name="manual.checkout" value="false"/>
	<property name="build.kind" value="fast"/>
	<property name="flag.release" value="true"/>
	<property name="flag.clean" value="false"/>
	<property name="flag.makehome" value="false"/>
	<call target="build.core"/>
  </target>

  <target name="local">
	<echo message="LOCAL BUILD"/>
	<property name="manual.checkout" value="false"/>
	<property name="has.artifacts" value="true"/>
	<property name="flag.samples" value="true"/>
	<property name="domsi" value="true"/>
	<property name="dozip" value="true"/>
	<call target="build.core"/>
  </target>

  <target name="init-continuous-build">
	<property name="build.kind" value="continuous" />
	<property name="manual.checkout" value="true"/>
	<property name="flag.release" value="true"/>
	<property name="flag.samples" value="true"/>
	<property name="flag.build.qatools" value="true"/>
	<property name="flag.deploy.qatools" value="true"/>
	<property name="flag.build.apistatus" value="true"/>
	<property name="domsi" value="true"/>
	<property name="dozip" value="true"/>
  </target>

  <target name="continuous">
	<echo message="CONTINUOUS BUILD"/>
	<call target="init-continuous-build"/>
	<call target="build.core"/>
  </target>

  <target name="local-continuous">
	<echo message="LOCAL CONTINUOUS BUILD"/>
	<call target="init-continuous-build"/>
	<property name="manual.checkout" value="false"/>
	<call target="build.core"/>
  </target>

  <target name="init-nightly-build">
	<property name="build.kind" value="nightly" />
	<property name="manual.checkout" value="true"/>
	<property name="has.artifacts" value="true"/>
	<property name="flag.samples" value="true"/>
	<property name="flag.build.qatools" value="true"/>
	<property name="flag.run.tests" value="true"/>
	<property name="flag.build.apistatus" value="true"/>
	<property name="domsi" value="true"/>
	<property name="dozip" value="true"/>
  </target>

  <target name="nightly">
	<echo message="NIGHTLY BUILD"/>
	<call target="init-nightly-build"/>
	<call target="build.core"/>
  </target>

  <target name="local-nightly">
	<echo message="NIGHTLY BUILD"/>
	<call target="init-nightly-build"/>
	<property name="manual.checkout" value="false"/>
	<call target="build.core"/>
  </target>

  <target name="test-build">
	<echo message="TEST BUILD"/>
	<echo message="testset: ${testset}"/>
	<property name="flag.install.pfx" value="true"/>
	<delete dir="${deploy.dir}" failonerror="false"/>
	<call target="run.tests"/>
  </target>

  <target name="run-all-tests">
	<property name="testset" value="all"/>
	<call target="test-build"/>
  </target>

  <target name="run-critical-tests">
	<property name="testset" value="critical"/>
	<call target="test-build"/>
  </target>

  <target name="run-framework-tests">
	<property name="testset" value="framework"/>
	<call target="test-build"/>
  </target>

  <target name="run-rest-tests">
	<property name="testset" value="rest"/>
	<call target="test-build"/>
  </target>

  <target name="bench">
	<echo message="BENCHMARKS"/>
	<property name="build.kind" value="bench"/>
	<property name="manual.checkout" value="true"/>
	<property name="flag.asminfo" value="true"/>
	<property name="has.artifacts" value="true"/>
	<property name="flag.makehome" value="false"/>
	<property name="flag.run.benchmarks" value="true"/>
	<call target="build.core"/>
  </target>

  <!--
  =================================================================================================================
  PRIVATE TARGETS
  =================================================================================================================
  -->

  <!-- 
  =================================================================================================================
      build.core: Runs all build steps
  =================================================================================================================
  -->

  <target name="build.core">

	<call target="init.props"/>

	<call target="clean.dirs"/>

	<if test="${manual.checkout}">
	  <call target="checkout.source"/>
	</if>

	<if test="${flag.asminfo}">
	  <call target="make.common.asminfo"/>
	</if>

	<call target="build.debug"/>

	<if test="${flag.release}">
	  <call target="build.release"/>
	</if>

  </target>

  <target name="init.props">
	<setenv name="PFXBUILDKIND" value="${build.kind}"/>
	<setenv name="PFXHOME" value="${pfx.home}"/>
  </target>

  <!-- ================================================================================================================= -->
  <!-- make.common.asminfo: generates CommonAssemblyInfo.cs -->
  <!-- ================================================================================================================= -->

  <target name="make.common.asminfo">
	<asminfo language="CSharp" output="${dir.src}/CommonAssemblyInfo.cs">
	  <imports>
		<import namespace="System" />
		<import namespace="System.Reflection" />
	  </imports>
	  <attributes>
		<attribute type="AssemblyCompanyAttribute" value="Data Dynamics"/>
		<attribute type="AssemblyProductAttribute" value="PageFX"/>
		<attribute type="AssemblyCopyrightAttribute" value="Copyright © Data Dynamics 2008"/>
		<attribute type="AssemblyTrademarkAttribute" value=""/>
		<attribute type="AssemblyCultureAttribute" value=""/>
		<attribute type="AssemblyVersionAttribute" value="${build.number}"/>
		<attribute type="AssemblyFileVersionAttribute" value="${build.number}"/>
	  </attributes>
	</asminfo>
  </target>

  <!-- ================================================================================================================= -->
  <!-- checkout: Checkouts given valult.folder to specified local.folder -->
  <!-- ================================================================================================================= -->

  <target name="checkout.folder">

	<!--<nant buildfile="starteam.nant" target="starteam.checkout">
      <properties>
        <property name="vault.folder" value="${vault.folder}"/>
        <property name="local.folder" value="${local.folder}"/>
      </properties>
    </nant>-->

	<nant buildfile="surround.nant" target="scc-checkout">
	  <properties>
		<property name="scc.rootvaultfolder" value="${vault.folder}"/>
		<property name="scc.rootlocalfolder" value="${local.folder}"/>
	  </properties>
	</nant>

  </target>

  <!-- ================================================================================================================= -->
  <!-- checkout: Grabs source code -->
  <!-- ================================================================================================================= -->

  <target name="checkout.source">

	<property name="vault.folder" value="source"/>
	<property name="local.folder" value="${dir.src}"/>
	<call target="checkout.folder"/>

  </target>

  <!-- ================================================================================================================= -->
  <!-- builds debug version of pagefx  -->
  <!-- ================================================================================================================= -->

  <target name="build.debug" depends="init.props">
	<property name="config" value="debug" />
	<call target="build.config"/>
  </target>

  <!-- ================================================================================================================= -->
  <!-- builds release version of pagefx -->
  <!-- ================================================================================================================= -->

  <target name="build.release" depends="init.props">
	<property name="config" value="release" />
	<call target="build.config"/>
  </target>

  <!--
  =================================================================================================================
      build.config: Builds given configuration (debug|release)
  =================================================================================================================
  -->

  <target name="clean.dirs">

	<delete dir="${pfx.home}" failonerror="false"/>

	<if test="${flag.clean}">
	  <call target="clean.src"/>
	</if>

	<if test="${has.artifacts or domsi or dozip}">
	  <delete dir="${deploy.dir}" failonerror="false"/>
	</if>

  </target>

  <target name="build.config">

	<echo message=""/>
	<echo message="=================================================="/>
	<echo message="Building project in ${config} mode..."/>
	<echo message="=================================================="/>
	<echo message=""/>

	<!-- clean libs and compiler bits -->

	<delete failonerror="false">
	  <fileset basedir="${pfx.bindir}">
		<include name="**"/>
	  </fileset>
	</delete>

	<!-- clean libs bits -->

	<delete failonerror="false">
	  <fileset basedir="${pfx.frameworkdir}">
		<include name="**"/>
	  </fileset>
	</delete>

	<call target="build.libs"/>
	<call target="build.tools"/>
	<call target="build.compiler"/>
	<call target="build.tests"/>

	<if test="${flag.makehome}">
	  <call target="make.home"/>
	</if>

	<if test="${flag.build.qatools}">
	  <property name="flag.build.qatools" value="false"/>
	  <call target="build.qatools"/>
	</if>

	<if test="${flag.samples}">
	  <call target="build.samples"/>
	</if>

	<if test="${flag.run.tests}">
	  <property name="flag.run.tests" value="false"/>
	  <call target="run.tests"/>
	</if>

	<if test="${flag.run.benchmarks}">
	  <call target="run.benchmarks"/>
	</if>

	<call target="build.apistatus"/>

	<if test="${domsi}">
	  <call target="msi.make"/>
	</if>

	<if test="${dozip}">
	  <call target="deploy.zip"/>
	</if>

  </target>

  <target name="build.apistatus">
	<if test="${flag.build.apistatus}">
	  <property name="flag.build.apistatus" value="false"/>
	  <nant buildfile="${project.dir}\qa.nant" target="api-status">
		<properties>
		  <property name="deploy.dir" value="${deploy.dir}"/>
		</properties>
	  </nant>
	</if>
  </target>

  <!-- ================================================================================================================= -->
  <!-- make.home - makes PageFX home directory -->
  <!-- ================================================================================================================= -->

  <target name="make.home">

	<echo message=""/>
	<echo message="=================================================="/>
	<echo message="Making PageFX home directory ${pfx.home}..."/>
	<echo message="=================================================="/>
	<echo message=""/>

	<copy file="${dir.root}/readme.htm" todir="${pfx.home}"/>

	<copy todir="${pfx.flexsdkdir}/">
	  <fileset basedir="${flex.dlldir}">
		<include name="**"/>
		<exclude name="**/*.swz"/>
		<exclude name="**/.svn"/>
		<exclude name="**/.MySCMserverInfo"/>
		<exclude name="**/.svn/**"/>
	  </fileset>
	</copy>

	<copy todir="${pfx.flexsdkdir}/">
	  <fileset basedir="${flex4.5.dlldir}">
		<include name="**"/>
		<exclude name="**/*.swz"/>
		<exclude name="**/.svn"/>
		<exclude name="**/.MySCMserverInfo"/>
		<exclude name="**/.svn/**"/>
	  </fileset>
	</copy>

	<copy todir="${pfx.flexsdkdir}/locale">
	  <fileset basedir="${flex.localedir}">
		<include name="**"/>
		<exclude name="**/.svn"/>
		<exclude name="**/.svn/**"/>
		<exclude name="**/.myscmserverinfo"/>
	  </fileset>
	</copy>

	<if test="${directory::exists(flex.rslsdir)}">
	  <copy todir="${pfx.flexsdkdir}">
		<fileset basedir="${flex.rslsdir}">
		  <include name="**"/>
		  <exclude name="**/.svn"/>
		  <exclude name="**/.svn/**"/>
		  <exclude name="**/.myscmserverinfo"/>
		</fileset>
	  </copy>
	</if>

	<copy todir="${pfx.home}\HTML Templates">
	  <fileset basedir="${dir.src}\HTML Templates">
		<include name="**"/>
		<exclude name="**/.svn"/>
		<exclude name="**/.svn/**"/>
		<exclude name="**/.myscmserverinfo"/>
	  </fileset>
	</copy>

	<property name="dir.templates" value="${dir.pfx_templates}/ProjectTemplates"/>
	<property name="zip.dir" value="${pfx.home.vstemplates}/ProjectTemplates"/>
	<call target="zip.templates"/>

	<property name="dir.templates" value="${dir.pfx_templates}/ItemTemplates"/>
	<property name="zip.dir" value="${pfx.home.vstemplates}/ItemTemplates"/>
	<call target="zip.templates"/>

	<copy file="${dir.pfx_templates}/Reinstall Visual Studio Templates.bat" todir="${pfx.home.vstemplates}"/>

	<copy todir="${pfx.home}\Visual Studio">
	  <fileset basedir="${dir.src}\VSIntegration\Scripts">
		<include name="*.*"/>
		<exclude name="**/.MySCMServerInfo"/>
	  </fileset>
	</copy>

  </target>

  <!-- ================================================================================================================= -->
  <!-- copy.samples - Copies samples to PFX home -->
  <!-- ================================================================================================================= -->

  <target name="copy.samples">
	<copy todir="${pfx.home}/samples">
	  <fileset basedir="${dir.src}/samples">
		<include name="**"/>
		<exclude name="**/.MySCMServerInfo"/>
	  </fileset>
	</copy>
  </target>

  <!-- ================================================================================================================= -->
  <!-- deploy.zip - Prepares zip file -->
  <!-- ================================================================================================================= -->

  <target name="deploy.zip">
	<mkdir dir="${deploy.dir}"/>
	<zip zipfile="${deploy.dir}\DataDynamics.PageFX.${config}.${build.number}.zip">
	  <fileset basedir="${pfx.home}">
		<include name="**"/>
		<exclude name="**/.MySCMServerInfo" />
		<exclude name="tools"/>
		<exclude name="tools\**"/>
		<exclude name="reports"/>
		<exclude name="reports\**"/>
		<exclude name="qa"/>
		<exclude name="qa\**"/>
		<exclude name="temp"/>
		<exclude name="temp\**"/>
		<exclude name="tests"/>
		<exclude name="tests\**"/>
	  </fileset>
	</zip>
  </target>

  <!-- ================================================================================================================= -->
  <!-- builds qa tools -->
  <!-- ================================================================================================================= -->

  <target name="build.qatools">

	<property name="outdir" value="${pfx.bindir}"/>
	<property name="project" value="${qa.csproj}"/>
	<call target="msbuild"/>

	<if test="${flag.deploy.qatools}">

	  <mkdir dir="${deploy.dir}"/>
	  <zip zipfile="${deploy.dir}\qatools.${build.number}.zip">
		<fileset basedir="${pfx.home}">
		  <include name="bin\${qa.asmname}.*"/>
		  <include name="bin\Fireball.*"/>
		  <include name="bin\NUnit.Framework.*"/>
		  <include name="tools\pfx-api-info.exe"/>
		  <include name="tools\api-diff.exe"/>
		  <include name="tools\pfx-qa.exe"/>
		  <include name="tools\fp10.exe"/>
		  <include name="tools\nxslt2.exe"/>
		  <include name="tools\rv.exe"/>
		  <include name="tests\**"/>
		  <exclude name="**/.MySCMServerInfo"/>
		</fileset>
	  </zip>

	  <delete>
		<fileset basedir="${pfx.bindir}">
		  <include name="${qa.asmname}.*"/>
		  <include name="NUnit.Framework.*"/>
		  <include name="Fireball.*"/>
		</fileset>
	  </delete>

	  <!--<exec program="cmd.exe" workingdir="${deploy.dir}"
            commandline='/C "echo ${build.number}>build.number.txt" '/>-->

	</if>

  </target>

  <!-- ================================================================================================================= -->
  <!-- builds compiler solution -->
  <!-- ================================================================================================================= -->

  <target name="build.compiler">

	<!-- projects compiled to pfx\bin -->
	<property name="outdir" value="${pfx.bindir}"/>

	<property name="project" value="${dir.src}/pfc/pfc.csproj"/>
	<call target="msbuild"/>

	<property name="project" value="${dir.src}/tools/pfx-nunit-console/pfx-nunit-console.csproj"/>
	<call target="msbuild"/>

	<property name="project" value="${dir.src}/VSIntegration/DataDynamics.PageFX.Build/DataDynamics.PageFX.Build.csproj"/>
	<call target="msbuild"/>

	<!-- projects compiled to pfx\Visual Studio\bin -->

	<property name="outdir" value="${pfx.home.vsbin}"/>

	<property name="project" value="${dir.src}/VSIntegration/DataDynamics.PageFX.VisualStudio.Addin/DataDynamics.PageFX.VisualStudio.Addin.csproj"/>
	<call target="msbuild"/>

	<property name="project" value="${dir.src}/VSIntegration/DataDynamics.PageFX.VisualStudio.Debugger/DataDynamics.PageFX.VisualStudio.Debugger.csproj"/>
	<call target="msbuild"/>

  </target>

  <!-- ================================================================================================================= -->
  <!-- builds libs -->
  <!-- ================================================================================================================= -->

  <target name="build.libs">
	<property name="outdir" value="${pfx.frameworkdir}"/>

	<property name="dir" value="${dir.mono}/mcs/class"/>
	<foreach item="String" in="mscorlib;System;System.Core;System.Xml;System.Data;System.Drawing;Microsoft.VisualBasic" delim=";" property="proj">
	  <do>
		<property name="projdir" value="${proj}"/>
		<if test="${proj == 'mscorlib'}">
		  <property name="projdir" value="corlib"/>
		</if>
		<property name="project" value="${dir}/${projdir}/${proj}.csproj"/>
		<call target="msbuild"/>
	  </do>
	</foreach>

	<property name="project" value="${dir.src}/libs/NUnit/src/NUnit.Framework/NUnit.Framework.csproj"/>
	<call target="msbuild"/>
  </target>

  <!-- ================================================================================================================= -->
  <!-- builds nunit tests -->
  <!-- ================================================================================================================= -->

  <target name="build.tests" depends="build.libs">

	<if test="${flag.compile.tests}">

	  <property name="flag.compile.tests" value="false"/>

	  <echo message=""/>
	  <echo message="=================================================="/>
	  <echo message="Building nunit tests..."/>
	  <echo message="=================================================="/>
	  <echo message=""/>

	  <mkdir dir="${pfx.testdir}"/>

	  <property name="outdir" value="${pfx.testdir}"/>

	  <property name="project" value="${dir.src}\tests\mono\avm.csproj"/>
	  <call target="msbuild"/>

	  <property name="project" value="${dir.src}\tests\mono\clr.csproj"/>
	  <call target="msbuild"/>
	</if>

  </target>

  <!-- ============================================================================================ -->
  <!-- build.tools: compiles and copies tools -->
  <!-- ============================================================================================ -->

  <target name="build.tools">
	<if test="${flag.compile.tools}">

	  <property name="flag.compile.tools" value="false"/>

	  <property name="outdir" value="${pfx.toolsdir}"/>
	  <property name="dir" value="${dir.src}/tools"/>

	  <property name="project" value="${dir}/fli/abc/abc.csproj"/>
	  <call target="msbuild"/>

	  <property name="project" value="${dir}/rv/rv.csproj"/>
	  <call target="msbuild"/>

	  <property name="project" value="${dir}/mono/api-diff/api-diff.csproj"/>
	  <call target="msbuild"/>

	  <property name="project" value="${dir}/pfx-api-info/pfx-api-info.csproj"/>
	  <call target="msbuild"/>

	  <property name="project" value="${dir}/pfx-wix/pfx-wix.csproj"/>
	  <call target="msbuild"/>

	  <property name="project" value="${dir}/pfx-qa/pfx-qa.csproj"/>
	  <call target="msbuild"/>

	  <property name="project" value="${dir}/pfx-bench/pfx-bench.csproj"/>
	  <call target="msbuild"/>

	  <property name="project" value="${dir}/pfx-bench-report/pfx-bench-report.csproj"/>
	  <call target="msbuild"/>

	  <copy file="${dir}/nxslt2/nxslt2.exe" todir="${pfx.toolsdir}"/>
	  <copy file="${dir}/fp/FP10.exe" todir="${pfx.toolsdir}"/>

	  <setenv name="PATH" value="%PATH%;${pfx.bindir};${pfx.toolsdir};${pfx.toolsdir}\wix\;${pfx.toolsdir}\gnuplot\;${dir.dotnet3.5}"/>

	  <copy todir="${pfx.toolsdir}\wix\">
		<fileset basedir="${dir}\wix">
		  <include name="**"/>
		  <exclude name="**/.MySCMServerInfo"/>
		</fileset>
	  </copy>

	  <copy todir="${pfx.toolsdir}\gnuplot\">
		<fileset basedir="${dir}\gnuplot">
		  <include name="**"/>
		  <exclude name="**/.MySCMServerInfo"/>
		</fileset>
	  </copy>

	  <property name="FlexSdkHome" value="${environment::get-variable('FlexSdkHome')}" failonerror="false"/>
	  <if test="${property::exists('FlexSdkHome')}">
		<if test="${FlexSdkHome != ''}">
		  <setenv name="PATH" value="%PATH%;${FlexSdkHome}\bin"/>
		</if>
	  </if>
	</if>

  </target>

  <!-- ============================================================================================ -->
  <!-- builds samples -->
  <!-- ============================================================================================ -->

  <target name="build.samples">

	<if test="${flag.compile.samples}">

	  <property name="flag.compile.samples" value="false"/>

	  <property name="dir" value="${dir.src}/../samples/simple"/>

	  <foreach item="File" property="file">
		<in>
		  <items>
			<include name="${dir}/**/build.bat"/>
		  </items>
		</in>
		<do>
		  <exec basedir="${path::get-directory-name(file)}"
                program="${path::get-file-name(file)}"
                workingdir="${path::get-directory-name(file)}"
                failonerror="false"/>
		</do>
	  </foreach>

	  <call target="clean"/>
	</if>

	<call target="copy.samples"/>

  </target>

  <!-- ================================================================================================================= -->
  <!-- Runs WIX to make MSI installer -->
  <!-- ================================================================================================================= -->

  <target name="msi.make">
	<if test="${domsi}">
	  <property name="domsi" value="false"/>
	  <nant buildfile="${project.dir}\msi.nant" target="msi.make msi.clean">
		<properties>
		  <property name="project.dir" value="${project.dir}"/>
		  <property name="dir.src" value="${dir.src}"/>
		  <property name="pfx.home" value="${pfx.home}"/>
		  <property name="pfx.toolsdir" value="${pfx.toolsdir}"/>
		  <property name="pfx.wixtool" value="${pfx.toolsdir}\wix"/>
		  <property name="deploy.dir" value="${deploy.dir}"/>
		  <property name="buildNumber" value="${build.number}"/>
		</properties>
	  </nant>
	</if>
  </target>

  <!-- ================================================================================================================= -->
  <!-- run.tests: Runs given test set -->
  <!-- ================================================================================================================= -->

  <target name="run.tests">

	<echo message=""/>
	<echo message="=================================================="/>
	<echo message="QA process..."/>
	<echo message="=================================================="/>
	<echo message=""/>

	<mkdir dir="${qa.bindir}"/>

	<if test="${flag.install.pfx}">
	  <call target="install.pfx"/>
	</if>

	<copy todir="${qa.bindir}">
	  <fileset basedir="${pfx.bindir}">
		<include name="*.dll"/>
		<include name="*.exe"/>
		<exclude name="**/.MySCMServerInfo"/>
	  </fileset>
	</copy>

	<exec basedir="${qa.bindir}" program="${qa.asmname}.exe"
          commandline='/testset:${testset} /out:tests.cs"'
          workingdir="${qa.bindir}"/>

	<property name="pfx.tests.dll" value="pfx.tests.dll"/>

	<csc target="library" debug="true"
         output="${qa.bindir}\${pfx.tests.dll}">
	  <references basedir="${qa.bindir}">
		<include name="NUnit.Framework.dll"/>
		<include name="DataDynamics.PageFX.Shared.dll"/>
		<include name="DataDynamics.PageFX.CodeModel.dll"/>
		<include name="DataDynamics.PageFX.CLI.dll"/>
		<include name="DataDynamics.PageFX.FLI.dll"/>
		<include name="${qa.asmname}.exe"/>
	  </references>
	  <sources basedir="${qa.bindir}">
		<include name="tests.cs"/>
	  </sources>
	</csc>

	<nunit2 verbose="true" failonerror="false">
	  <formatter type="Xml" usefile="true" extension=".xml" outputdir="${nunit.outputdir}"/>
	  <formatter type="Plain"/>
	  <test>
		<assemblies basedir="${qa.bindir}">
		  <include name="${qa.asmname}.exe"/>
		  <include name="${pfx.tests.dll}"/>
		</assemblies>
	  </test>
	</nunit2>

	<nant buildfile="${project.dir}\qa.nant" target="qa-report">
	  <properties>
		<property name="nunit.report" value="${nunit.outputdir}\${pfx.tests.dll}-results.xml"/>
		<property name="deploy.dir" value="${deploy.dir}"/>
	  </properties>
	</nant>

  </target>

  <!-- ================================================================================================================= -->
  <!-- install.pfx: unzips pfx artifacts that was grabbed from compile build -->
  <!-- ================================================================================================================= -->

  <target name="install.pfx">

	<delete dir="${pfx.home}" failonerror="false"/>

	<property name="pfxbits" value="${dir.src}\pfxbits"/>

	<foreach item="File" in="${pfxbits}" property="file">
	  <do>
		<property name="fname" value="${path::get-file-name(file)}"/>
		<if test="${string::ends-with(fname, '.zip')}">
		  <if test="${string::starts-with(fname, 'DataDynamics.PageFX.debug.')}">
			<unzip zipfile="${file}" todir="${pfx.home}"/>
		  </if>
		  <if test="${string::starts-with(fname, 'qatools')}">
			<unzip zipfile="${file}" todir="${pfx.home}"/>
		  </if>
		</if>
	  </do>
	</foreach>

	<copy todir="${pfx.home}\tools" failonerror="false">
	  <fileset basedir="${pfx.bindir}">
		<include name="DataDynamics.PageFX.Shared.dll"/>
		<include name="DataDynamics.PageFX.CodeModel.dll"/>
		<include name="DataDynamics.PageFX.CLI.dll"/>
		<include name="DataDynamics.PageFX.FLI.dll"/>
	  </fileset>
	</copy>

  </target>

  <!-- ================================================================================================================= -->
  <!-- runs all benchmarks for performance evalution -->
  <!-- ================================================================================================================= -->

  <target name="run.benchmarks">

	<echo message=""/>
	<echo message="=================================================="/>
	<echo message="Benchmarks started ..."/>
	<echo message="=================================================="/>
	<echo message=""/>

	<exec basedir="${pfx.toolsdir}" program="pfx-bench.exe"
          commandline='/build:"${build.number}"' workingdir="${pfx.toolsdir}"/>

	<exec basedir="${pfx.toolsdir}" program="pfx-bench-report.exe" workingdir="${pfx.toolsdir}"/>

	<call target="deploy.benchmarks-reports"/>
  </target>

  <!-- ================================================================================================================= -->
  <!-- deploys benchmark reports  -->
  <!-- ================================================================================================================= -->

  <target name="deploy.benchmarks-reports">
	<mkdir dir="${deploy.dir}"/>

	<echo message=""/>
	<echo message="=================================================="/>
	<echo message="Deploying benchmark reports ..."/>
	<echo message="=================================================="/>
	<echo message=""/>

	<zip zipfile="${deploy.dir}\benchmarks.zip">
	  <fileset basedir="${bench-report.dir}">
		<include name="**"/>
	  </fileset>
	</zip>
  </target>

  <!-- ================================================================================================================= -->
  <!-- prepares bench data for old builds -->
  <!-- ================================================================================================================= -->

  <target name="get.bench.data">

	<property name="pfx.buildsdir" value="c:\builds\pfx"/>
	<mkdir dir="${pfx.buildsdir}"/>

	<property name="vault.folder" value="builds"/>
	<property name="local.folder" value="${pfx.buildsdir}"/>
	<call target="checkout.folder"/>

	<foreach item="Folder" in="${pfx.buildsdir}" property="dir">
	  <do>

		<copy todir="${pfx.home}">
		  <fileset basedir="${dir}">
			<include name="**"/>
			<exclude name="**/.MySCMServerInfo"/>
		  </fileset>
		</copy>

		<property name="bn" value="${path::get-file-name(dir)}"/>
		<echo message="=================================================="/>
		<echo message="Running pfx-bench for build ${bn}..."/>
		<echo message="=================================================="/>

		<exec basedir="${pfx.toolsdir}" program="pfx-bench.exe"
          commandline='/build:"${bn}"' workingdir="${pfx.toolsdir}" failonerror="false"/>
	  </do>
	</foreach>

  </target>

  <!-- ================================================================================================================= -->
  <!-- cleans intermediate files generated by compiler -->
  <!-- ================================================================================================================= -->

  <target name="clean.src">
	<echo message=""/>
	<echo message="=================================================="/>
	<echo message="Cleaning..."/>
	<echo message="=================================================="/>
	<echo message=""/>
	<property name="dir" value="${dir.src}"/>
	<call target="clean"/>
  </target>

  <!-- 
  =================================================================================================================
      clean: Deletes intermediate files from specified directory
      Input: dir - directory to clean
  =================================================================================================================
  -->

  <target name="clean">
	<nant buildfile="common.nant" target="clean">
	  <properties>
		<property name="dir" value="${dir}"/>
	  </properties>
	</nant>
  </target>

  <!-- 
  =================================================================================================================
      msbuild: Builds solution or project file using Microsoft Build Engine
      Input:
          project   - specifies path to project or solution file to build (Required)
          config    - specifies configuration (Optional, default is 'debug')
          outdir    - specifies output directory (Optional, default is a 'bin\config' directory in the project directory)
  =================================================================================================================
  -->

  <target name="msbuild">
	<property name="config" value="debug" unless="${property::exists('config')}"/>
	<nant buildfile="common.nant" target="msbuild">
	  <properties>
		<property name="project" value="${project}"/>
		<property name="config" value="${config}"/>
		<property name="outdir" value="${outdir}"/>
	  </properties>
	</nant>
  </target>

  <!-- Zips PageFX templates to specified zip.dir -->

  <target name="zip.templates">

	<fail unless="${property::exists('dir.templates')}"/>

	<if test="${directory::exists(dir.templates)}">

	  <property name="zip.dir" value="${directory::get-current-directory()}" unless="${property::exists('zip.dir')}"/>
	  <property name="status" value="no templates"/>

	  <foreach item="Folder" in="${dir.templates}" property="dir">
		<if test="${path::get-file-name(dir)!='.svn'}">
		  <mkdir dir="${zip.dir}"/>
		  <zip zipfile="${zip.dir}/${path::get-file-name(dir)}.zip">
			<fileset basedir="${dir}">
			  <include name="*.*"/>
			  <exclude name="**/.svn/*"/>
			  <exclude name="**/.MySCMServerInfo" />
			</fileset>
		  </zip>
		  <property name="status" value="ok"/>
		</if>
	  </foreach>
	</if>

  </target>

</project>