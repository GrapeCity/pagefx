using System;
using System.Runtime.CompilerServices;

namespace flash.events
{
    /// <summary>
    /// An object dispatches a MouseEvent object into the event flow whenever mouse events occur.
    /// A mouse event is usually generated by a user input device, such as a mouse or a trackball,
    /// that uses a pointer.
    /// </summary>
    [PageFX.ABC]
    [PageFX.FP9]
    public class MouseEvent : Event
    {
        /// <summary>
        /// Defines the value of the type property of a mouseWheel event object.
        /// This event has the following properties:PropertyValuebubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.deltaThe number of lines that that each notch on the mouse wheel represents.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String MOUSE_WHEEL;

        /// <summary>
        /// Defines the value of the type property of a mouseMove event object.
        /// This event has the following properties:PropertyValuebubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String MOUSE_MOVE;

        /// <summary>
        /// Defines the value of the type property of a rollOut event object.
        /// This event has the following properties:PropertyValuebubblesfalsebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; there is no default behavior to cancel.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.relatedObjectThe display list object to which the pointing device now points.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String ROLL_OUT;

        /// <summary>
        /// Defines the value of the type property of a mouseOver event object.
        /// This event has the following properties:PropertyValuebubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.relatedObjectThe display list object to which the pointing device was pointing.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String MOUSE_OVER;

        /// <summary>
        /// Defines the value of the type property of a click event object.
        /// This event has the following properties:PropertyValuebubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; there is no default behavior to cancel.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String CLICK;

        /// <summary>
        /// Defines the value of the type property of a mouseOut event object.
        /// This event has the following properties:PropertyValuebubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.relatedObjectThe display list object to which the pointing device now points.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String MOUSE_OUT;

        /// <summary>
        /// Defines the value of the type property of a mouseUp event object.
        /// This event has the following properties:PropertyValuebubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String MOUSE_UP;

        /// <summary>
        /// Defines the value of the type property of a doubleClick event object.
        /// This event has the following properties:PropertyValuebubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; there is no default behavior to cancel.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String DOUBLE_CLICK;

        /// <summary>
        /// Defines the value of the type property of a mouseDown event object.
        /// This event has the following properties:PropertyValuebubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String MOUSE_DOWN;

        /// <summary>
        /// Defines the value of the type property of a rollOver event object.
        /// This event has the following properties:PropertyValuebubblesfalsebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; there is no default behavior to cancel.ctrlKeytrue if the Control key is active; false if it is inactive.currentTargetThe object that is actively processing the Event
        /// object with an event listener.relatedObjectThe display list object to which the pointing device was pointing.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
        /// The target is not always the object in the display list
        /// that registered the event listener. Use the currentTarget
        /// property to access the object in the display list that is currently processing the event.
        /// </summary>
        [PageFX.ABC]
        [PageFX.FP9]
        public static Avm.String ROLL_OVER;

        public extern virtual bool buttonDown
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            set;
        }

        public extern virtual flash.display.InteractiveObject relatedObject
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            set;
        }

        public extern virtual double localX
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            set;
        }

        public extern virtual double localY
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            set;
        }

        public extern virtual double stageY
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
        }

        public extern virtual double stageX
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
        }

        public extern virtual bool ctrlKey
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            set;
        }

        public extern virtual bool altKey
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            set;
        }

        public extern virtual int delta
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            set;
        }

        public extern virtual bool shiftKey
        {
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            get;
            [PageFX.ABC]
            [PageFX.FP9]
            [MethodImpl(MethodImplOptions.InternalCall)]
            set;
        }

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2, double arg3, double arg4, flash.display.InteractiveObject arg5, bool arg6, bool arg7, bool arg8, bool arg9, int arg10);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2, double arg3, double arg4, flash.display.InteractiveObject arg5, bool arg6, bool arg7, bool arg8, bool arg9);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2, double arg3, double arg4, flash.display.InteractiveObject arg5, bool arg6, bool arg7, bool arg8);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2, double arg3, double arg4, flash.display.InteractiveObject arg5, bool arg6, bool arg7);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2, double arg3, double arg4, flash.display.InteractiveObject arg5, bool arg6);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2, double arg3, double arg4, flash.display.InteractiveObject arg5);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2, double arg3, double arg4);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2, double arg3);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1, bool arg2);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0, bool arg1);

        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern MouseEvent(Avm.String arg0);

        /// <summary>Instructs Flash Player to render after processing of this event completes, if the display list has been modified.</summary>
        [PageFX.ABC]
        [PageFX.FP9]
        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern virtual void updateAfterEvent();

        [PageFX.ABC]
        [PageFX.FP9]
        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern override Event clone();

        [PageFX.ABC]
        [PageFX.FP9]
        [MethodImpl(MethodImplOptions.InternalCall)]
        public extern override Avm.String toString();


    }
}
