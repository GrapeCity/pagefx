<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>flex3.rpc</name>
  </assembly>
  <members>
    <member name="N:mx.messaging" />
    <member name="T:mx.messaging.AbstractConsumer">
      <summary>The AbstractConsumer is the base class for both the Consumer and MultiTopicConsumer classes.</summary>
    </member>
    <member name="E:mx.messaging.AbstractConsumer.message">
      <summary>Dispatched when a message is received by the Consumer.</summary>
    </member>
    <member name="M:mx.messaging.AbstractConsumer.#ctor">
      <summary>Constructs a Consumer.</summary>
    </member>
    <member name="M:mx.messaging.AbstractConsumer.buildSubscribeMessage">
      <summary>Returns a subscribe message.</summary>
    </member>
    <member name="M:mx.messaging.AbstractConsumer.buildUnsubscribeMessage(System.Boolean)">
      <summary>Returns an unsubscribe message.</summary>
      <param name="preserveDurable">- when true, durable JMS subscriptions are not destroyed allowing consumers to later resubscribe and receive missed messages</param>
    </member>
    <member name="M:mx.messaging.AbstractConsumer.disconnect">
      <summary>Disconnects the Consumer from its remote destination.</summary>
    </member>
    <member name="M:mx.messaging.AbstractConsumer.receive(System.Double)">
      <summary>Requests any messages that are queued for this Consumer on the server.</summary>
      <param name="timestamp">This argument is deprecated and is ignored.</param>
    </member>
    <member name="M:mx.messaging.AbstractConsumer.subscribe(Avm.String)">
      <summary>Subscribes to the remote destination.</summary>
      <param name="clientId">The client id to subscribe with. Use null for non-durable Consumers. If the subscription is durable, a consistent value must be supplied every time the Consumer subscribes in order to reconnect to the correct durable subscription in the remote destination.</param>
    </member>
    <member name="M:mx.messaging.AbstractConsumer.unsubscribe(System.Boolean)">
      <summary>Unsubscribes from the remote destination.</summary>
      <param name="preserveDurable">- when true, durable JMS subscriptions are not destroyed allowing consumers to later resubscribe and receive missed messages</param>
    </member>
    <member name="F:mx.messaging.AbstractConsumer._shouldBeSubscribed">
      <summary>Flag indicating whether this consumer should be subscribed or not.</summary>
    </member>
    <member name="P:mx.messaging.AbstractConsumer.resubscribeAttempts">
      <summary>The number of resubscribe attempts that the Consumer makes in the event that the destination is unavailable or the connection to the destination fails.</summary>
    </member>
    <member name="P:mx.messaging.AbstractConsumer.resubscribeInterval">
      <summary>The number of milliseconds between resubscribe attempts.</summary>
    </member>
    <member name="P:mx.messaging.AbstractConsumer.subscribed">
      <summary>Indicates whether the Consumer is currently subscribed.</summary>
    </member>
    <member name="P:mx.messaging.AbstractConsumer.timestamp">
      <summary>Contains the timestamp of the most recent message this Consumer has received.</summary>
    </member>
    <member name="T:mx.messaging.Channel">
      <summary>The Channel class is the base message channel class that all channels in the messaging system must extend.</summary>
    </member>
    <member name="E:mx.messaging.Channel.propertyChange">
      <summary>Dispatched when a property of the channel changes.</summary>
    </member>
    <member name="E:mx.messaging.Channel.message">
      <summary>Dispatched when a channel receives a message from its endpoint.</summary>
    </member>
    <member name="E:mx.messaging.Channel.channelFault">
      <summary>Dispatched after the channel has faulted.</summary>
    </member>
    <member name="E:mx.messaging.Channel.channelDisconnect">
      <summary>Dispatched after the channel has disconnected from its endpoint.</summary>
    </member>
    <member name="E:mx.messaging.Channel.channelConnect">
      <summary>Dispatched after the channel has connected to its endpoint.</summary>
    </member>
    <member name="M:mx.messaging.Channel.#ctor(Avm.String,Avm.String)">
      <summary>Constructs an instance of a generic Channel that connects to the specified endpoint URI.</summary>
      <param name="id">The id of this channel.</param>
      <param name="uri">The endpoint URI for this channel.</param>
    </member>
    <member name="M:mx.messaging.Channel.applySettings(Avm.XML)">
      <summary>Subclasses should override this method to apply any settings that may be necessary for an individual channel.</summary>
      <param name="settings">XML fragment of the services-config.xml file for this channel. The following fragement includes the &lt;channel&gt; tag with all of its configuration settings: <pre> &lt;channel id="my-amf" type="mx.messaging.channels.AMFChannel"&gt; &lt;endpoint uri="/dev/messagebroker/amf" type="flex.messaging.endpoints.AmfEndpoint"/&gt; &lt;properties&gt; &lt;polling-enabled&gt;false&lt;/polling-enabled&gt; &lt;/properties&gt; &lt;/channel&gt; </pre></param>
    </member>
    <member name="M:mx.messaging.Channel.connect(mx.messaging.ChannelSet)">
      <summary>Connects the ChannelSet to the Channel.</summary>
      <param name="channelSet">The ChannelSet to connect to the Channel.</param>
    </member>
    <member name="M:mx.messaging.Channel.connectFailed(mx.messaging.events.ChannelFaultEvent)">
      <summary>Processes a failed internal connect and dispatches the <code>FAULT</code> event for the channel.</summary>
      <param name="event">The ChannelFaultEvent for the failed connect.</param>
    </member>
    <member name="M:mx.messaging.Channel.connectSuccess">
      <summary>Processes a successful internal connect and dispatches the <code>CONNECT</code> event for the Channel.</summary>
    </member>
    <member name="M:mx.messaging.Channel.connectTimeoutHandler(flash.events.TimerEvent)">
      <summary>Handles a connect timeout by dispatching a ChannelFaultEvent.</summary>
      <param name="event">The timer event indicating that the connect timeout has been reached.</param>
    </member>
    <member name="M:mx.messaging.Channel.disconnect(mx.messaging.ChannelSet)">
      <summary>Disconnects the ChannelSet from the Channel.</summary>
      <param name="channelSet">The ChannelSet to disconnect from the Channel.</param>
    </member>
    <member name="M:mx.messaging.Channel.disconnectFailed(mx.messaging.events.ChannelFaultEvent)">
      <summary>Processes a failed internal disconnect and dispatches the <code>FAULT</code> event for the channel.</summary>
      <param name="event">The ChannelFaultEvent for the failed disconnect.</param>
    </member>
    <member name="M:mx.messaging.Channel.disconnectSuccess(System.Boolean)">
      <summary>Processes a successful internal disconnect and dispatches the <code>DISCONNECT</code> event for the Channel.</summary>
      <param name="rejected">True if the disconnect should skip any failover processing that would otherwise be attempted; false if failover processing should be allowed to run.</param>
    </member>
    <member name="M:mx.messaging.Channel.flexClientWaitHandler(mx.events.PropertyChangeEvent)">
      <summary>Handles a change to the guard condition for managing initial Channel connect for the application.</summary>
      <param name="event">The PropertyChangeEvent dispatched by the FlexClient singleton.</param>
    </member>
    <member name="M:mx.messaging.Channel.getMessageResponder(mx.messaging.MessageAgent,mx.messaging.messages.IMessage)">
      <summary>Returns the appropriate MessageResponder for the Channel's <code>send()</code> method.</summary>
      <param name="agent">The MessageAgent sending the message.</param>
      <param name="message">The Message to send.</param>
    </member>
    <member name="M:mx.messaging.Channel.internalConnect">
      <summary>Connects the Channel to its endpoint.</summary>
    </member>
    <member name="M:mx.messaging.Channel.internalDisconnect(System.Boolean)">
      <summary>Disconnects the Channel from its endpoint.</summary>
      <param name="rejected">True if the disconnect was due to a connection rejection or timeout and reconnection should not be attempted automatically; otherwise false.</param>
    </member>
    <member name="M:mx.messaging.Channel.internalSend(mx.messaging.MessageResponder)">
      <summary>Sends the Message out over the Channel and routes the response to the responder.</summary>
      <param name="messageResponder">The MessageResponder to handle the response.</param>
    </member>
    <member name="M:mx.messaging.Channel.logout(mx.messaging.MessageAgent)">
      <summary>Sends a CommandMessage to the server to logout if the Channel is connected.</summary>
      <param name="agent">The MessageAgent to logout.</param>
    </member>
    <member name="M:mx.messaging.Channel.send(mx.messaging.MessageAgent,mx.messaging.messages.IMessage)">
      <summary>Sends the specified message to its target destination.</summary>
      <param name="agent">The MessageAgent that is sending the message.</param>
      <param name="message">The Message to send.</param>
    </member>
    <member name="M:mx.messaging.Channel.setCredentials(Avm.String,mx.messaging.MessageAgent,Avm.String)">
      <summary>Sets the credentials to the specified value.</summary>
      <param name="credentials">The credentials string.</param>
      <param name="agent">The MessageAgent to login, that will handle the login result.</param>
      <param name="charset">The character set encoding used while encoding the credentials. The default is null, which implies the legacy charset of ISO-Latin-1.</param>
    </member>
    <member name="P:mx.messaging.Channel.authenticated">
      <summary>Indicates if this channel is authenticated.</summary>
    </member>
    <member name="P:mx.messaging.Channel.channelSets">
      <summary>Provides access to the ChannelSets connected to the Channel.</summary>
    </member>
    <member name="P:mx.messaging.Channel.connectTimeout">
      <summary>Provides access to the connect timeout in seconds for the channel.</summary>
    </member>
    <member name="P:mx.messaging.Channel.connected">
      <summary>Indicates whether this channel has established a connection to the remote destination.</summary>
    </member>
    <member name="P:mx.messaging.Channel.endpoint">
      <summary>Provides access to the endpoint for this channel.</summary>
    </member>
    <member name="P:mx.messaging.Channel.failoverURIs">
      <summary>Provides access to the set of endpoint URIs that this channel can attempt to failover to if the endpoint is clustered.</summary>
    </member>
    <member name="P:mx.messaging.Channel.id">
      <summary>Provides access to the id of this channel.</summary>
    </member>
    <member name="P:mx.messaging.Channel.protocol">
      <summary>Provides access to the protocol that the channel uses.</summary>
    </member>
    <member name="P:mx.messaging.Channel.reconnecting">
      <summary>Indicates whether this channel is in the process of reconnecting to an alternate endpoint.</summary>
    </member>
    <member name="P:mx.messaging.Channel.recordMessageSizes" />
    <member name="P:mx.messaging.Channel.recordMessageTimes" />
    <member name="P:mx.messaging.Channel.requestTimeout">
      <summary>Provides access to the default request timeout in seconds for the channel.</summary>
    </member>
    <member name="P:mx.messaging.Channel.uri">
      <summary>Provides access to the URI used to create the whole endpoint URI for this channel.</summary>
    </member>
    <member name="N:mx.messaging.channels" />
    <member name="T:mx.messaging.channels.AMFChannel">
      <summary>The AMFChannel class provides the AMF support for messaging.</summary>
    </member>
    <member name="M:mx.messaging.channels.AMFChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates an new AMFChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="P:mx.messaging.channels.AMFChannel.piggybackingEnabled">
      <summary>Indicates whether this channel will piggyback poll requests along with regular outbound messages when an outstanding poll is not in progress.</summary>
    </member>
    <member name="P:mx.messaging.channels.AMFChannel.polling">
      <summary>Reports whether the channel is actively polling.</summary>
    </member>
    <member name="P:mx.messaging.channels.AMFChannel.pollingEnabled">
      <summary>Indicates whether this channel is enabled to poll.</summary>
    </member>
    <member name="P:mx.messaging.channels.AMFChannel.pollingInterval">
      <summary>Provides access to the polling interval for this Channel.</summary>
    </member>
    <member name="P:mx.messaging.channels.AMFChannel.protocol">
      <summary>Returns the protocol for this channel (http).</summary>
    </member>
    <member name="T:mx.messaging.channels.HTTPChannel">
      <summary>The HTTPChannel class provides the HTTP support for messaging.</summary>
    </member>
    <member name="M:mx.messaging.channels.HTTPChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates an new HTTPChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="M:mx.messaging.channels.HTTPChannel.internalPingComplete(mx.messaging.messages.AsyncMessage)">
      <param name="msg" />
    </member>
    <member name="P:mx.messaging.channels.HTTPChannel.piggybackingEnabled">
      <summary>Indicates whether this channel will piggyback poll requests along with regular outbound messages when an outstanding poll is not in progress.</summary>
    </member>
    <member name="P:mx.messaging.channels.HTTPChannel.polling">
      <summary>Reports whether the channel is actively polling.</summary>
    </member>
    <member name="P:mx.messaging.channels.HTTPChannel.pollingEnabled">
      <summary>Indicates whether this channel is enabled to poll.</summary>
    </member>
    <member name="P:mx.messaging.channels.HTTPChannel.pollingInterval">
      <summary>Provides access to the polling interval for this Channel.</summary>
    </member>
    <member name="P:mx.messaging.channels.HTTPChannel.protocol">
      <summary>Returns the protocol for this channel (http).</summary>
    </member>
    <member name="T:mx.messaging.channels.NetConnectionChannel">
      <summary>This NetConnectionChannel provides the basic NetConnection support for messaging.</summary>
    </member>
    <member name="M:mx.messaging.channels.NetConnectionChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates a new NetConnectionChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="P:mx.messaging.channels.NetConnectionChannel.netConnection">
      <summary>Provides access to the associated NetConnection for this Channel.</summary>
    </member>
    <member name="T:mx.messaging.channels.PollingChannel">
      <summary>The PollingChannel class provides the polling behavior that all polling channels in the messaging system require.</summary>
    </member>
    <member name="M:mx.messaging.channels.PollingChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates a new PollingChannel instance with the specified id.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="M:mx.messaging.channels.PollingChannel.disablePolling">
      <summary>Disables polling based on the number of times <code>enablePolling()</code> and <code>disablePolling()</code> have been invoked.</summary>
    </member>
    <member name="M:mx.messaging.channels.PollingChannel.enablePolling">
      <summary>Enables polling based on the number of times <code>enablePolling()</code> and <code>disablePolling()</code> have been invoked.</summary>
    </member>
    <member name="M:mx.messaging.channels.PollingChannel.poll">
      <summary>Initiates a poll operation if there are consumers subscribed to this channel, and polling is enabled for this channel.</summary>
    </member>
    <member name="M:mx.messaging.channels.PollingChannel.send(mx.messaging.MessageAgent,mx.messaging.messages.IMessage)">
      <summary>Sends the specified message to its target destination.</summary>
      <param name="agent">The MessageAgent that is sending the message.</param>
      <param name="message">The Message to send.</param>
    </member>
    <member name="T:mx.messaging.channels.SecureAMFChannel">
      <summary>The SecureAMFChannel class is identical to the AMFChannel class except that it uses a secure protocol, HTTPS, to send messages to an AMF endpoint.</summary>
    </member>
    <member name="M:mx.messaging.channels.SecureAMFChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates an new SecureAMFChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="P:mx.messaging.channels.SecureAMFChannel.protocol">
      <summary>Returns the protocol for this channel (https).</summary>
    </member>
    <member name="T:mx.messaging.channels.SecureHTTPChannel">
      <summary>The SecureHTTPChannel class is identical to the HTTPChannel class except that it uses a secure protocol, HTTPS, to send messages to an HTTP endpoint.</summary>
    </member>
    <member name="M:mx.messaging.channels.SecureHTTPChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates an new SecureHTTPChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="P:mx.messaging.channels.SecureHTTPChannel.protocol">
      <summary>Returns the protocol for this channel (https).</summary>
    </member>
    <member name="T:mx.messaging.channels.SecureStreamingAMFChannel">
      <summary>The SecureStreamingAMFChannel class is identical to the StreamingAMFChannel class except that it uses a secure protocol, HTTPS, to send messages to an AMF endpoint.</summary>
    </member>
    <member name="M:mx.messaging.channels.SecureStreamingAMFChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates an new SecureStreamingAMFChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="P:mx.messaging.channels.SecureStreamingAMFChannel.protocol">
      <summary>Returns the protocol for this channel (https).</summary>
    </member>
    <member name="T:mx.messaging.channels.SecureStreamingHTTPChannel">
      <summary>The SecureStreamingHTTPChannel class is identical to the StreamingHTTPChannel class except that it uses a secure protocol, HTTPS, to send messages to an HTTP endpoint.</summary>
    </member>
    <member name="M:mx.messaging.channels.SecureStreamingHTTPChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates an new SecureStreamingHTTPChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="P:mx.messaging.channels.SecureStreamingHTTPChannel.protocol">
      <summary>Returns the protocol for this channel (https).</summary>
    </member>
    <member name="T:mx.messaging.channels.StreamingAMFChannel">
      <summary>The StreamingAMFChannel class provides support for messaging and offers a different push model than the base AMFChannel.</summary>
    </member>
    <member name="M:mx.messaging.channels.StreamingAMFChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates an new StreamingAMFChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="M:mx.messaging.channels.StreamingAMFChannel.poll">
      <summary>Polling is not supported by this channel.</summary>
    </member>
    <member name="T:mx.messaging.channels.StreamingConnectionHandler">
      <summary>A helper class that is used by the streaming channels to open an internal HTTP connection to the server that is held open to allow the server to stream data down to the client with no poll overhead.</summary>
    </member>
    <member name="E:mx.messaging.channels.StreamingConnectionHandler.status">
      <summary>Dispatched when the StreamingConnectionHandler receives a status command from the server.</summary>
    </member>
    <member name="M:mx.messaging.channels.StreamingConnectionHandler.#ctor(mx.messaging.Channel,mx.logging.ILogger)">
      <summary>Creates an new StreamingConnectionHandler instance.</summary>
      <param name="channel">The Channel that uses this class.</param>
      <param name="log">Reference to the logger for the associated Channel.</param>
    </member>
    <member name="M:mx.messaging.channels.StreamingConnectionHandler.closeStreamingConnection">
      <summary>Used by the streaming channels to shut down the streaming connection.</summary>
    </member>
    <member name="M:mx.messaging.channels.StreamingConnectionHandler.openStreamingConnection">
      <summary>Used by the streaming channels to set up the streaming connection if necessary and issue the open request to the server.</summary>
    </member>
    <member name="M:mx.messaging.channels.StreamingConnectionHandler.readMessage">
      <summary>Used by the streamProgressHandler to read a message.</summary>
    </member>
    <member name="F:mx.messaging.channels.StreamingConnectionHandler.DISCONNECT_CODE">
      <summary>The code for the StatusEvent dispatched by this handler when a disconnect command is received from the server.</summary>
    </member>
    <member name="F:mx.messaging.channels.StreamingConnectionHandler.channel">
      <summary>The Channel that uses this class.</summary>
    </member>
    <member name="F:mx.messaging.channels.StreamingConnectionHandler.chunkBuffer">
      <summary>Byte buffer used to store the current chunk from the remote endpoint.</summary>
    </member>
    <member name="F:mx.messaging.channels.StreamingConnectionHandler.dataBytesToRead">
      <summary>Counter that keeps track of how many data bytes remain to be read for the current chunk.</summary>
    </member>
    <member name="F:mx.messaging.channels.StreamingConnectionHandler.dataOffset">
      <summary>Index into the chunk buffer pointing to the first byte of chunk data.</summary>
    </member>
    <member name="T:mx.messaging.channels.StreamingHTTPChannel">
      <summary>The StreamingHTTPChannel class provides support for messaging and offers a different push model than the base HTTPChannel.</summary>
    </member>
    <member name="M:mx.messaging.channels.StreamingHTTPChannel.#ctor(Avm.String,Avm.String)">
      <summary>Creates an new StreamingHTTPChannel instance.</summary>
      <param name="id">The id of this Channel.</param>
      <param name="uri">The uri for this Channel.</param>
    </member>
    <member name="M:mx.messaging.channels.StreamingHTTPChannel.poll">
      <summary>Polling is not supported by this channel.</summary>
    </member>
    <member name="T:mx.messaging.ChannelSet">
      <summary>The ChannelSet is a set of Channels that are used to send messages to a target destination.</summary>
    </member>
    <member name="E:mx.messaging.ChannelSet.propertyChange">
      <summary>Dispatched when a property of the ChannelSet changes.</summary>
    </member>
    <member name="E:mx.messaging.ChannelSet.fault">
      <summary>The fault event is dispatched when a login or logout call fails.</summary>
    </member>
    <member name="E:mx.messaging.ChannelSet.result">
      <summary>The result event is dispatched when a login or logout call successfully returns.</summary>
    </member>
    <member name="E:mx.messaging.ChannelSet.channelFault">
      <summary>Dispatched after a Channel in the ChannelSet has faulted.</summary>
    </member>
    <member name="E:mx.messaging.ChannelSet.channelDisconnect">
      <summary>Dispatched after a Channel in the ChannelSet has disconnected from its endpoint.</summary>
    </member>
    <member name="E:mx.messaging.ChannelSet.channelConnect">
      <summary>Dispatched after a Channel in the ChannelSet has connected to its endpoint.</summary>
    </member>
    <member name="M:mx.messaging.ChannelSet.#ctor(Avm.Array,System.Boolean)">
      <summary>Constructs a ChannelSet.</summary>
      <param name="channelIds">The ids of configured Channels obtained from ServerConfig for this ChannelSet to use. If null, Channels must be manually added to the ChannelSet.</param>
      <param name="clusteredWithURLLoadBalancing">True if the Channels in the ChannelSet are clustered using url load balancing.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.addChannel(mx.messaging.Channel)">
      <summary>Adds a Channel to the ChannelSet.</summary>
      <param name="channel">The Channel to add.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.channelConnectHandler(mx.messaging.events.ChannelEvent)">
      <summary>Handles a CONNECT ChannelEvent and redispatches the event.</summary>
      <param name="event">The ChannelEvent.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.channelDisconnectHandler(mx.messaging.events.ChannelEvent)">
      <summary>Handles a DISCONNECT ChannelEvent and redispatches the event.</summary>
      <param name="event">The ChannelEvent.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.channelFaultHandler(mx.messaging.events.ChannelFaultEvent)">
      <summary>Handles a ChannelFaultEvent and redispatches the event.</summary>
      <param name="event">The ChannelFaultEvent.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.connect(mx.messaging.MessageAgent)">
      <summary>Connects a MessageAgent to the ChannelSet.</summary>
      <param name="agent">The MessageAgent to connect.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.disconnect(mx.messaging.MessageAgent)">
      <summary>Disconnects a specific MessageAgent from the ChannelSet.</summary>
      <param name="agent">The MessageAgent to disconnect.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.disconnectAll">
      <summary>Disconnects all associated MessageAgents and disconnects any underlying Channel that is connected.</summary>
    </member>
    <member name="M:mx.messaging.ChannelSet.login(Avm.String,Avm.String,Avm.String)">
      <summary>Authenticates the ChannelSet with the server using the provided credentials.</summary>
      <param name="username">The username.</param>
      <param name="password">The password.</param>
      <param name="charset">The character set encoding to use while encoding the credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.logout(mx.messaging.MessageAgent)">
      <summary>Logs the ChannelSet out from the server.</summary>
      <param name="agent">Legacy argument. The MessageAgent that is initiating the logout.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.removeChannel(mx.messaging.Channel)">
      <summary>Removes a Channel from the ChannelSet.</summary>
      <param name="channel">The Channel to remove.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.send(mx.messaging.MessageAgent,mx.messaging.messages.IMessage)">
      <summary>Sends a message from a MessageAgent over the currently connected Channel.</summary>
      <param name="agent">The MessageAgent sending the message.</param>
      <param name="message">The Message to send.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.setCredentials(Avm.String,mx.messaging.MessageAgent,Avm.String)">
      <summary>Stores the credentials and passes them through to every connected channel.</summary>
      <param name="credentials">The credentials for the MessageAgent.</param>
      <param name="agent">The MessageAgent that is setting the credentials.</param>
      <param name="charset">The character set encoding used while encoding the credentials. The default is null, which implies the legacy encoding of ISO-Latin-1.</param>
    </member>
    <member name="M:mx.messaging.ChannelSet.toString">
      <summary>Returns a String containing the ids of the Channels in the ChannelSet.</summary>
    </member>
    <member name="P:mx.messaging.ChannelSet.authenticated">
      <summary>Indicates whether the ChannelSet has an underlying Channel that successfully authenticated with its endpoint.</summary>
    </member>
    <member name="P:mx.messaging.ChannelSet.channelIds">
      <summary>The ids of the Channels used by the ChannelSet.</summary>
    </member>
    <member name="P:mx.messaging.ChannelSet.channels">
      <summary>Provides access to the Channels in the ChannelSet.</summary>
    </member>
    <member name="P:mx.messaging.ChannelSet.clustered">
      <summary>Indicates whether the ChannelSet targets a clustered destination.</summary>
    </member>
    <member name="P:mx.messaging.ChannelSet.connected">
      <summary>Indicates whether the ChannelSet is connected.</summary>
    </member>
    <member name="P:mx.messaging.ChannelSet.currentChannel">
      <summary>Returns the current Channel for the ChannelSet.</summary>
    </member>
    <member name="P:mx.messaging.ChannelSet.messageAgents">
      <summary>Provides access to the set of MessageAgents that use this ChannelSet.</summary>
    </member>
    <member name="N:mx.messaging.config" />
    <member name="T:mx.messaging.config.ConfigMap">
      <summary>The ConfigMap class provides a mechanism to store the properties returned by the server with the ordering of the properties maintained.</summary>
    </member>
    <member name="M:mx.messaging.config.ConfigMap.#ctor(System.Object)">
      <param name="item" />
    </member>
    <member name="M:mx.messaging.config.ConfigMap.callProperty(,System.Object)">
      <summary>Returns the value of the proxied object's method with the specified name.</summary>
      <param name="name">The name of the method being invoked.</param>
      <param name="rest">An array specifying the arguments to the called method.</param>
    </member>
    <member name="M:mx.messaging.config.ConfigMap.deleteProperty()">
      <summary>Deletes the specified property on the proxied object and sends notification of the delete to the handler.</summary>
      <param name="name">Typically a string containing the name of the property, or possibly a QName where the property name is found by inspecting the <code>localName</code> property.</param>
    </member>
    <member name="M:mx.messaging.config.ConfigMap.getProperty()">
      <summary>Returns the specified property value of the proxied object.</summary>
      <param name="name">Typically a string containing the name of the property, or possibly a QName where the property name is found by inspecting the <code>localName</code> property.</param>
    </member>
    <member name="M:mx.messaging.config.ConfigMap.hasProperty()">
      <summary>This is an internal function that must be implemented by a subclass of flash.utils.Proxy.</summary>
      <param name="name">The property name that should be tested for existence.</param>
    </member>
    <member name="M:mx.messaging.config.ConfigMap.nextName(System.Int32)">
      <summary>This is an internal function that must be implemented by a subclass of flash.utils.Proxy.</summary>
      <param name="index" />
    </member>
    <member name="M:mx.messaging.config.ConfigMap.nextNameIndex(System.Int32)">
      <summary>This is an internal function that must be implemented by a subclass of flash.utils.Proxy.</summary>
      <param name="index" />
    </member>
    <member name="M:mx.messaging.config.ConfigMap.nextValue(System.Int32)">
      <summary>This is an internal function that must be implemented by a subclass of flash.utils.Proxy.</summary>
      <param name="index" />
    </member>
    <member name="M:mx.messaging.config.ConfigMap.setProperty(,)">
      <summary>Updates the specified property on the proxied object and sends notification of the update to the handler.</summary>
      <param name="name">Object containing the name of the property that should be updated on the proxied object.</param>
      <param name="value">Value that should be set on the proxied object.</param>
    </member>
    <member name="F:mx.messaging.config.ConfigMap.propertyList">
      <summary>Contains a list of all of the property names for the proxied object.</summary>
    </member>
    <member name="T:mx.messaging.config.ServerConfig">
      <summary>This class provides access to the server messaging configuration information.</summary>
    </member>
    <member name="M:mx.messaging.config.ServerConfig.checkChannelConsistency(Avm.String,Avm.String)">
      <summary>This method ensures that the destinations specified contain identical channel definitions.</summary>
      <param name="destinationA">destinationA:String first destination to compare against</param>
      <param name="destinationB">destinationB:String second destination to compare channels with</param>
    </member>
    <member name="M:mx.messaging.config.ServerConfig.getChannel(Avm.String,System.Boolean)">
      <summary>Returns a shared instance of the configured Channel.</summary>
      <param name="id">The id of the desired Channel.</param>
      <param name="clustered">True if the Channel will be used in a clustered fashion; otherwise false.</param>
    </member>
    <member name="M:mx.messaging.config.ServerConfig.getChannelSet(Avm.String)">
      <summary>Returns a shared ChannelSet for use with the specified destination belonging to the service that handles the specified message type.</summary>
      <param name="destinationId">The target destination id.</param>
    </member>
    <member name="M:mx.messaging.config.ServerConfig.getProperties(Avm.String)">
      <summary>Returns the property information for the specified destination</summary>
      <param name="destinationId">The id of the desired destination.</param>
    </member>
    <member name="P:mx.messaging.config.ServerConfig.xml">
      <summary>The XML configuration; this value must contain the relevant portions of the &lt;services&gt; tag from the services-config.xml file.</summary>
    </member>
    <member name="T:mx.messaging.Consumer">
      <summary>A Consumer subscribes to a destination to receive messages.</summary>
    </member>
    <member name="E:mx.messaging.Consumer.message">
      <summary>Dispatched when a message is received by the Consumer.</summary>
    </member>
    <member name="M:mx.messaging.Consumer.#ctor(Avm.String)">
      <summary>Constructs a Consumer.</summary>
      <param name="messageType">The alias for the message type processed by the service hosting the remote destination the Consumer will subscribe to. This parameter is deprecated and it is ignored by the constructor.</param>
    </member>
    <member name="M:mx.messaging.Consumer.internalSend(mx.messaging.messages.IMessage,System.Boolean)">
      <param name="message" />
      <param name="waitForClientId" />
    </member>
    <member name="P:mx.messaging.Consumer.selector">
      <summary>The selector for the Consumer.</summary>
    </member>
    <member name="P:mx.messaging.Consumer.subtopic">
      <summary>Provides access to the subtopic for the remote destination that the MessageAgent uses.</summary>
    </member>
    <member name="N:mx.messaging.errors" />
    <member name="T:mx.messaging.errors.ChannelError">
      <summary>This is the base class for any channel related errors.</summary>
    </member>
    <member name="M:mx.messaging.errors.ChannelError.#ctor(Avm.String)">
      <summary>Constructs a new instance of a ChannelError with the specified message.</summary>
      <param name="msg">String that contains the message that describes the error.</param>
    </member>
    <member name="T:mx.messaging.errors.InvalidChannelError">
      <summary>This error is thrown when a Channel can't be accessed or is not valid for the current destination.</summary>
    </member>
    <member name="M:mx.messaging.errors.InvalidChannelError.#ctor(Avm.String)">
      <summary>Constructs a new instance of an InvalidChannelError with the specified message.</summary>
      <param name="msg">String that contains the message that describes this InvalidChannelError.</param>
    </member>
    <member name="T:mx.messaging.errors.InvalidDestinationError">
      <summary>This error is thrown when a destination can't be accessed or is not valid.</summary>
    </member>
    <member name="M:mx.messaging.errors.InvalidDestinationError.#ctor(Avm.String)">
      <summary>Constructs a new instance of an InvalidDestinationError with the specified message.</summary>
      <param name="msg">String that contains the message that describes this InvalidDestinationError.</param>
    </member>
    <member name="T:mx.messaging.errors.MessageSerializationError">
      <summary>This error indicates a problem serializing a message within a channel.</summary>
    </member>
    <member name="M:mx.messaging.errors.MessageSerializationError.#ctor(Avm.String,mx.messaging.messages.ErrorMessage)">
      <summary>Constructs a new instance of the MessageSerializationError with the specified message.</summary>
      <param name="msg">String that contains the message that describes the error.</param>
      <param name="fault" />
    </member>
    <member name="F:mx.messaging.errors.MessageSerializationError.fault">
      <summary>Provides specific information about the fault that occurred and for which message.</summary>
    </member>
    <member name="T:mx.messaging.errors.MessagingError">
      <summary>This is the base class for any messaging related error.</summary>
    </member>
    <member name="M:mx.messaging.errors.MessagingError.#ctor(Avm.String)">
      <summary>Constructs a new instance of a MessagingError with the specified message.</summary>
      <param name="msg">String that contains the message that describes the error.</param>
    </member>
    <member name="M:mx.messaging.errors.MessagingError.toString">
      <summary>Returns the string "[MessagingError]" by default, and includes the message property if defined.</summary>
    </member>
    <member name="T:mx.messaging.errors.NoChannelAvailableError">
      <summary>This error is thrown when no Channel is available to send messages.</summary>
    </member>
    <member name="M:mx.messaging.errors.NoChannelAvailableError.#ctor(Avm.String)">
      <summary>Constructs a new instance of the NoChannelAvailableError with the specified message.</summary>
      <param name="msg">String that contains the message that describes this NoChannelAvailableError.</param>
    </member>
    <member name="N:mx.messaging.events" />
    <member name="T:mx.messaging.events.ChannelEvent">
      <summary>The ChannelEvent is used to propagate channel events within the messaging system.</summary>
    </member>
    <member name="E:mx.messaging.events.ChannelEvent.channelConnect">
      <summary>The CONNECT event type; indicates that the Channel connected to its endpoint. <p>The value of this constant is <code>"channelConnect"</code>.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>channel</code></td><td>The channel that generated this event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>reconnecting</code></td><td> Indicates whether the channel that generated this event is reconnecting.</td></tr> <tr><td><code>rejected</code></td><td> Indicates whether the channel that generated this event was rejected. This would be true in the event that the channel has been disconnected due to inactivity and should not attempt to failover or connect on an alternate channel.</td></tr> </table></summary>
    </member>
    <member name="E:mx.messaging.events.ChannelEvent.channelDisconnect">
      <summary>The DISCONNECT event type; indicates that the Channel disconnected from its endpoint. <p>The value of this constant is <code>"channelDisconnect"</code>.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>channel</code></td><td>The channel that generated this event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>reconnecting</code></td><td> Indicates whether the channel that generated this event is reconnecting.</td></tr> <tr><td><code>rejected</code></td><td> Indicates whether the channel that generated this event was rejected. This would be true in the event that the channel has been disconnected due to inactivity and should not attempt to failover or connect on an alternate channel.</td></tr> </table></summary>
    </member>
    <member name="M:mx.messaging.events.ChannelEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.messaging.Channel,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Constructs an instance of this event with the specified type and Channel instance.</summary>
      <param name="type">The ChannelEvent type.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Indicates whether the behavior associated with the event can be prevented; used by the RPC subclasses.</param>
      <param name="channel">The Channel generating the event.</param>
      <param name="reconnecting">Indicates whether the Channel is in the process of reconnecting or not.</param>
      <param name="rejected">Indicates whether the Channel's connection has been rejected, which suppresses automatic reconnection.</param>
      <param name="connected">Indicates whether the Channel that generated this event is already connected.</param>
    </member>
    <member name="M:mx.messaging.events.ChannelEvent.clone">
      <summary>Clones the ChannelEvent.</summary>
    </member>
    <member name="M:mx.messaging.events.ChannelEvent.createEvent(Avm.String,mx.messaging.Channel,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Utility method to create a new ChannelEvent that doesn't bubble and is not cancelable.</summary>
      <param name="type">The ChannelEvent type.</param>
      <param name="channel">The Channel generating the event.</param>
      <param name="reconnecting">Indicates whether the Channel is in the process of reconnecting or not.</param>
      <param name="rejected">Indicates whether the Channel's connection has been rejected, which suppresses automatic reconnection.</param>
      <param name="connected">Indicates whether the Channel that generated this event is already connected.</param>
    </member>
    <member name="M:mx.messaging.events.ChannelEvent.toString">
      <summary>Returns a string representation of the ChannelEvent.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelEvent.CONNECT">
      <summary>The CONNECT event type; indicates that the Channel connected to its endpoint.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelEvent.DISCONNECT">
      <summary>The DISCONNECT event type; indicates that the Channel disconnected from its endpoint.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelEvent.channel">
      <summary>The Channel that generated this event.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelEvent.connected">
      <summary>Indicates whether the Channel that generated this event is already connected.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelEvent.reconnecting">
      <summary>Indicates whether the Channel that generated this event is reconnecting.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelEvent.rejected">
      <summary>Indicates whether the Channel that generated this event was rejected.</summary>
    </member>
    <member name="T:mx.messaging.events.ChannelFaultEvent">
      <summary>The ChannelFaultEvent class is used to propagate channel fault events within the messaging system.</summary>
    </member>
    <member name="E:mx.messaging.events.ChannelFaultEvent.channelFault">
      <summary>The FAULT event type; indicates that the Channel faulted. <p>The value of this constant is <code>"channelFault"</code>.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>channel</code></td><td>The Channel that generated this event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>faultCode</code></td><td>Provides destination-specific details of the failure.</td></tr> <tr><td><code>faultDetail</code></td><td>Provides access to the destination-specific reason for the failure.</td></tr> <tr><td><code>faultString</code></td><td>Provides access to the underlying reason for the failure if the channel did not raise the failure itself.</td></tr> <tr><td><code>reconnecting</code></td><td> Indicates whether the channel that generated this event is reconnecting.</td></tr> <tr><td><code>rootCause</code></td><td> Provides access to the underlying reason for the failure if the channel did not raise the failure itself.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.messaging.events.ChannelFaultEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.messaging.Channel,System.Boolean,Avm.String,Avm.String,Avm.String,System.Boolean,System.Boolean)">
      <summary>Constructs an instance of this event with the specified type.</summary>
      <param name="type">The Channel generating the event.</param>
      <param name="bubbles">Indicates whether the Channel is in the process of reconnecting or not.</param>
      <param name="cancelable">The fault code.</param>
      <param name="channel">The fault level.</param>
      <param name="reconnecting">The fault description.</param>
      <param name="code">Indicates whether the Channel's connection has been rejected, which suppresses automatic reconnection.</param>
      <param name="level">Indicates whether the Channel that generated this event is already connected.</param>
      <param name="description" />
      <param name="rejected" />
      <param name="connected" />
    </member>
    <member name="M:mx.messaging.events.ChannelFaultEvent.clone">
      <summary>Clones the ChannelFaultEvent.</summary>
    </member>
    <member name="M:mx.messaging.events.ChannelFaultEvent.createErrorMessage">
      <summary>Creates an ErrorMessage based on the ChannelFaultEvent by copying over the faultCode, faultString, faultDetail and rootCause to the new ErrorMessage.</summary>
    </member>
    <member name="M:mx.messaging.events.ChannelFaultEvent.createEvent(mx.messaging.Channel,System.Boolean,Avm.String,Avm.String,Avm.String,System.Boolean,System.Boolean)">
      <summary>Utility method to create a new ChannelFaultEvent that doesn't bubble and is not cancelable.</summary>
      <param name="channel">The Channel generating the event.</param>
      <param name="reconnecting">Indicates whether the Channel is in the process of reconnecting or not.</param>
      <param name="code">The fault code.</param>
      <param name="level">The fault level.</param>
      <param name="description">The fault description.</param>
      <param name="rejected">Indicates whether the Channel's connection has been rejected, which suppresses automatic reconnection.</param>
      <param name="connected">Indicates whether the Channel that generated this event is already connected.</param>
    </member>
    <member name="M:mx.messaging.events.ChannelFaultEvent.toString">
      <summary>Returns a string representation of the ChannelFaultEvent.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelFaultEvent.FAULT">
      <summary>The FAULT event type; indicates that the Channel faulted.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelFaultEvent.faultCode">
      <summary>Provides access to the destination-specific failure code.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelFaultEvent.faultDetail">
      <summary>Provides destination-specific details of the failure.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelFaultEvent.faultString">
      <summary>Provides access to the destination-specific reason for the failure.</summary>
    </member>
    <member name="F:mx.messaging.events.ChannelFaultEvent.rootCause">
      <summary>Provides access to the underlying reason for the failure if the channel did not raise the failure itself.</summary>
    </member>
    <member name="T:mx.messaging.events.MessageAckEvent">
      <summary>The MessageAckEvent class is used to propagate acknowledge messages within the messaging system.</summary>
    </member>
    <member name="E:mx.messaging.events.MessageAckEvent.acknowledge">
      <summary>The ACKNOWLEDGE event type; dispatched upon receipt of an acknowledgement. <p>The value of this constant is <code>"acknowledge"</code>.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>acknowledgeMessage</code></td><td> Utility property to get the message property from MessageEvent as an AcknowledgeMessage.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>.</td></tr> <tr><td><code>correlate</code></td><td> The original Message correlated with this acknowledgement.</td></tr> <tr><td><code>message</code></td><td>The Message associated with this event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.messaging.events.MessageAckEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.messaging.messages.AcknowledgeMessage,mx.messaging.messages.IMessage)">
      <summary>Constructs an instance of this event with the specified acknowledge message and original correlated message.</summary>
      <param name="type">The type for the MessageAckEvent.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Indicates whether the behavior associated with the event can be prevented.</param>
      <param name="ack">The AcknowledgeMessage this event should dispatch.</param>
      <param name="correlation">The message correlated with this acknowledgement.</param>
    </member>
    <member name="M:mx.messaging.events.MessageAckEvent.clone">
      <summary>Clones the MessageAckEvent.</summary>
    </member>
    <member name="M:mx.messaging.events.MessageAckEvent.createEvent(mx.messaging.messages.AcknowledgeMessage,mx.messaging.messages.IMessage)">
      <summary>Utility method to create a new MessageAckEvent that doesn't bubble and is not cancelable.</summary>
      <param name="ack">The AcknowledgeMessage this event should dispatch.</param>
      <param name="correlation">The Message correlated with this acknowledgement.</param>
    </member>
    <member name="M:mx.messaging.events.MessageAckEvent.toString">
      <summary>Returns a string representation of the MessageAckEvent.</summary>
    </member>
    <member name="F:mx.messaging.events.MessageAckEvent.ACKNOWLEDGE">
      <summary>The ACKNOWLEDGE event type; dispatched upon receipt of an acknowledgement.</summary>
    </member>
    <member name="F:mx.messaging.events.MessageAckEvent.correlation">
      <summary>The original Message correlated with this acknowledgement.</summary>
    </member>
    <member name="P:mx.messaging.events.MessageAckEvent.acknowledgeMessage">
      <summary>Utility property to get the message property from the MessageEvent as an AcknowledgeMessage.</summary>
    </member>
    <member name="T:mx.messaging.events.MessageEvent">
      <summary>The MessageEvent class is used to propagate messages within the messaging system.</summary>
    </member>
    <member name="E:mx.messaging.events.MessageEvent.message">
      <summary>The MESSAGE event type; dispatched upon receipt of a message. <p>The value of this constant is <code>"message"</code>.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>message</code></td><td>The message associated with this event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.messaging.events.MessageEvent.result">
      <summary>The RESULT event type; dispatched when an RPC agent receives a result from a remote service destination. <p>The value of this constant is <code>"result"</code>.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>message</code></td><td>The message associated with this event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.messaging.events.MessageEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.messaging.messages.IMessage)">
      <summary>Constructs an instance of this event with the specified type and message.</summary>
      <param name="type">The type for the MessageEvent.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Indicates whether the behavior associated with the event can be prevented; used by the RPC subclasses.</param>
      <param name="message">The associated message.</param>
    </member>
    <member name="M:mx.messaging.events.MessageEvent.clone">
      <summary>Clones the MessageEvent.</summary>
    </member>
    <member name="M:mx.messaging.events.MessageEvent.createEvent(Avm.String,mx.messaging.messages.IMessage)">
      <summary>Utility method to create a new MessageEvent that doesn't bubble and is not cancelable.</summary>
      <param name="type">The type for the MessageEvent.</param>
      <param name="msg">The associated message.</param>
    </member>
    <member name="M:mx.messaging.events.MessageEvent.toString">
      <summary>Returns a string representation of the MessageEvent.</summary>
    </member>
    <member name="F:mx.messaging.events.MessageEvent.MESSAGE">
      <summary>The MESSAGE event type; dispatched upon receipt of a message.</summary>
    </member>
    <member name="F:mx.messaging.events.MessageEvent.RESULT">
      <summary>The RESULT event type; dispatched when an RPC agent receives a result from a remote service destination.</summary>
    </member>
    <member name="F:mx.messaging.events.MessageEvent.message">
      <summary>The Message associated with this event.</summary>
    </member>
    <member name="T:mx.messaging.events.MessageFaultEvent">
      <summary>The MessageFaultEvent class is used to propagate fault messages within the messaging system.</summary>
    </member>
    <member name="E:mx.messaging.events.MessageFaultEvent.fault">
      <summary>The FAULT event type; dispatched for a message fault. <p>The value of this constant is <code>"fault"</code>.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>faultCode</code></td><td>Provides destination-specific details of the failure.</td></tr> <tr><td><code>faultDetail</code></td><td>Provides access to the destination-specific reason for the failure.</td></tr> <tr><td><code>faultString</code></td><td>Provides access to the underlying reason for the failure if the channel did not raise the failure itself.</td></tr> <tr><td><code>message</code></td><td>The ErrorMessage for this event.</td></tr> <tr><td><code>rootCause</code></td><td> Provides access to the underlying reason for the failure, if one exists.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.messaging.events.MessageFaultEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.messaging.messages.ErrorMessage)">
      <summary>Constructs an instance of a fault message event for the specified message and fault information.</summary>
      <param name="type">The type for the MessageAckEvent.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Indicates whether the behavior associated with the event can be prevented.</param>
      <param name="message">The ErrorMessage associated with the fault.</param>
    </member>
    <member name="M:mx.messaging.events.MessageFaultEvent.clone">
      <summary>Clones the MessageFaultEvent.</summary>
    </member>
    <member name="M:mx.messaging.events.MessageFaultEvent.createEvent(mx.messaging.messages.ErrorMessage)">
      <summary>Utility method to create a new MessageFaultEvent that doesn't bubble and is not cancelable.</summary>
      <param name="msg">The ErrorMessage associated with the fault.</param>
    </member>
    <member name="M:mx.messaging.events.MessageFaultEvent.toString">
      <summary>Returns a string representation of the MessageFaultEvent.</summary>
    </member>
    <member name="F:mx.messaging.events.MessageFaultEvent.FAULT">
      <summary>The FAULT event type; dispatched for a message fault.</summary>
    </member>
    <member name="F:mx.messaging.events.MessageFaultEvent.message">
      <summary>The ErrorMessage for this event.</summary>
    </member>
    <member name="P:mx.messaging.events.MessageFaultEvent.faultCode">
      <summary>Provides access to the destination specific failure code.</summary>
    </member>
    <member name="P:mx.messaging.events.MessageFaultEvent.faultDetail">
      <summary>Provides destination specific details of the failure.</summary>
    </member>
    <member name="P:mx.messaging.events.MessageFaultEvent.faultString">
      <summary>Provides access to the destination specific reason for the failure.</summary>
    </member>
    <member name="P:mx.messaging.events.MessageFaultEvent.rootCause">
      <summary>Provides access to the root cause of the failure, if one exists.</summary>
    </member>
    <member name="T:mx.messaging.FlexClient">
      <summary>Singleton class that stores the global Id for this Player instance that is server assigned when the client makes its initial connection to the server.</summary>
    </member>
    <member name="E:mx.messaging.FlexClient.propertyChange">
      <summary>Dispatched when a property of the FlexClient singleton changes.</summary>
    </member>
    <member name="M:mx.messaging.FlexClient.getInstance">
      <summary>Returns the sole instance of this singleton class, creating it if it does not already exist.</summary>
    </member>
    <member name="P:mx.messaging.FlexClient.id">
      <summary>The global FlexClient Id for this Player instance.</summary>
    </member>
    <member name="N:mx.messaging.management" />
    <member name="T:mx.messaging.management.Attribute">
      <summary>Client representation of a MBean attribute.</summary>
    </member>
    <member name="M:mx.messaging.management.Attribute.#ctor">
      <summary>Creates a new instance of an empty Attribute.</summary>
    </member>
    <member name="M:mx.messaging.management.Attribute.toString">
      <summary>Returns a string representation of the attribute.</summary>
    </member>
    <member name="F:mx.messaging.management.Attribute.name">
      <summary>The attribute name.</summary>
    </member>
    <member name="F:mx.messaging.management.Attribute.value">
      <summary>The attribute value.</summary>
    </member>
    <member name="T:mx.messaging.management.MBeanAttributeInfo">
      <summary>Client representation of metadata for a MBean attribute.</summary>
    </member>
    <member name="M:mx.messaging.management.MBeanAttributeInfo.#ctor">
      <summary>Creates a new instance of an empty MBeanAttributeInfo.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanAttributeInfo.isIs">
      <summary>Indicates if the server-side getter for the attribute has an 'is' prefix.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanAttributeInfo.readable">
      <summary>Indicates if the attribute is readable.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanAttributeInfo.type">
      <summary>The data type of the attribute.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanAttributeInfo.writable">
      <summary>Indicates if the attribute is writable.</summary>
    </member>
    <member name="T:mx.messaging.management.MBeanConstructorInfo">
      <summary>Client representation of metadata for a MBean constructor.</summary>
    </member>
    <member name="M:mx.messaging.management.MBeanConstructorInfo.#ctor">
      <summary>Creates a new instance of an empty MBeanConstructorInfo.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanConstructorInfo.signature">
      <summary>The parameter data types that make up the constructor signature.</summary>
    </member>
    <member name="T:mx.messaging.management.MBeanFeatureInfo">
      <summary>Client representation of metadata for a MBean feature.</summary>
    </member>
    <member name="M:mx.messaging.management.MBeanFeatureInfo.#ctor">
      <summary>Creates a new instance of an empty MBeanFeatureInfo.</summary>
    </member>
    <member name="M:mx.messaging.management.MBeanFeatureInfo.toString">
      <summary>Returns a string representation of the feature info.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanFeatureInfo.description">
      <summary>The description of the MBean feature.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanFeatureInfo.name">
      <summary>The name of the MBean feature.</summary>
    </member>
    <member name="T:mx.messaging.management.MBeanInfo">
      <summary>Client representation of metadata for a MBean.</summary>
    </member>
    <member name="M:mx.messaging.management.MBeanInfo.#ctor">
      <summary>Creates a new instance of an empty MBeanInfo.</summary>
    </member>
    <member name="M:mx.messaging.management.MBeanInfo.toString">
      <summary>Returns a string representation of the MBean info.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanInfo.attributes">
      <summary>The attributes exposed by the MBean.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanInfo.className">
      <summary>The class name for the MBean.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanInfo.constructors">
      <summary>The constructors exposed by the MBean.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanInfo.description">
      <summary>The description for the MBean.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanInfo.operations">
      <summary>The operations provided by the MBean.</summary>
    </member>
    <member name="T:mx.messaging.management.MBeanOperationInfo">
      <summary>Client representation of metadata for a MBean operation.</summary>
    </member>
    <member name="M:mx.messaging.management.MBeanOperationInfo.#ctor">
      <summary>Creates a new instance of an empty MBeanOperationInfo.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanOperationInfo.ACTION">
      <summary>The operation is write-like, updating the control in some way.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanOperationInfo.ACTION_INFO">
      <summary>The operation is both read-like and write-like, updating the control and returning information.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanOperationInfo.INFO">
      <summary>The operation is purely informational with no side-effects, read-only.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanOperationInfo.UNKNOWN">
      <summary>The side-effects for the operation are unknown.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanOperationInfo.impact">
      <summary>The impact of the operation.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanOperationInfo.returnType">
      <summary>The return data type for the operation.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanOperationInfo.signature">
      <summary>The parameter data types that make up the operation signature.</summary>
    </member>
    <member name="T:mx.messaging.management.MBeanParameterInfo">
      <summary>Client representation of metadata for a MBean operation parameter.</summary>
    </member>
    <member name="M:mx.messaging.management.MBeanParameterInfo.#ctor">
      <summary>Creates a new instance of an empty MBeanParameterInfo.</summary>
    </member>
    <member name="F:mx.messaging.management.MBeanParameterInfo.type">
      <summary>The data type of the operation parameter.</summary>
    </member>
    <member name="T:mx.messaging.management.ObjectInstance">
      <summary>Client representation of an object name instance for server-side management controls.</summary>
    </member>
    <member name="M:mx.messaging.management.ObjectInstance.#ctor">
      <summary>Creates a new instance of an empty ObjectInstance.</summary>
    </member>
    <member name="M:mx.messaging.management.ObjectInstance.toString">
      <summary>Returns a string representation of the object name instance.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectInstance.className">
      <summary>The class name.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectInstance.objectName">
      <summary>The object name.</summary>
    </member>
    <member name="T:mx.messaging.management.ObjectName">
      <summary>Client representation of the name for server-side management controls.</summary>
    </member>
    <member name="M:mx.messaging.management.ObjectName.#ctor">
      <summary>Creates a new instance of an empty ObjectName.</summary>
    </member>
    <member name="M:mx.messaging.management.ObjectName.getKeyProperty(Avm.String)">
      <summary>Returns the value associated with the specified property key.</summary>
      <param name="property">property key.</param>
    </member>
    <member name="M:mx.messaging.management.ObjectName.toString">
      <summary>This method will return a string representation of the object name.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectName.canonicalKeyPropertyListString">
      <summary>A string representation of the list of key properties, with the key properties sorted in lexical order.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectName.canonicalName">
      <summary>The canonical form of the name; a string representation with the properties sorted in lexical order.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectName.domain">
      <summary>The domain part.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectName.domainPattern">
      <summary>Indicates if the object name is a pattern on the domain part.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectName.keyPropertyList">
      <summary>The key properties as an Object, keyed by property name.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectName.keyPropertyListString">
      <summary>A string representation of the list of key properties.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectName.pattern">
      <summary>Indicates if the object name is a pattern.</summary>
    </member>
    <member name="F:mx.messaging.management.ObjectName.propertyPattern">
      <summary>Indicates if the object name is a pattern on the key properties.</summary>
    </member>
    <member name="T:mx.messaging.MessageAgent">
      <summary>The MessageAgent class provides the basic low-level functionality common to message handling for a destination.</summary>
    </member>
    <member name="E:mx.messaging.MessageAgent.propertyChange">
      <summary>Dispatched when the <code>connected</code> property of the MessageAgent changes.</summary>
    </member>
    <member name="E:mx.messaging.MessageAgent.channelFault">
      <summary>Dispatched when the underlying Channel the MessageAgent is using faults.</summary>
    </member>
    <member name="E:mx.messaging.MessageAgent.channelDisconnect">
      <summary>Dispatched when the underlying Channel the MessageAgent is using disconnects.</summary>
    </member>
    <member name="E:mx.messaging.MessageAgent.channelConnect">
      <summary>Dispatched when the underlying Channel the MessageAgent is using connects.</summary>
    </member>
    <member name="E:mx.messaging.MessageAgent.fault">
      <summary>Dispatched when a message fault occurs.</summary>
    </member>
    <member name="E:mx.messaging.MessageAgent.acknowledge">
      <summary>Dispatched when an acknowledge message is received for a sent message.</summary>
    </member>
    <member name="M:mx.messaging.MessageAgent.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.messaging.MessageAgent.acknowledge(mx.messaging.messages.AcknowledgeMessage,mx.messaging.messages.IMessage)">
      <summary>Invoked by a MessageResponder upon receiving a result for a sent message.</summary>
      <param name="ackMsg">The AcknowledgMessage returned.</param>
      <param name="msg">The original sent message.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.assertCredentials(Avm.String)">
      <param name="value" />
    </member>
    <member name="M:mx.messaging.MessageAgent.channelConnectHandler(mx.messaging.events.ChannelEvent)">
      <summary>Handles a CONNECT ChannelEvent.</summary>
      <param name="event">The ChannelEvent.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.channelDisconnectHandler(mx.messaging.events.ChannelEvent)">
      <summary>Handles a DISCONNECT ChannelEvent.</summary>
      <param name="event">The ChannelEvent.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.channelFaultHandler(mx.messaging.events.ChannelFaultEvent)">
      <summary>Handles a ChannelFaultEvent.</summary>
      <param name="event">ChannelFaultEvent</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.disconnect">
      <summary>Disconnects the MessageAgent's network connection.</summary>
    </member>
    <member name="M:mx.messaging.MessageAgent.fault(mx.messaging.messages.ErrorMessage,mx.messaging.messages.IMessage)">
      <summary>Invoked by a MessageResponder upon receiving a fault for a sent message.</summary>
      <param name="errMsg">The ErrorMessage.</param>
      <param name="msg">The original sent message that caused this fault.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.hasPendingRequestForMessage(mx.messaging.messages.IMessage)">
      <summary>Returns true if there are any pending requests for the passed in message.</summary>
      <param name="msg">The message for which the existence of pending requests is checked.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.initChannelSet(mx.messaging.messages.IMessage)">
      <summary>Used to automatically initialize the <code>channelSet</code> property for the MessageAgent before it connects for the first time.</summary>
      <param name="message">The message that needs to be sent.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.initialized(System.Object,Avm.String)">
      <summary>Called after the implementing object has been created and all properties specified on the tag have been assigned.</summary>
      <param name="document">MXML document that created this object.</param>
      <param name="id">id used by the document to refer to this object. If the object is a deep property on the document, id is null.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.internalSend(mx.messaging.messages.IMessage,System.Boolean)">
      <summary>Sends a Message from the MessageAgent to its destination using the agent's ChannelSet.</summary>
      <param name="message">The message to send.</param>
      <param name="waitForClientId">If true the message may be queued until a clientId has been assigned to the agent. In general this is the desired behavior. For special behavior (automatic reconnect and resubscribe) the agent may pass false to override the default queuing behavior.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.logout">
      <summary>Logs the MessageAgent out from its remote destination.</summary>
    </member>
    <member name="M:mx.messaging.MessageAgent.reAuthorize(mx.messaging.messages.IMessage)">
      <summary>This function should be overriden by sublasses to implement re-authorization due to server session time-out behavior specific to them.</summary>
      <param name="msg">The message that caused the fault and should be resent once we have disconnected/connected causing re-authentication.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.setCredentials(Avm.String,Avm.String,Avm.String)">
      <summary>Sets the credentials that the MessageAgent uses to authenticate to destinations.</summary>
      <param name="username">The username.</param>
      <param name="password">The password.</param>
      <param name="charset">The character set encoding to use while encoding the credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.</param>
    </member>
    <member name="M:mx.messaging.MessageAgent.setRemoteCredentials(Avm.String,Avm.String,Avm.String)">
      <summary>Sets the remote credentials that will be passed through to the remote destination for authenticating to secondary systems.</summary>
      <param name="username">The username.</param>
      <param name="password">The password.</param>
      <param name="charset">The character set encoding to use while encoding the remote credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other currently supported option is &quot;UTF-8&quot;.</param>
    </member>
    <member name="F:mx.messaging.MessageAgent._agentType">
      <summary>The type of MessageAgent.</summary>
    </member>
    <member name="F:mx.messaging.MessageAgent._credentials">
      <summary>The Base64 encoded credentials that will be passed through to the ChannelSet.</summary>
    </member>
    <member name="F:mx.messaging.MessageAgent._credentialsCharset">
      <summary>The character set encoding used to create the credentials String.</summary>
    </member>
    <member name="F:mx.messaging.MessageAgent._disconnectBarrier">
      <summary>Indicates whether the agent is explicitly disconnected.</summary>
    </member>
    <member name="F:mx.messaging.MessageAgent._ignoreFault">
      <summary>Flag being set to true denotes that we should skip remaining fault processing logic because the fault has already been handled.</summary>
    </member>
    <member name="F:mx.messaging.MessageAgent._log">
      <summary>The logger MUST be assigned by subclasses, for example Consumer and Producer.</summary>
    </member>
    <member name="P:mx.messaging.MessageAgent.authenticated">
      <summary>Indicates if this MessageAgent is using an authenticated connection to its destination.</summary>
    </member>
    <member name="P:mx.messaging.MessageAgent.channelSet">
      <summary>Provides access to the ChannelSet used by the MessageAgent.</summary>
    </member>
    <member name="P:mx.messaging.MessageAgent.clientId">
      <summary>Provides access to the client id for the MessageAgent.</summary>
    </member>
    <member name="P:mx.messaging.MessageAgent.connected">
      <summary>Indicates whether this MessageAgent is currently connected to its destination via its ChannelSet.</summary>
    </member>
    <member name="P:mx.messaging.MessageAgent.destination">
      <summary>Provides access to the destination for the MessageAgent.</summary>
    </member>
    <member name="P:mx.messaging.MessageAgent.requestTimeout">
      <summary>Provides access to the request timeout in seconds for sent messages.</summary>
    </member>
    <member name="T:mx.messaging.MessageResponder">
      <summary>The MessageResponder class handles a successful result or fault from a message destination.</summary>
    </member>
    <member name="M:mx.messaging.MessageResponder.#ctor(mx.messaging.MessageAgent,mx.messaging.messages.IMessage,mx.messaging.Channel)">
      <summary>Constructs a MessageResponder to handle the response for the specified Message for the specified MessageAgent.</summary>
      <param name="agent">agent The MessageAgent sending the Message.</param>
      <param name="message">message The Message being sent.</param>
      <param name="channel">The Channel used to send.</param>
    </member>
    <member name="M:mx.messaging.MessageResponder.createRequestTimeoutErrorMessage">
      <summary>Constructs an ErrorMessage that can be passed to the associated MessageAgent's callbacks upon a request timeout.</summary>
    </member>
    <member name="M:mx.messaging.MessageResponder.requestTimedOut">
      <summary>Subclasses must override this method to handle a request timeout and invoke the proper callbacks on the associated MessageAgent.</summary>
    </member>
    <member name="M:mx.messaging.MessageResponder.result(mx.messaging.messages.IMessage)">
      <summary>Called by the channel that created this MessageResponder when a response returns from the destination.</summary>
      <param name="message">The result Message returned by the destination.</param>
    </member>
    <member name="M:mx.messaging.MessageResponder.resultHandler(mx.messaging.messages.IMessage)">
      <summary>Subclasses must override this method to perform custom processing of the result and invoke the proper callbacks on the associated MessageAgent.</summary>
      <param name="message">The result Message returned by the destination.</param>
    </member>
    <member name="M:mx.messaging.MessageResponder.status(mx.messaging.messages.IMessage)">
      <summary>Called by the channel that created this MessageResponder when a fault response returns from the destination.</summary>
      <param name="message">The fault Message returned by the destination.</param>
    </member>
    <member name="M:mx.messaging.MessageResponder.statusHandler(mx.messaging.messages.IMessage)">
      <summary>Subclasses must override this method to perform custom processing of the status and invoke the proper callbacks on the associated MessageAgent.</summary>
      <param name="message">The fault Message returned by the destination.</param>
    </member>
    <member name="P:mx.messaging.MessageResponder.agent">
      <summary>Provides access to the MessageAgent that sent the message.</summary>
    </member>
    <member name="P:mx.messaging.MessageResponder.channel">
      <summary>Provides access to the Channel used to send the message.</summary>
    </member>
    <member name="P:mx.messaging.MessageResponder.message">
      <summary>Provides access to the sent Message.</summary>
    </member>
    <member name="N:mx.messaging.messages" />
    <member name="T:mx.messaging.messages.AbstractMessage">
      <summary>Abstract base class for all messages.</summary>
    </member>
    <member name="M:mx.messaging.messages.AbstractMessage.#ctor">
      <summary>Constructs an instance of an AbstractMessage with an empty body and header.</summary>
    </member>
    <member name="M:mx.messaging.messages.AbstractMessage.toString">
      <summary>Returns a string representation of the message.</summary>
    </member>
    <member name="F:mx.messaging.messages.AbstractMessage.DESTINATION_CLIENT_ID_HEADER">
      <summary>Messages pushed from the server may arrive in a batch, with messages in the batch potentially targeted to different Consumer instances.</summary>
    </member>
    <member name="F:mx.messaging.messages.AbstractMessage.ENDPOINT_HEADER">
      <summary>Messages are tagged with the endpoint id for the Channel they are sent over.</summary>
    </member>
    <member name="F:mx.messaging.messages.AbstractMessage.FLEX_CLIENT_ID_HEADER">
      <summary>This header is used to transport the global FlexClient Id value in outbound messages once it has been assigned by the server.</summary>
    </member>
    <member name="F:mx.messaging.messages.AbstractMessage.REMOTE_CREDENTIALS_CHARSET_HEADER">
      <summary>Messages that need to set remote credentials for a destination may also need to report the character-set encoding that was used to create the credentials String using this header.</summary>
    </member>
    <member name="F:mx.messaging.messages.AbstractMessage.REMOTE_CREDENTIALS_HEADER">
      <summary>Messages that need to set remote credentials for a destination carry the Base64 encoded credentials in this header.</summary>
    </member>
    <member name="F:mx.messaging.messages.AbstractMessage.REQUEST_TIMEOUT_HEADER">
      <summary>Messages sent with a defined request timeout use this header.</summary>
    </member>
    <member name="P:mx.messaging.messages.AbstractMessage.body">
      <summary>The body of a message contains the specific data that needs to be delivered to the remote destination.</summary>
    </member>
    <member name="P:mx.messaging.messages.AbstractMessage.clientId">
      <summary>The clientId indicates which MessageAgent sent the message.</summary>
    </member>
    <member name="P:mx.messaging.messages.AbstractMessage.destination">
      <summary>The message destination.</summary>
    </member>
    <member name="P:mx.messaging.messages.AbstractMessage.headers">
      <summary>The headers of a message are an associative array where the key is the header name and the value is the header value.</summary>
    </member>
    <member name="P:mx.messaging.messages.AbstractMessage.messageId">
      <summary>The unique id for the message.</summary>
    </member>
    <member name="P:mx.messaging.messages.AbstractMessage.timeToLive">
      <summary>The time to live value of a message indicates how long the message should be considered valid and deliverable.</summary>
    </member>
    <member name="P:mx.messaging.messages.AbstractMessage.timestamp">
      <summary>Provides access to the time stamp for the message.</summary>
    </member>
    <member name="T:mx.messaging.messages.AcknowledgeMessage">
      <summary>An AcknowledgeMessage acknowledges the receipt of a message that was sent previously.</summary>
    </member>
    <member name="M:mx.messaging.messages.AcknowledgeMessage.#ctor">
      <summary>Constructs an instance of an AcknowledgeMessage with an empty body and header.</summary>
    </member>
    <member name="F:mx.messaging.messages.AcknowledgeMessage.ERROR_HINT_HEADER">
      <summary>Header name for the error hint header.</summary>
    </member>
    <member name="T:mx.messaging.messages.AsyncMessage">
      <summary>AsyncMessage is the base class for all asynchronous messages.</summary>
    </member>
    <member name="M:mx.messaging.messages.AsyncMessage.#ctor(System.Object,System.Object)">
      <summary>Constructs an instance of an AsyncMessage with an empty body and header.</summary>
      <param name="body">The optional body to assign to the message.</param>
      <param name="headers">The optional headers to assign to the message.</param>
    </member>
    <member name="F:mx.messaging.messages.AsyncMessage.SUBTOPIC_HEADER">
      <summary>Messages sent by a MessageAgent with a defined <code>subtopic</code> property indicate their target subtopic in this header.</summary>
    </member>
    <member name="P:mx.messaging.messages.AsyncMessage.correlationId">
      <summary>Provides access to the correlation id of the message.</summary>
    </member>
    <member name="T:mx.messaging.messages.CommandMessage">
      <summary>The CommandMessage class provides a mechanism for sending commands to the server infrastructure, such as commands related to publish/subscribe messaging scenarios, ping operations, and cluster operations.</summary>
    </member>
    <member name="M:mx.messaging.messages.CommandMessage.#ctor">
      <summary>Constructs an instance of a CommandMessage with an empty body and header and a default <code>operation</code> of <code>UNKNOWN_OPERATION</code>.</summary>
    </member>
    <member name="M:mx.messaging.messages.CommandMessage.getOperationAsString(System.UInt32)">
      <summary>Provides a description of the operation specified.</summary>
      <param name="op">One of the CommandMessage operation constants.</param>
    </member>
    <member name="M:mx.messaging.messages.CommandMessage.toString">
      <summary>Returns a string representation of the message.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.ADD_SUBSCRIPTIONS">
      <summary>Header used in a MULTI_SUBSCRIBE message to specify an Array of subtopic/selector pairs to add to the existing set of subscriptions.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.AUTHENTICATION_MESSAGE_REF_TYPE">
      <summary>The server message type for authentication commands.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.CLIENT_PING_OPERATION">
      <summary>This operation is used to test connectivity over the current channel to the remote endpoint.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.CLIENT_SYNC_OPERATION">
      <summary>This operation is used by a remote destination to sync missed or cached messages back to a client as a result of a client issued poll command.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.CLUSTER_REQUEST_OPERATION">
      <summary>This operation is used to request a list of failover endpoint URIs for the remote destination based on cluster membership.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.CREDENTIALS_CHARSET_HEADER">
      <summary>Header to specify which character set encoding was used while encoding login credentials.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.DISCONNECT_OPERATION">
      <summary>This operation is used to indicate that a channel has disconnected.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.LOGIN_OPERATION">
      <summary>This operation is used to send credentials to the endpoint so that the user can be logged in over the current channel.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.LOGOUT_OPERATION">
      <summary>This operation is used to log the user out of the current channel, and will invalidate the server session if the channel is HTTP based.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.MESSAGING_VERSION">
      <summary>Endpoints can imply what features they support by reporting the latest version of messaging they are capable of during the handshake of the initial ping CommandMessage.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.MULTI_SUBSCRIBE_OPERATION">
      <summary>Used by the MultiTopicConsumer to subscribe/unsubscribe for more than one topic in the same message.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.NEEDS_CONFIG_HEADER">
      <summary>Header to indicate that the Channel needs the configuration from the server.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.NO_OP_POLL_HEADER">
      <summary>Header to suppress poll response processing.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.POLL_OPERATION">
      <summary>This operation is used to poll a remote destination for pending, undelivered messages.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.POLL_WAIT_HEADER">
      <summary>Header to drive an idle wait time before the next client poll request.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.PRESERVE_DURABLE_HEADER">
      <summary>Durable JMS subscriptions are preserved when an unsubscribe message has this parameter set to true in its header.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.REMOVE_SUBSCRIPTIONS">
      <summary>Like the above, but specifies the subtopic/selector array of to remove</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.SELECTOR_HEADER">
      <summary>Subscribe commands issued by a Consumer pass the Consumer's <code>selector</code> expression in this header.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.SUBSCRIBE_OPERATION">
      <summary>This operation is used to subscribe to a remote destination.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.SUBSCRIPTION_INVALIDATE_OPERATION">
      <summary>This operation is used to indicate that the client's subscription with a remote destination has timed out.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.SUBTOPIC_SEPARATOR">
      <summary>The separator string used for separating subtopic and selectors in the add and remove subscription headers.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.UNKNOWN_OPERATION">
      <summary>This is the default operation for new CommandMessage instances.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.UNSUBSCRIBE_OPERATION">
      <summary>This operation is used to unsubscribe from a remote destination.</summary>
    </member>
    <member name="F:mx.messaging.messages.CommandMessage.operation">
      <summary>Provides access to the operation/command for the CommandMessage.</summary>
    </member>
    <member name="T:mx.messaging.messages.ErrorMessage">
      <summary>The ErrorMessage class is used to report errors within the messaging system.</summary>
    </member>
    <member name="M:mx.messaging.messages.ErrorMessage.#ctor">
      <summary>Constructs an ErrorMessage instance.</summary>
    </member>
    <member name="F:mx.messaging.messages.ErrorMessage.MESSAGE_DELIVERY_IN_DOUBT">
      <summary>If a message may not have been delivered, the <code>faultCode</code> will contain this constant.</summary>
    </member>
    <member name="F:mx.messaging.messages.ErrorMessage.RETRYABLE_HINT_HEADER">
      <summary>Header name for the retryable hint header.</summary>
    </member>
    <member name="F:mx.messaging.messages.ErrorMessage.extendedData">
      <summary>Extended data that the remote destination has chosen to associate with this error to facilitate custom error processing on the client.</summary>
    </member>
    <member name="F:mx.messaging.messages.ErrorMessage.faultCode">
      <summary>The fault code for the error.</summary>
    </member>
    <member name="F:mx.messaging.messages.ErrorMessage.faultDetail">
      <summary>Detailed description of what caused the error.</summary>
    </member>
    <member name="F:mx.messaging.messages.ErrorMessage.faultString">
      <summary>A simple description of the error.</summary>
    </member>
    <member name="F:mx.messaging.messages.ErrorMessage.rootCause">
      <summary>Should a root cause exist for the error, this property contains those details.</summary>
    </member>
    <member name="T:mx.messaging.messages.HTTPRequestMessage">
      <summary>HTTP requests are sent to the HTTP endpoint using this message type.</summary>
    </member>
    <member name="M:mx.messaging.messages.HTTPRequestMessage.#ctor">
      <summary>Constructs an uninitialized HTTP request.</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.CONTENT_TYPE_FORM">
      <summary>Indicates that the content of this message is a form.</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.CONTENT_TYPE_SOAP_XML">
      <summary>Indicates that the content of this message is XML meant for a SOAP request.</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.CONTENT_TYPE_XML">
      <summary>Indicates that the content of this message is XML.</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.DELETE_METHOD">
      <summary>Indicates that the method used for this request should be "delete".</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.GET_METHOD">
      <summary>Indicates that the method used for this request should be "get".</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.HEAD_METHOD">
      <summary>Indicates that the method used for this request should be "head".</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.OPTIONS_METHOD">
      <summary>Indicates that the method used for this request should be "options".</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.POST_METHOD">
      <summary>Indicates that the method used for this request should be "post".</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.PUT_METHOD">
      <summary>Indicates that the method used for this request should be "put".</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.TRACE_METHOD">
      <summary>Indicates that the method used for this request should be "trace".</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.contentType">
      <summary>Indicates the content type of this message.</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.httpHeaders">
      <summary>Contains specific HTTP headers that should be placed on the request made to the destination.</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.recordHeaders">
      <summary>Only used when going through the proxy, should the proxy send back the request and response headers it used.</summary>
    </member>
    <member name="F:mx.messaging.messages.HTTPRequestMessage.url">
      <summary>Contains the final destination for this request.</summary>
    </member>
    <member name="P:mx.messaging.messages.HTTPRequestMessage.method">
      <summary>Indicates what method should be used for the request.</summary>
    </member>
    <member name="T:mx.messaging.messages.IMessage">
      <summary>This interface defines the contract for message objects.</summary>
    </member>
    <member name="M:mx.messaging.messages.IMessage.toString">
      <summary>This method will return a string representation of the message.</summary>
    </member>
    <member name="P:mx.messaging.messages.IMessage.body">
      <summary>The body of a message contains the specific data that needs to be delivered to the remote destination.</summary>
    </member>
    <member name="P:mx.messaging.messages.IMessage.clientId">
      <summary>The clientId indicates which client sent the message.</summary>
    </member>
    <member name="P:mx.messaging.messages.IMessage.destination">
      <summary>The message destination.</summary>
    </member>
    <member name="P:mx.messaging.messages.IMessage.headers">
      <summary>Provides access to the headers of the message.</summary>
    </member>
    <member name="P:mx.messaging.messages.IMessage.messageId">
      <summary>The unique id for the message.</summary>
    </member>
    <member name="P:mx.messaging.messages.IMessage.timeToLive">
      <summary>The time to live value of a message indicates how long the message should be considered valid and deliverable.</summary>
    </member>
    <member name="P:mx.messaging.messages.IMessage.timestamp">
      <summary>Provides access to the time stamp for the message.</summary>
    </member>
    <member name="T:mx.messaging.messages.MessagePerformanceUtils">
      <summary>The MessagePerformanceUtils utility class is used to retrieve various metrics about the sizing and timing of a message sent from a client to the server and its response message, as well as pushed messages from the server to the client.</summary>
    </member>
    <member name="M:mx.messaging.messages.MessagePerformanceUtils.#ctor(System.Object)">
      <summary>Constructor Creates an MPUtils instance with information from the MPI headers of the passed in message</summary>
      <param name="message">The message whose MPI headers will be used in retrieving MPI information</param>
    </member>
    <member name="M:mx.messaging.messages.MessagePerformanceUtils.prettyPrint">
      <summary>Method returns a summary of all information available in MPI.</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.clientReceiveTime">
      <summary>Timestamp in milliseconds since epoch of when the client received response message from the server</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.messageSize">
      <summary>The size of the original client message as measured during deserialization by the server endpoint</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.networkRTT">
      <summary>The network round trip time for a client message and the server response to it, calculated by the difference between total time and server processing time</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.originatingMessageSentTime">
      <summary>Only populated in the case of a pushed message, timestamp in milliseconds since epoch of when the client that caused a push message sent its message.</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.originatingMessageSize">
      <summary>Only populated in the case of a pushed message, size in Bytes of the message that originally caused this pushed message</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.pushOneWayTime">
      <summary>Only populated in the case of a pushed message, this is the network time between the server pushing the message and the client receiving it.</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.pushedMessageFlag">
      <summary>Returns true if message was pushed to the client and is not a response to a message that originated on the client</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.responseMessageSize">
      <summary>The size of the response message sent to the client by the server as measured during serialization at the server endpoint</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.serverAdapterExternalTime">
      <summary>Time spent in a module invoked from the adapter associated with the destination for this message but external to it, before either the response to the message was ready or the message had been prepared to be pushed to the receiving client.</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.serverAdapterTime">
      <summary>Time spent in the adapter associated with the destination for this message before either the response to the message was ready or the message had been prepared to be pushed to the receiving client.</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.serverNonAdapterTime">
      <summary>Server processing time spent outside of the adapter associated with the destination of this message</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.serverPollDelay">
      <summary />
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.serverPrePushTime">
      <summary>Time between server receiving the client message and the server beginning to push messages out to other clients as a result of the original message.</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.serverProcessingTime">
      <summary>Time between server receiving the client message and either the time the server responded to the received message or had the pushed message ready to be sent to the receiving client.</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.serverSendTime">
      <summary>Timestamp in milliseconds since epoch of when the server sent a response message back to the client</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.totalPushTime">
      <summary>Only populated in the case of a pushed message, this is the time between the push causing client sending its message and the push receving client receiving it.</summary>
    </member>
    <member name="P:mx.messaging.messages.MessagePerformanceUtils.totalTime">
      <summary>Time between this client sending a message and receiving a response for it from the server</summary>
    </member>
    <member name="T:mx.messaging.messages.RemotingMessage">
      <summary>RemotingMessages are used to send RPC requests to a remote endpoint.</summary>
    </member>
    <member name="M:mx.messaging.messages.RemotingMessage.#ctor">
      <summary>Constructs an uninitialized RemotingMessage.</summary>
    </member>
    <member name="F:mx.messaging.messages.RemotingMessage.operation">
      <summary>Provides access to the name of the remote method/operation that should be called.</summary>
    </member>
    <member name="F:mx.messaging.messages.RemotingMessage.source">
      <summary>This property is provided for backwards compatibility.</summary>
    </member>
    <member name="T:mx.messaging.messages.SOAPMessage">
      <summary>SOAPMessages are similar to HTTPRequestMessages.</summary>
    </member>
    <member name="M:mx.messaging.messages.SOAPMessage.#ctor">
      <summary>Constructs an uninitialized SOAPMessage.</summary>
    </member>
    <member name="M:mx.messaging.messages.SOAPMessage.getSOAPAction">
      <summary>Provides access to the name of the remote method/operation that will be called.</summary>
    </member>
    <member name="F:mx.messaging.messages.SOAPMessage.SOAP_ACTION_HEADER">
      <summary>The HTTP header that stores the SOAP action for the SOAPMessage.</summary>
    </member>
    <member name="T:mx.messaging.MultiTopicConsumer">
      <summary>Like a Consumer, a MultiTopicConsumer subscribes to a destination with a single clientId and delivers messages to a single event handler.</summary>
    </member>
    <member name="E:mx.messaging.MultiTopicConsumer.message">
      <summary>Dispatched when a message is received by the Consumer.</summary>
    </member>
    <member name="M:mx.messaging.MultiTopicConsumer.#ctor">
      <summary>Constructs a MultiTopicConsumer.</summary>
    </member>
    <member name="M:mx.messaging.MultiTopicConsumer.addSubscription(Avm.String,Avm.String)">
      <summary>This is a convenience method for adding a new subscription.</summary>
      <param name="subtopic" />
      <param name="selector" />
    </member>
    <member name="M:mx.messaging.MultiTopicConsumer.buildSubscribeMessage" />
    <member name="M:mx.messaging.MultiTopicConsumer.buildUnsubscribeMessage(System.Boolean)">
      <param name="preserveDurable" />
    </member>
    <member name="M:mx.messaging.MultiTopicConsumer.internalSend(mx.messaging.messages.IMessage,System.Boolean)">
      <param name="message" />
      <param name="waitForClientId" />
    </member>
    <member name="M:mx.messaging.MultiTopicConsumer.removeSubscription(Avm.String,Avm.String)">
      <summary>This method removes the subscription specified by the subtopic and selector.</summary>
      <param name="subtopic" />
      <param name="selector" />
    </member>
    <member name="M:mx.messaging.MultiTopicConsumer.setSubscribed(System.Boolean)">
      <param name="value" />
    </member>
    <member name="P:mx.messaging.MultiTopicConsumer.subscriptions">
      <summary>Stores an Array of SubscriptionInfo objects.</summary>
    </member>
    <member name="T:mx.messaging.MultiTopicProducer">
      <summary>A MultiTopicProducer sends messages to a destination with zero or more subtopics.</summary>
    </member>
    <member name="M:mx.messaging.MultiTopicProducer.#ctor">
      <summary>Constructs a Producer.</summary>
    </member>
    <member name="M:mx.messaging.MultiTopicProducer.addSubtopic(Avm.String)">
      <summary>Adds a subtopic to the current list of subtopics for messages sent by this producer.</summary>
      <param name="subtopic" />
    </member>
    <member name="M:mx.messaging.MultiTopicProducer.internalSend(mx.messaging.messages.IMessage,System.Boolean)">
      <param name="message" />
      <param name="waitForClientId" />
    </member>
    <member name="M:mx.messaging.MultiTopicProducer.removeSubtopic(Avm.String)">
      <summary>Removes the subtopic from the subtopics property.</summary>
      <param name="subtopic" />
    </member>
    <member name="P:mx.messaging.MultiTopicProducer.subtopics">
      <summary>Provides access to the list of subtopics used in publishing any messages</summary>
    </member>
    <member name="T:mx.messaging.Producer">
      <summary>A Producer sends messages to a destination.</summary>
    </member>
    <member name="M:mx.messaging.Producer.#ctor">
      <summary>Constructs a Producer.</summary>
    </member>
    <member name="M:mx.messaging.Producer.internalSend(mx.messaging.messages.IMessage,System.Boolean)">
      <param name="message" />
      <param name="waitForClientId" />
    </member>
    <member name="P:mx.messaging.Producer.subtopic">
      <summary>Provides access to the subtopic for the remote destination that the MessageAgent uses.</summary>
    </member>
    <member name="T:mx.messaging.SubscriptionInfo">
      <summary>This is the class used for elements of the ArrayCollection subscriptions property in the MultiTopicConsumer property.</summary>
    </member>
    <member name="M:mx.messaging.SubscriptionInfo.#ctor(Avm.String,Avm.String)">
      <summary>Builds a new SubscriptionInfo with the specified subtopic and selector</summary>
      <param name="st" />
      <param name="sel" />
    </member>
    <member name="F:mx.messaging.SubscriptionInfo.selector">
      <summary>The selector.</summary>
    </member>
    <member name="F:mx.messaging.SubscriptionInfo.subtopic">
      <summary>The subtopic - if null, represents a subscription for messages directed to the destination with no subtopic.</summary>
    </member>
    <member name="N:mx.rpc" />
    <member name="T:mx.rpc.AbstractInvoker">
      <summary>An invoker is an object that actually executes a remote procedure call (RPC).</summary>
    </member>
    <member name="M:mx.rpc.AbstractInvoker.cancel(Avm.String)">
      <summary>Cancels the last service invocation or an invokation with the specified id.</summary>
      <param name="id">The messageId of the invocation to cancel. Optional. If omitted, the last service invocation is canceled.</param>
    </member>
    <member name="M:mx.rpc.AbstractInvoker.clearResult(System.Boolean)">
      <summary>Sets the <code>result</code> property of the invoker to <code>null</code>.</summary>
      <param name="fireBindingEvent">fireBindingEvent Set to <code>true</code> if you want anything bound to the result to update. Otherwise, set to <code>false</code>. The default value is <code>true</code></param>
    </member>
    <member name="P:mx.rpc.AbstractInvoker.lastResult">
      <summary>The result of the last invocation.</summary>
    </member>
    <member name="P:mx.rpc.AbstractInvoker.makeObjectsBindable">
      <summary>When this value is true, anonymous objects returned are forced to bindable objects.</summary>
    </member>
    <member name="T:mx.rpc.AbstractOperation">
      <summary>The AbstractOperation class represents an individual method on a service.</summary>
    </member>
    <member name="E:mx.rpc.AbstractOperation.fault">
      <summary>Dispatched when an Operation call fails.</summary>
    </member>
    <member name="E:mx.rpc.AbstractOperation.result">
      <summary>Dispatched when an Operation invocation successfully returns.</summary>
    </member>
    <member name="M:mx.rpc.AbstractOperation.#ctor(mx.rpc.AbstractService,Avm.String)">
      <summary>Creates a new Operation.</summary>
      <param name="service" />
      <param name="name" />
    </member>
    <member name="M:mx.rpc.AbstractOperation.send(System.Object)">
      <summary>Executes the method.</summary>
      <param name="args" />
    </member>
    <member name="F:mx.rpc.AbstractOperation.arguments">
      <summary>The arguments to pass to the Operation when it is invoked.</summary>
    </member>
    <member name="P:mx.rpc.AbstractOperation.name">
      <summary>The name of this Operation.</summary>
    </member>
    <member name="P:mx.rpc.AbstractOperation.service">
      <summary>Provides convenient access to the service on which the Operation is being invoked.</summary>
    </member>
    <member name="T:mx.rpc.AbstractService">
      <summary>The AbstractService class is the base class for the WebService and RemoteObject classes.</summary>
    </member>
    <member name="E:mx.rpc.AbstractService.fault">
      <summary>The fault event is dispatched when a service call fails and isn't handled by the Operation itself.</summary>
    </member>
    <member name="E:mx.rpc.AbstractService.result">
      <summary>The result event is dispatched when a service call successfully returns and isn't handled by the Operation itself.</summary>
    </member>
    <member name="E:mx.rpc.AbstractService.invoke">
      <summary>The invoke event is dispatched when a service Operation is invoked so long as an Error is not thrown before the Channel attempts to send the message.</summary>
    </member>
    <member name="M:mx.rpc.AbstractService.#ctor(Avm.String)">
      <param name="destination" />
    </member>
    <member name="M:mx.rpc.AbstractService.disconnect">
      <summary>Disconnects the service's network connection and removes any pending request responders.</summary>
    </member>
    <member name="M:mx.rpc.AbstractService.getOperation(Avm.String)">
      <summary>Returns an Operation of the given name.</summary>
      <param name="name">Name of the Operation.</param>
    </member>
    <member name="M:mx.rpc.AbstractService.logout">
      <summary>Logs the user out of the destination.</summary>
    </member>
    <member name="M:mx.rpc.AbstractService.setCredentials(Avm.String,Avm.String,Avm.String)">
      <summary>Sets the credentials for the destination accessed by the service when using Data Services on the server side.</summary>
      <param name="username">The username for the destination.</param>
      <param name="password">The password for the destination.</param>
      <param name="charset">The character set encoding to use while encoding the credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.</param>
    </member>
    <member name="M:mx.rpc.AbstractService.setRemoteCredentials(Avm.String,Avm.String,Avm.String)">
      <summary>The username and password to be used to authenticate a user when accessing a remote, third-party endpoint such as a web service through a proxy or a remote object through a custom adapter when using Data Services on the server side.</summary>
      <param name="remoteUsername">the username to pass to the remote endpoint</param>
      <param name="remotePassword">the password to pass to the remote endpoint</param>
      <param name="charset">The character set encoding to use while encoding the remote credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.</param>
    </member>
    <member name="P:mx.rpc.AbstractService.channelSet">
      <summary>Provides access to the ChannelSet used by the service.</summary>
    </member>
    <member name="P:mx.rpc.AbstractService.destination">
      <summary>The destination of the service.</summary>
    </member>
    <member name="P:mx.rpc.AbstractService.requestTimeout">
      <summary>Provides access to the request timeout in seconds for sent messages.</summary>
    </member>
    <member name="P:mx.rpc.AbstractService.operations">
      <summary>The Operations array is usually only set by the MXML compiler if you create a service using an MXML tag.</summary>
    </member>
    <member name="T:mx.rpc.AsyncRequest">
      <summary>The AsyncRequest class provides an abstraction of messaging for RPC call invocation.</summary>
    </member>
    <member name="M:mx.rpc.AsyncRequest.#ctor">
      <summary>Constructs a new asynchronous request.</summary>
    </member>
    <member name="M:mx.rpc.AsyncRequest.hasPendingRequestForMessage(mx.messaging.messages.IMessage)">
      <summary>Returns true if there are any pending requests for the passed in message.</summary>
      <param name="msg">The message for which the existence of pending requests is checked.</param>
    </member>
    <member name="M:mx.rpc.AsyncRequest.invoke(mx.messaging.messages.IMessage,mx.rpc.IResponder)">
      <summary>Dispatches the asynchronous request and stores the responder to call later.</summary>
      <param name="msg" />
      <param name="responder" />
    </member>
    <member name="T:mx.rpc.AsyncResponder">
      <summary>This class provides an RPC specific implementation of <code>mx.rpc.IResponder</code>.</summary>
    </member>
    <member name="M:mx.rpc.AsyncResponder.#ctor(Avm.Function,Avm.Function,System.Object)">
      <summary>Constructs an instance of the responder with the specified data and handlers.</summary>
      <param name="result">result Function that should be called when the request has completed successfully. Must have the following signature: <code><pre> public function (result:Object, token:Object = null):void; </pre></code></param>
      <param name="fault">fault Function that should be called when the request has completed with errors. Must have the following signature: <code><pre> public function (error:ErrorMessage, token:Object = null):void; </pre></code></param>
      <param name="token">token Object [optional] additional information to associate with this request.</param>
    </member>
    <member name="M:mx.rpc.AsyncResponder.fault(System.Object)">
      <summary>This method is called by a service when an error has been received.</summary>
      <param name="info">info Object containing the information about the error that occured.</param>
    </member>
    <member name="M:mx.rpc.AsyncResponder.result(System.Object)">
      <summary>This method is called by a service when the return value has been received.</summary>
      <param name="data">data Object containing the information returned from the request.</param>
    </member>
    <member name="T:mx.rpc.AsyncToken">
      <summary>This class provides a place to set additional or token-level data for asynchronous RPC operations.</summary>
    </member>
    <member name="E:mx.rpc.AsyncToken.propertyChange">
      <summary>Dispatched when a property of the channel set changes.</summary>
    </member>
    <member name="M:mx.rpc.AsyncToken.#ctor(mx.messaging.messages.IMessage)">
      <summary>Constructs an instance of the token with the specified message.</summary>
      <param name="message" />
    </member>
    <member name="M:mx.rpc.AsyncToken.addResponder(mx.rpc.IResponder)">
      <summary><code>addResponder</code> adds a responder to an Array of responders.</summary>
      <param name="responder">A handler which will be called when the asynchronous request completes.</param>
    </member>
    <member name="M:mx.rpc.AsyncToken.hasResponder">
      <summary>Determines if this token has at least one <code>mx.rpc.IResponder</code> registered.</summary>
    </member>
    <member name="P:mx.rpc.AsyncToken.message">
      <summary>Provides access to the associated message.</summary>
    </member>
    <member name="P:mx.rpc.AsyncToken.responders">
      <summary>An array of IResponder handlers that will be called when the asynchronous request completes.</summary>
    </member>
    <member name="P:mx.rpc.AsyncToken.result">
      <summary>The result that was returned by the associated RPC call.</summary>
    </member>
    <member name="N:mx.rpc.events" />
    <member name="T:mx.rpc.events.AbstractEvent">
      <summary>The base class for events that RPC services dispatch.</summary>
    </member>
    <member name="P:mx.rpc.events.AbstractEvent.token">
      <summary>The token that represents the call to the method.</summary>
    </member>
    <member name="T:mx.rpc.events.FaultEvent">
      <summary>This event is dispatched when an RPC call has a fault.</summary>
    </member>
    <member name="E:mx.rpc.events.FaultEvent.fault">
      <summary>The FAULT event type. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true, calling preventDefault() from the associated token's responder.fault method will prevent the service or operation from dispatching this event</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>fault</code></td><td>The Fault object that contains the details of what caused this event.</td></tr> <tr><td><code>message</code></td><td>The Message associated with this event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>token</code></td><td>The token that represents the call to the method. Used in the asynchronous completion token pattern.</td></tr> </table></summary>
    </member>
    <member name="M:mx.rpc.events.FaultEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.rpc.Fault,mx.rpc.AsyncToken,mx.messaging.messages.IMessage)">
      <summary>Creates a new FaultEvent.</summary>
      <param name="type">The event type; indicates the action that triggered the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="fault">Object that holds details of the fault, including a faultCode and faultString.</param>
      <param name="token">Token representing the call to the method. Used in the asynchronous completion token pattern.</param>
      <param name="message">Source Message of the fault.</param>
    </member>
    <member name="M:mx.rpc.events.FaultEvent.createEvent(mx.rpc.Fault,mx.rpc.AsyncToken,mx.messaging.messages.IMessage)">
      <summary>Given a Fault, this method constructs and returns a FaultEvent.</summary>
      <param name="fault">Fault that contains the details of the FaultEvent.</param>
      <param name="token">AsyncToken [optional] associated with this fault.</param>
      <param name="msg">Message [optional] associated with this fault.</param>
    </member>
    <member name="M:mx.rpc.events.FaultEvent.createEventFromMessageFault(mx.messaging.events.MessageFaultEvent,mx.rpc.AsyncToken)">
      <summary>Given a MessageFaultEvent, this method constructs and returns a FaultEvent.</summary>
      <param name="value">MessageFaultEvent reference to extract the appropriate fault information from.</param>
      <param name="token">AsyncToken [optional] associated with this fault.</param>
    </member>
    <member name="M:mx.rpc.events.FaultEvent.toString">
      <summary>Returns a string representation of the FaultEvent.</summary>
    </member>
    <member name="F:mx.rpc.events.FaultEvent.FAULT">
      <summary>The FAULT event type.</summary>
    </member>
    <member name="P:mx.rpc.events.FaultEvent.fault">
      <summary>The Fault object that contains the details of what caused this event.</summary>
    </member>
    <member name="P:mx.rpc.events.FaultEvent.headers">
      <summary>In certain circumstances, headers may also be returned with a fault to provide further context to the failure.</summary>
    </member>
    <member name="T:mx.rpc.events.HeaderEvent">
      <summary>The event that indicates an RPC operation, such as a WebService SOAP request, returned a header in the response.</summary>
    </member>
    <member name="E:mx.rpc.events.HeaderEvent.header">
      <summary>The HEADER event type. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>token</code></td><td>The token that represents the call to the method. Used in the asynchronous completion token pattern.</td></tr> <tr><td><code>cancelable</code></td><td>true, but the preventDefault() method has no effect.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>header</code></td><td>Header that the RPC call returns in the response. </td></tr> <tr><td><code>message</code></td><td>The Message associated with this event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.rpc.events.HeaderEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Object,mx.rpc.AsyncToken,mx.messaging.messages.IMessage)">
      <summary>Creates a new HeaderEvent.</summary>
      <param name="type">Object that holds the header of the call.</param>
      <param name="bubbles">AsyncToken that represents the call to the method. Used in the asynchronous completion token pattern.</param>
      <param name="cancelable">Source Message of the header.</param>
      <param name="header" />
      <param name="token" />
      <param name="message" />
    </member>
    <member name="M:mx.rpc.events.HeaderEvent.createEvent(System.Object,mx.rpc.AsyncToken,mx.messaging.messages.IMessage)">
      <param name="header" />
      <param name="token" />
      <param name="message" />
    </member>
    <member name="M:mx.rpc.events.HeaderEvent.toString">
      <summary>Returns a string representation of the HeaderEvent.</summary>
    </member>
    <member name="F:mx.rpc.events.HeaderEvent.HEADER">
      <summary>The HEADER event type.</summary>
    </member>
    <member name="P:mx.rpc.events.HeaderEvent.header">
      <summary>Header that the RPC call returned in the response.</summary>
    </member>
    <member name="T:mx.rpc.events.InvokeEvent">
      <summary>The event that indicates an RPC operation has been invoked.</summary>
    </member>
    <member name="E:mx.rpc.events.InvokeEvent.invoke">
      <summary>The INVOKE event type. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>token</code></td><td> The token that represents the indiviudal call to the method. Used in the asynchronous completion token pattern.</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>message</code></td><td> The request Message associated with this event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.rpc.events.InvokeEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.rpc.AsyncToken,mx.messaging.messages.IMessage)">
      <summary>Create a new InvokeEvent.</summary>
      <param name="type">The event type; indicates the action that triggered the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="token">Token that represents the call to the method. Used in the asynchronous completion token pattern.</param>
      <param name="message">Source Message of the request.</param>
    </member>
    <member name="M:mx.rpc.events.InvokeEvent.toString">
      <summary>Returns a string representation of the InvokeEvent.</summary>
    </member>
    <member name="F:mx.rpc.events.InvokeEvent.INVOKE">
      <summary>The INVOKE event type.</summary>
    </member>
    <member name="T:mx.rpc.events.ResultEvent">
      <summary>The event that indicates an RPC operation has successfully returned a result.</summary>
    </member>
    <member name="E:mx.rpc.events.ResultEvent.result">
      <summary>The RESULT event type. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true, preventDefault() from the associated token's responder.result method will prevent the service or operation from dispatching this event</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>message</code></td><td> The Message associated with this event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>result</code></td><td>Result that the RPC call returns.</td></tr> <tr><td><code>token</code></td><td>The token that represents the indiviudal call to the method. Used in the asynchronous completion token pattern.</td></tr> </table></summary>
    </member>
    <member name="M:mx.rpc.events.ResultEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Object,mx.rpc.AsyncToken,mx.messaging.messages.IMessage)">
      <summary>Creates a new ResultEvent.</summary>
      <param name="type">The event type; indicates the action that triggered the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="result">Object that holds the actual result of the call.</param>
      <param name="token">Token that represents the call to the method. Used in the asynchronous completion token pattern.</param>
      <param name="message">Source Message of the result.</param>
    </member>
    <member name="M:mx.rpc.events.ResultEvent.toString">
      <summary>Returns a string representation of the ResultEvent.</summary>
    </member>
    <member name="F:mx.rpc.events.ResultEvent.RESULT">
      <summary>The RESULT event type.</summary>
    </member>
    <member name="P:mx.rpc.events.ResultEvent.headers">
      <summary>In certain circumstances, headers may also be returned with a fault to provide further context to the failure.</summary>
    </member>
    <member name="P:mx.rpc.events.ResultEvent.result">
      <summary>Result that the RPC call returns.</summary>
    </member>
    <member name="T:mx.rpc.Fault">
      <summary>Object that represents a fault in a remote procedure call (RPC) service invocation.</summary>
    </member>
    <member name="M:mx.rpc.Fault.#ctor(Avm.String,Avm.String,Avm.String)">
      <summary>Creates a new Fault object.</summary>
      <param name="faultCode" />
      <param name="faultString" />
      <param name="faultDetail" />
    </member>
    <member name="M:mx.rpc.Fault.toString" />
    <member name="F:mx.rpc.Fault._faultCode" />
    <member name="F:mx.rpc.Fault._faultDetail" />
    <member name="F:mx.rpc.Fault._faultString" />
    <member name="F:mx.rpc.Fault.rootCause">
      <summary>The cause of the fault.</summary>
    </member>
    <member name="P:mx.rpc.Fault.faultCode">
      <summary>A simple code describing the fault.</summary>
    </member>
    <member name="P:mx.rpc.Fault.faultDetail">
      <summary>Any extra details of the fault.</summary>
    </member>
    <member name="P:mx.rpc.Fault.faultString">
      <summary>Text description of the fault.</summary>
    </member>
    <member name="N:mx.rpc.http" />
    <member name="T:mx.rpc.http.HTTPService">
      <summary>You use the <code>&lt;mx:HTTPService&gt;</code> tag to represent an HTTPService object in an MXML file.</summary>
    </member>
    <member name="E:mx.rpc.http.HTTPService.invoke">
      <summary>The invoke event is fired when an HTTPService call is invoked so long as an Error is not thrown before the Channel attempts to send the message.</summary>
    </member>
    <member name="E:mx.rpc.http.HTTPService.fault">
      <summary>Dispatched when an HTTPService call fails.</summary>
    </member>
    <member name="E:mx.rpc.http.HTTPService.result">
      <summary>Dispatched when an HTTPService call returns successfully.</summary>
    </member>
    <member name="M:mx.rpc.http.HTTPService.#ctor(Avm.String,Avm.String)">
      <summary>Creates a new HTTPService.</summary>
      <param name="rootURL" />
      <param name="destination" />
    </member>
    <member name="M:mx.rpc.http.HTTPService.disconnect">
      <summary>Disconnects the service's network connection.</summary>
    </member>
    <member name="M:mx.rpc.http.HTTPService.logout">
      <summary>Logs the user out of the destination.</summary>
    </member>
    <member name="M:mx.rpc.http.HTTPService.send(System.Object)">
      <summary>Executes an HTTPService request.</summary>
      <param name="parameters" />
    </member>
    <member name="M:mx.rpc.http.HTTPService.setCredentials(Avm.String,Avm.String,Avm.String)">
      <summary>Sets the credentials for the destination accessed by the service.</summary>
      <param name="username">the username for the destination.</param>
      <param name="password">the password for the destination.</param>
      <param name="charset">The character set encoding to use while encoding the credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.</param>
    </member>
    <member name="M:mx.rpc.http.HTTPService.setRemoteCredentials(Avm.String,Avm.String,Avm.String)">
      <summary>The username and password to authenticate a user when accessing the HTTP URL.</summary>
      <param name="remoteUsername">the username to pass to the remote endpoint.</param>
      <param name="remotePassword">the password to pass to the remote endpoint.</param>
      <param name="charset">The character set encoding to use while encoding the remote credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.</param>
    </member>
    <member name="F:mx.rpc.http.HTTPService.CONTENT_TYPE_FORM">
      <summary>Indicates that the data being sent by the HTTP service is encoded as application/x-www-form-urlencoded.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.CONTENT_TYPE_XML">
      <summary>Indicates that the data being sent by the HTTP service is encoded as application/xml.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.DEFAULT_DESTINATION_HTTP">
      <summary>Indicates that the HTTPService object uses the DefaultHTTP destination.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.DEFAULT_DESTINATION_HTTPS">
      <summary>Indicates that the HTTPService object uses the DefaultHTTPS destination.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.ERROR_DECODING">
      <summary>Indicates that an XML formatted result could not be parsed into an XML instance or decoded into an Object.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.ERROR_ENCODING">
      <summary>Indicates that an input parameter could not be encoded as XML.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.ERROR_URL_REQUIRED">
      <summary>Indicates that the useProxy property was set to false but a url was not provided.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.RESULT_FORMAT_ARRAY">
      <summary>The result format "array" is similar to "object" however the value returned is always an Array such that if the result returned from result format "object" is not an Array already the item will be added as the first item to a new Array.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.RESULT_FORMAT_E4X">
      <summary>The result format "e4x" specifies that the value returned is an XML instance, which can be accessed using ECMAScript for XML (E4X) expressions.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.RESULT_FORMAT_FLASHVARS">
      <summary>The result format "flashvars" specifies that the value returned is text containing name=value pairs separated by ampersands, which is parsed into an ActionScript object.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.RESULT_FORMAT_OBJECT">
      <summary>The result format "object" specifies that the value returned is XML but is parsed as a tree of ActionScript objects.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.RESULT_FORMAT_TEXT">
      <summary>The result format "text" specifies that the HTTPService result text should be an unprocessed String.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.RESULT_FORMAT_XML">
      <summary>The result format "xml" specifies that results should be returned as an flash.xml.XMLNode instance pointing to the first child of the parent flash.xml.XMLDocument.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.contentType">
      <summary>Type of content for service requests.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.headers">
      <summary>Custom HTTP headers to be sent to the third party endpoint.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.method">
      <summary>HTTP method for sending the request.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.request">
      <summary>Object of name-value pairs used as parameters to the URL.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.xmlDecode">
      <summary>ActionScript function used to decode a service result from XML.</summary>
    </member>
    <member name="F:mx.rpc.http.HTTPService.xmlEncode">
      <summary>ActionScript function used to encode a service request as XML.</summary>
    </member>
    <member name="P:mx.rpc.http.HTTPService.channelSet">
      <summary>Provides access to the ChannelSet used by the service.</summary>
    </member>
    <member name="P:mx.rpc.http.HTTPService.destination">
      <summary>An HTTPService destination name in the services-config.xml file.</summary>
    </member>
    <member name="P:mx.rpc.http.HTTPService.requestTimeout">
      <summary>Provides access to the request timeout in seconds for sent messages.</summary>
    </member>
    <member name="P:mx.rpc.http.HTTPService.resultFormat">
      <summary>Value that indicates how you want to deserialize the result returned by the HTTP call.</summary>
    </member>
    <member name="P:mx.rpc.http.HTTPService.rootURL">
      <summary>The URL that the HTTPService object should use when computing relative URLs.</summary>
    </member>
    <member name="P:mx.rpc.http.HTTPService.url">
      <summary>Location of the service.</summary>
    </member>
    <member name="P:mx.rpc.http.HTTPService.useProxy">
      <summary>Specifies whether to use the Flex proxy service.</summary>
    </member>
    <member name="N:mx.rpc.http.mxml" />
    <member name="T:mx.rpc.http.mxml.HTTPService">
      <summary>You use the <code>&lt;mx:HTTPService&gt;</code> tag to represent an HTTPService object in an MXML file.</summary>
    </member>
    <member name="M:mx.rpc.http.mxml.HTTPService.#ctor(Avm.String,Avm.String)">
      <summary>Creates a new HTTPService.</summary>
      <param name="rootURL" />
      <param name="destination" />
    </member>
    <member name="M:mx.rpc.http.mxml.HTTPService.cancel(Avm.String)">
      <summary>Cancels the most recent HTTPService request.</summary>
      <param name="id" />
    </member>
    <member name="M:mx.rpc.http.mxml.HTTPService.initialized(System.Object,Avm.String)">
      <summary>If you create this class in ActionScript and want it to function with validation, you must call this method and pass in the MXML document and the HTTPService's <code>id</code>.</summary>
      <param name="document" />
      <param name="id" />
    </member>
    <member name="M:mx.rpc.http.mxml.HTTPService.send(System.Object)">
      <summary>Executes an HTTPService request.</summary>
      <param name="parameters" />
    </member>
    <member name="P:mx.rpc.http.mxml.HTTPService.concurrency">
      <summary>Value that indicates how to handle multiple calls to the same service.</summary>
    </member>
    <member name="P:mx.rpc.http.mxml.HTTPService.showBusyCursor">
      <summary>If <code>true</code>, a busy cursor is displayed while a service is executing.</summary>
    </member>
    <member name="T:mx.rpc.IResponder">
      <summary>This interface provides the contract for any service that needs to respond to remote or asynchronous calls.</summary>
    </member>
    <member name="M:mx.rpc.IResponder.fault(System.Object)">
      <summary>This method is called by a service when an error has been received.</summary>
      <param name="info" />
    </member>
    <member name="M:mx.rpc.IResponder.result(System.Object)">
      <summary>This method is called by a service when the return value has been received.</summary>
      <param name="data" />
    </member>
    <member name="N:mx.rpc.mxml" />
    <member name="T:mx.rpc.mxml.Concurrency">
      <summary>Concurrency is set via MXML based access to RPC services to indicate how to handle multiple calls to the same service.</summary>
    </member>
    <member name="F:mx.rpc.mxml.Concurrency.LAST">
      <summary>Making a request cancels any existing request.</summary>
    </member>
    <member name="F:mx.rpc.mxml.Concurrency.MULTIPLE">
      <summary>Existing requests are not cancelled, and the developer is responsible for ensuring the consistency of returned data by carefully managing the event stream.</summary>
    </member>
    <member name="F:mx.rpc.mxml.Concurrency.SINGLE">
      <summary>Only a single request at a time is allowed on the operation; multiple requests generate a fault.</summary>
    </member>
    <member name="T:mx.rpc.mxml.IMXMLSupport">
      <summary>Implementing this interface means that an RPC service can be used in an MXML document via tags since it supports the interfaces specified during Flex 1.</summary>
    </member>
    <member name="P:mx.rpc.mxml.IMXMLSupport.concurrency">
      <summary>The concurrency setting of the RPC operation or HTTPService.</summary>
    </member>
    <member name="P:mx.rpc.mxml.IMXMLSupport.showBusyCursor">
      <summary>Indicates whether the RPC operation or HTTPService should show the busy cursor while it is executing.</summary>
    </member>
    <member name="N:mx.rpc.remoting.mxml" />
    <member name="T:mx.rpc.remoting.mxml.Operation">
      <summary>The Operation used for RemoteObject when created in an MXML document.</summary>
    </member>
    <member name="M:mx.rpc.remoting.mxml.Operation.cancel(Avm.String)">
      <summary>Cancels the last service invocation or an invokation with the specified id.</summary>
      <param name="id">The messageId of the invocation to cancel. Optional. If omitted, the last service invocation is canceled.</param>
    </member>
    <member name="M:mx.rpc.remoting.mxml.Operation.send(System.Object)">
      <summary>Executes the method.</summary>
      <param name="args" />
    </member>
    <member name="P:mx.rpc.remoting.mxml.Operation.concurrency">
      <summary>The concurrency for this Operation.</summary>
    </member>
    <member name="P:mx.rpc.remoting.mxml.Operation.showBusyCursor">
      <summary>Whether this operation should show the busy cursor while it is executing.</summary>
    </member>
    <member name="T:mx.rpc.remoting.mxml.RemoteObject">
      <summary>The &lt;mx:RemoteObject&gt; tag gives you access to the methods of Java objects using Action Message Format (AMF) encoding.</summary>
    </member>
    <member name="M:mx.rpc.remoting.mxml.RemoteObject.#ctor(Avm.String)">
      <summary>Create a new RemoteObject.</summary>
      <param name="destination">the destination of the RemoteObject, should match a destination name in the services-config.xml file.</param>
    </member>
    <member name="M:mx.rpc.remoting.mxml.RemoteObject.getOperation(Avm.String)">
      <summary>Returns an Operation of the given name.</summary>
      <param name="name">Name of the Operation.</param>
    </member>
    <member name="M:mx.rpc.remoting.mxml.RemoteObject.initialized(System.Object,Avm.String)">
      <summary>Called automatically by the MXML compiler if the RemoteObject is set up using a tag.</summary>
      <param name="document">the MXML document on which this RemoteObject lives</param>
      <param name="id">the id of this RemoteObject within the document</param>
    </member>
    <member name="P:mx.rpc.remoting.mxml.RemoteObject.concurrency">
      <summary>Value that indicates how to handle multiple calls to the same service.</summary>
    </member>
    <member name="P:mx.rpc.remoting.mxml.RemoteObject.endpoint">
      <summary>This property allows the developer to quickly specify an endpoint for a RemoteObject destination without referring to a services configuration file at compile time or programmatically creating a ChannelSet.</summary>
    </member>
    <member name="P:mx.rpc.remoting.mxml.RemoteObject.showBusyCursor">
      <summary>If <code>true</code>, a busy cursor is displayed while a service is executing.</summary>
    </member>
    <member name="N:mx.rpc.remoting" />
    <member name="T:mx.rpc.remoting.Operation">
      <summary>An Operation used specifically by RemoteObjects.</summary>
    </member>
    <member name="M:mx.rpc.remoting.Operation.#ctor(mx.rpc.AbstractService,Avm.String)">
      <summary>Creates a new Operation.</summary>
      <param name="remoteObject" />
      <param name="name" />
    </member>
    <member name="M:mx.rpc.remoting.Operation.send(System.Object)">
      <summary>Executes the method.</summary>
      <param name="args" />
    </member>
    <member name="F:mx.rpc.remoting.Operation.argumentNames">
      <summary>An ordered list of the names of the arguments to pass to a method invocation.</summary>
    </member>
    <member name="P:mx.rpc.remoting.Operation.makeObjectsBindable">
      <summary>When this value is true, anonymous objects returned are forced to bindable objects.</summary>
    </member>
    <member name="T:mx.rpc.remoting.RemoteObject">
      <summary>The RemoteObject class gives you access to classes on a remote application server.</summary>
    </member>
    <member name="M:mx.rpc.remoting.RemoteObject.#ctor(Avm.String)">
      <summary>Creates a new RemoteObject.</summary>
      <param name="destination">[optional] Destination of the RemoteObject; should match a destination name in the services-config.xml file.</param>
    </member>
    <member name="M:mx.rpc.remoting.RemoteObject.getOperation(Avm.String)">
      <summary>Returns an Operation of the given name.</summary>
      <param name="name">Name of the Operation.</param>
    </member>
    <member name="M:mx.rpc.remoting.RemoteObject.setRemoteCredentials(Avm.String,Avm.String,Avm.String)">
      <summary>If a remote object is managed by an external service, such a ColdFusion Component (CFC), a username and password can be set for the authentication mechanism of that remote service.</summary>
      <param name="remoteUsername">the username to pass to the remote endpoint</param>
      <param name="remotePassword">the password to pass to the remote endpoint</param>
      <param name="charset">The character set encoding to use while encoding the remote credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.</param>
    </member>
    <member name="M:mx.rpc.remoting.RemoteObject.toString">
      <summary>Represents an instance of RemoteObject as a String, describing important properties such as the destination id and the set of channels assigned.</summary>
    </member>
    <member name="P:mx.rpc.remoting.RemoteObject.makeObjectsBindable">
      <summary>When this value is true, anonymous objects returned are forced to bindable objects.</summary>
    </member>
    <member name="P:mx.rpc.remoting.RemoteObject.source">
      <summary>Lets you specify a source value on the client; not supported for destinations that use the JavaAdapter.</summary>
    </member>
    <member name="T:mx.rpc.Responder">
      <summary>This class provides a default implementation <code>mx.rpc.IResponder</code></summary>
    </member>
    <member name="M:mx.rpc.Responder.#ctor(Avm.Function,Avm.Function)">
      <summary>Constructs an instance of the responder with the specified handlers.</summary>
      <param name="result">Function that should be called when the request has completed successfully.</param>
      <param name="fault">Function that should be called when the request has completed with errors.</param>
    </member>
    <member name="M:mx.rpc.Responder.fault(System.Object)">
      <summary>This method is called by a service when an error has been received.</summary>
      <param name="info" />
    </member>
    <member name="M:mx.rpc.Responder.result(System.Object)">
      <summary>This method is called by a remote service when the return value has been received.</summary>
      <param name="data" />
    </member>
    <member name="N:mx.rpc.soap" />
    <member name="T:mx.rpc.soap.AbstractWebService">
      <summary>AbstractWebService is an abstract base class for implementations that provide RPC access to SOAP-based web services.</summary>
    </member>
    <member name="M:mx.rpc.soap.AbstractWebService.#ctor(Avm.String,Avm.String)">
      <summary>Creates a new WebService.</summary>
      <param name="destination" />
      <param name="rootURL" />
    </member>
    <member name="M:mx.rpc.soap.AbstractWebService.addHeader(System.Object)">
      <summary>Adds a header that will be applied to all operations of this web service.</summary>
      <param name="header">The SOAP header to add to all operations.</param>
    </member>
    <member name="M:mx.rpc.soap.AbstractWebService.addSimpleHeader(Avm.String,Avm.String,Avm.String,Avm.String)">
      <summary>Add a header that will be applied to all operations of this WebService.</summary>
      <param name="qnameLocal">the localname for the header QName</param>
      <param name="qnameNamespace">the namespace for header QName</param>
      <param name="headerName">the name of the header</param>
      <param name="headerValue">the value of the header</param>
    </member>
    <member name="M:mx.rpc.soap.AbstractWebService.clearHeaders">
      <summary>Clears the headers that applied to all operations.</summary>
    </member>
    <member name="M:mx.rpc.soap.AbstractWebService.getHeader(Avm.QName,Avm.String)">
      <summary>Returns a header if a match is found based on QName localName and URI.</summary>
      <param name="qname">QName of the SOAPHeader.</param>
      <param name="headerName">Name of a header in the SOAPHeader content (Optional)</param>
    </member>
    <member name="M:mx.rpc.soap.AbstractWebService.removeHeader(Avm.QName,Avm.String)">
      <summary>Removes the header with the given QName from all operations.</summary>
      <param name="qname">QName of the SOAPHeader.</param>
      <param name="headerName">Name of a header in the SOAPHeader content (Optional)</param>
    </member>
    <member name="M:mx.rpc.soap.AbstractWebService.setRemoteCredentials(Avm.String,Avm.String,Avm.String)">
      <summary>The username and password to authenticate a user when accessing the webservice.</summary>
      <param name="remoteUsername">the username to pass to the remote endpoint</param>
      <param name="remotePassword">the password to pass to the remote endpoint</param>
      <param name="charset">The character set encoding to use while encoding the remote credentials. The default is null, which implies the legacy charset of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.</param>
    </member>
    <member name="F:mx.rpc.soap.AbstractWebService.DEFAULT_DESTINATION_HTTP" />
    <member name="F:mx.rpc.soap.AbstractWebService.DEFAULT_DESTINATION_HTTPS" />
    <member name="P:mx.rpc.soap.AbstractWebService.description">
      <summary>The description of the service for the currently active port.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.destination">
      <summary>The destination of the service.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.endpointURI">
      <summary>The location of the WebService.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.headers">
      <summary>Returns the array of SOAPHeaders registered for the WebService.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.httpHeaders">
      <summary>Custom HTTP headers to be sent to the SOAP endpoint.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.makeObjectsBindable">
      <summary>When this value is true, anonymous objects returned are forced to bindable objects.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.port">
      <summary>Specifies the port within the WSDL document that this WebService should use</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.ready">
      <summary>Specifies whether the WebService is ready to make requests.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.rootURL">
      <summary>The URL that the WebService should use when computing relative URLs.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.service">
      <summary>Specifies the service within the WSDL document that this WebService should use.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.useProxy">
      <summary>Specifies whether to use the Flex proxy service.</summary>
    </member>
    <member name="P:mx.rpc.soap.AbstractWebService.xmlSpecialCharsFilter">
      <summary>Custom function to be used to escape XML special characters before encoding any simple content.</summary>
    </member>
    <member name="T:mx.rpc.soap.LoadEvent">
      <summary>This event is dispatched when a WSDL XML document has loaded successfully.</summary>
    </member>
    <member name="E:mx.rpc.soap.LoadEvent.load">
      <summary>The LOAD event type. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>wsdl</code></td><td>WSDL object.</td></tr> <tr><td><code>location</code></td><td>URI of the WSDL document</td></tr> </table></summary>
    </member>
    <member name="M:mx.rpc.soap.LoadEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.rpc.wsdl.WSDL,Avm.String)">
      <summary>Creates a new WSDLLoadEvent.</summary>
      <param name="type">The event type; indicates the action that triggered the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="wsdl">Object that contains the WSDL document.</param>
      <param name="location">URL of the WSDL document.</param>
    </member>
    <member name="M:mx.rpc.soap.LoadEvent.clone">
      <summary>Returns a copy of this LoadEvent.</summary>
    </member>
    <member name="M:mx.rpc.soap.LoadEvent.toString">
      <summary>Returns a String representation of this LoadEvent.</summary>
    </member>
    <member name="F:mx.rpc.soap.LoadEvent.LOAD">
      <summary>The LOAD event type.</summary>
    </member>
    <member name="N:mx.rpc.soap.mxml" />
    <member name="T:mx.rpc.soap.mxml.Operation">
      <summary>An Operation used specifically by WebServices.</summary>
    </member>
    <member name="M:mx.rpc.soap.mxml.Operation.#ctor(mx.rpc.soap.WebService,Avm.String)">
      <param name="webService" />
      <param name="name" />
    </member>
    <member name="M:mx.rpc.soap.mxml.Operation.cancel(Avm.String)">
      <summary>Use superclass description.</summary>
      <param name="id" />
    </member>
    <member name="M:mx.rpc.soap.mxml.Operation.send(System.Object)">
      <summary>Execute the method.</summary>
      <param name="args" />
    </member>
    <member name="P:mx.rpc.soap.mxml.Operation.concurrency">
      <summary>The concurrency for this Operation.</summary>
    </member>
    <member name="P:mx.rpc.soap.mxml.Operation.showBusyCursor">
      <summary>Whether this operation should show the busy cursor while it is executing.</summary>
    </member>
    <member name="T:mx.rpc.soap.mxml.WebService">
      <summary>The &lt;mx:WebService&gt; tag gives you access to the operations of SOAP-compliant web services.</summary>
    </member>
    <member name="M:mx.rpc.soap.mxml.WebService.#ctor(Avm.String)">
      <summary>Creates a new WebService component.</summary>
      <param name="destination">the destination of the WebService, should match a destination name in the services-config.xml file.</param>
    </member>
    <member name="M:mx.rpc.soap.mxml.WebService.getOperation(Avm.String)">
      <summary>Returns an Operation of the given name.</summary>
      <param name="name">Name of the Operation.</param>
    </member>
    <member name="M:mx.rpc.soap.mxml.WebService.initialized(System.Object,Avm.String)">
      <summary>Called automatically by the MXML compiler if the WebService is setup using a tag.</summary>
      <param name="document">the MXML document on which this WebService lives</param>
      <param name="id">the id of this WebService within the document</param>
    </member>
    <member name="P:mx.rpc.soap.mxml.WebService.concurrency">
      <summary>Value that indicates how to handle multiple calls to the same service.</summary>
    </member>
    <member name="P:mx.rpc.soap.mxml.WebService.showBusyCursor">
      <summary>If <code>true</code>, a busy cursor is displayed while a service is executing.</summary>
    </member>
    <member name="P:mx.rpc.soap.mxml.WebService.serviceName" />
    <member name="T:mx.rpc.soap.Operation">
      <summary>An Operation used specifically by WebServices.</summary>
    </member>
    <member name="E:mx.rpc.soap.Operation.header">
      <summary>Dispatched when an Operation invocation returns with SOAP headers in the response.</summary>
    </member>
    <member name="M:mx.rpc.soap.Operation.#ctor(mx.rpc.AbstractService,Avm.String)">
      <summary>Creates a new Operation.</summary>
      <param name="webService" />
      <param name="name" />
    </member>
    <member name="M:mx.rpc.soap.Operation.addHeader(System.Object)">
      <summary>Adds a header that is applied only to this Operation.</summary>
      <param name="header">The SOAP header to add to this Operation.</param>
    </member>
    <member name="M:mx.rpc.soap.Operation.addSimpleHeader(Avm.String,Avm.String,Avm.String,Avm.String)">
      <summary>Adds a header that is applied only to this Operation.</summary>
      <param name="qnameLocal">the localname for the header QName</param>
      <param name="qnameNamespace">the namespace for header QName</param>
      <param name="headerName">Name of the header.</param>
      <param name="headerValue">Value of the header.</param>
    </member>
    <member name="M:mx.rpc.soap.Operation.cancel(Avm.String)">
      <summary>Cancels the last service invocation or an invokation with the specified id.</summary>
      <param name="id">The messageId of the invocation to cancel. Optional. If omitted, the last service invocation is canceled.</param>
    </member>
    <member name="M:mx.rpc.soap.Operation.clearHeaders">
      <summary>Clears the headers for this individual Operation.</summary>
    </member>
    <member name="M:mx.rpc.soap.Operation.getHeader(Avm.QName,Avm.String)">
      <summary>Returns a header if a match is found based on QName localName and URI.</summary>
      <param name="qname">QName of the SOAPHeader.</param>
      <param name="headerName">Name of a header in the SOAPHeader content (Optional)</param>
    </member>
    <member name="M:mx.rpc.soap.Operation.removeHeader(Avm.QName,Avm.String)">
      <summary>Removes the header with the given QName from all operations.</summary>
      <param name="qname">QName of the SOAPHeader.</param>
      <param name="headerName">Name of a header in the SOAPHeader content (Optional)</param>
    </member>
    <member name="P:mx.rpc.soap.Operation.endpointURI">
      <summary>The location of the WebService for this Operation.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.forcePartArrays">
      <summary>Determines whether or not a single or empty return value for an output message part that is defined as an array should be returned as an array containing one (or zero, respectively) elements.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.headerFormat">
      <summary>Determines how the SOAP encoded headers are decoded.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.headers">
      <summary>Accessor to an Array of SOAPHeaders that are to be sent on each invocation of the operation.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.httpHeaders">
      <summary>Custom HTTP headers to be sent to the SOAP endpoint.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.ignoreWhitespace">
      <summary>Determines whether whitespace is ignored when processing XML for a SOAP encoded request or response.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.makeObjectsBindable">
      <summary>When this value is true, anonymous objects returned are forced to bindable objects.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.multiplePartsFormat">
      <summary>Determines the type of the default result object for calls to web services that define multiple parts in the output message.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.request">
      <summary>The request of the Operation is an object structure or an XML structure.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.resultFormat">
      <summary>Determines how the Operation result is decoded.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.resultHeaders">
      <summary>The headers that were returned as part of the last execution of this operation.</summary>
    </member>
    <member name="P:mx.rpc.soap.Operation.xmlSpecialCharsFilter" />
    <member name="T:mx.rpc.soap.SOAPFault">
      <summary>A subclass of mx.rpc.Fault that provides SOAP specific information from a SOAP envelope Fault element.</summary>
    </member>
    <member name="M:mx.rpc.soap.SOAPFault.#ctor(Avm.QName,Avm.String,Avm.String,Avm.XML,Avm.String)">
      <param name="faultCode" />
      <param name="faultString" />
      <param name="detail" />
      <param name="element" />
      <param name="faultactor" />
    </member>
    <member name="M:mx.rpc.soap.SOAPFault.toString" />
    <member name="F:mx.rpc.soap.SOAPFault.element">
      <summary>The raw XML of this SOAP Fault.</summary>
    </member>
    <member name="F:mx.rpc.soap.SOAPFault.faultactor">
      <summary>A SOAP Fault may provide information about who caused the fault through a faultactor property.</summary>
    </member>
    <member name="F:mx.rpc.soap.SOAPFault.faultcode">
      <summary>The faultcode property is similar to faultCode but exists to both match the case of the faultcode element in a SOAP Fault and to provide the fully qualified name of the code.</summary>
    </member>
    <member name="P:mx.rpc.soap.SOAPFault.detail">
      <summary>The detail property is the same as faultDetail but exists to match the case of the detail element in a SOAP Fault.</summary>
    </member>
    <member name="P:mx.rpc.soap.SOAPFault.faultstring">
      <summary>The faultstring property is the same as faultString but exists to match the case of the faultstring element in a SOAP envelope Fault.</summary>
    </member>
    <member name="T:mx.rpc.soap.SOAPHeader">
      <summary>You use a SOAPHeader to specify the headers that need to be added to a SOAP envelope of a WebService Operation request.</summary>
    </member>
    <member name="M:mx.rpc.soap.SOAPHeader.#ctor(Avm.QName,System.Object)">
      <summary>Constructs a new SOAPHeader.</summary>
      <param name="qname" />
      <param name="content" />
    </member>
    <member name="F:mx.rpc.soap.SOAPHeader.content">
      <summary>The content to send for the header value.</summary>
    </member>
    <member name="F:mx.rpc.soap.SOAPHeader.mustUnderstand">
      <summary>Specifies whether the header must be understood by the endpoint.</summary>
    </member>
    <member name="F:mx.rpc.soap.SOAPHeader.qname">
      <summary>The qualified name of the SOAP header.</summary>
    </member>
    <member name="F:mx.rpc.soap.SOAPHeader.role">
      <summary>Specifies the URI for the role that this header is intended in a potential chain of endpoints processing a SOAP request.</summary>
    </member>
    <member name="T:mx.rpc.soap.WebService">
      <summary>The WebService class provides access to SOAP-based web services on remote servers.</summary>
    </member>
    <member name="E:mx.rpc.soap.WebService.load">
      <summary>The <code>LoadEvent.LOAD</code> is dispatched when the WSDL document has loaded successfully.</summary>
    </member>
    <member name="M:mx.rpc.soap.WebService.#ctor(Avm.String,Avm.String)">
      <summary>Creates a new WebService.</summary>
      <param name="destination" />
      <param name="rootURL" />
    </member>
    <member name="M:mx.rpc.soap.WebService.canLoadWSDL">
      <summary>Returns a Boolean value that indicates whether the WebService ready to load a WSDL (does it have a valid destination or wsdl specified).</summary>
    </member>
    <member name="M:mx.rpc.soap.WebService.getOperation(Avm.String)">
      <summary>Returns an Operation of the given name.</summary>
      <param name="name">Name of the Operation.</param>
    </member>
    <member name="M:mx.rpc.soap.WebService.initializeOperation(mx.rpc.soap.Operation)">
      <param name="operation" />
    </member>
    <member name="M:mx.rpc.soap.WebService.loadWSDL(Avm.String)">
      <summary>Instructs the WebService to download the WSDL document.</summary>
      <param name="uri">If the wsdl hasn't been specified previously, it may be specified here.</param>
    </member>
    <member name="M:mx.rpc.soap.WebService.toString">
      <summary>Represents an instance of WebService as a String, describing important properties such as the destination id and the set of channels assigned.</summary>
    </member>
    <member name="F:mx.rpc.soap.WebService.DEFAULT_DESTINATION_HTTP" />
    <member name="F:mx.rpc.soap.WebService.DEFAULT_DESTINATION_HTTPS" />
    <member name="P:mx.rpc.soap.WebService.wsdl">
      <summary>The location of the WSDL document for this WebService.</summary>
    </member>
    <member name="N:mx.rpc.wsdl" />
    <member name="T:mx.rpc.wsdl.WSDLBinding">
      <summary>A binding defines the message format and protocol for messages sent to and from operations as defined by a particular portType.</summary>
    </member>
    <member name="M:mx.rpc.wsdl.WSDLBinding.#ctor(Avm.String)">
      <param name="name" />
    </member>
    <member name="P:mx.rpc.wsdl.WSDLBinding.name">
      <summary>The unique name of this binding.</summary>
    </member>
    <member name="P:mx.rpc.wsdl.WSDLBinding.portType">
      <summary>The portType for this binding which provides the interface definitions for the operations of this binding.</summary>
    </member>
    <member name="P:mx.rpc.wsdl.WSDLBinding.style">
      <summary>Represents a SOAP binding style attribute which is the default for any operation defined under this binding.</summary>
    </member>
    <member name="P:mx.rpc.wsdl.WSDLBinding.transport">
      <summary>Represents a SOAP binding transport attribute which indicates the URI of the transport used to send SOAP encoded messages.</summary>
    </member>
    <member name="N:mx.rpc.xml" />
    <member name="T:mx.rpc.xml.IXMLSchemaInstance">
      <summary>An ActionScript type should implement this interface when it needs to instruct an XML Schema based encoder (such as the WebService SOAP client) which concrete type definition to use while encoding instances of the type.</summary>
    </member>
    <member name="P:mx.rpc.xml.IXMLSchemaInstance.xsiType">
      <summary>When encoding ActionScript instances as XML the encoder may require a type definition for the concrete implementation when the associated XML Schema complexType is abstract.</summary>
    </member>
    <member name="T:mx.rpc.xml.QualifiedResourceManager">
      <summary>QualifiedResourceManager is a helper class that simply maintains the order that resources were added and maps a target namespace to one or more resources.</summary>
    </member>
    <member name="M:mx.rpc.xml.QualifiedResourceManager.#ctor" />
    <member name="M:mx.rpc.xml.QualifiedResourceManager.addResource(Avm.Namespace,System.Object)">
      <summary>Adds a resource to a potential Array of resources for a given namespace.</summary>
      <param name="ns" />
      <param name="resource" />
    </member>
    <member name="M:mx.rpc.xml.QualifiedResourceManager.getResources">
      <summary>Gets an Array of all resources.</summary>
    </member>
    <member name="M:mx.rpc.xml.QualifiedResourceManager.getResourcesForNamespace(Avm.Namespace)">
      <summary>Gets an Array of resources for a given target namespace.</summary>
      <param name="ns" />
    </member>
    <member name="M:mx.rpc.xml.QualifiedResourceManager.getResourcesForURI(Avm.String)">
      <param name="uri" />
    </member>
    <member name="F:mx.rpc.xml.QualifiedResourceManager.resources">
      <summary>This Array is used to preserve order in which resources were added so as to support the order in which they are searched.</summary>
    </member>
    <member name="F:mx.rpc.xml.QualifiedResourceManager.resourcesMap">
      <summary>Maps <code>Namespace.uri</code> to an <code>Array</code> of resources.</summary>
    </member>
    <member name="T:mx.rpc.xml.SchemaTypeRegistry">
      <summary>XMLDecoder uses this class to map an XML Schema type by QName to an ActionScript Class so that it can create strongly typed objects when decoding content.</summary>
    </member>
    <member name="M:mx.rpc.xml.SchemaTypeRegistry.getClass(System.Object)">
      <summary>Looks for a registered Class for the given type.</summary>
      <param name="type">The QName or String representing the type name.</param>
    </member>
    <member name="M:mx.rpc.xml.SchemaTypeRegistry.getCollectionClass(System.Object)">
      <summary />
      <param name="type">The QName or String representing the collection type name.</param>
    </member>
    <member name="M:mx.rpc.xml.SchemaTypeRegistry.getInstance" />
    <member name="M:mx.rpc.xml.SchemaTypeRegistry.registerClass(System.Object,System.Object)">
      <summary>Maps a type QName to a Class definition.</summary>
      <param name="type">The QName or String representation of the type name.</param>
      <param name="definition">The Class itself or class name as a String.</param>
    </member>
    <member name="M:mx.rpc.xml.SchemaTypeRegistry.registerCollectionClass(System.Object,System.Object)">
      <summary>Maps a type name to a collection Class.</summary>
      <param name="type" />
      <param name="definition" />
    </member>
    <member name="M:mx.rpc.xml.SchemaTypeRegistry.unregisterClass(System.Object)">
      <summary>Removes a Class from the registry for the given type.</summary>
      <param name="type">The QName or String representation of the type name.</param>
    </member>
    <member name="M:mx.rpc.xml.SchemaTypeRegistry.unregisterCollectionClass(System.Object)">
      <summary>Removes a collection Class from the registry for the given type.</summary>
      <param name="type">The QName or String representation of the collection type name.</param>
    </member>
    <member name="T:mx.rpc.xml.SimpleXMLDecoder">
      <summary>The SimpleXMLDecoder class deserialize XML into a graph of ActionScript objects.</summary>
    </member>
    <member name="M:mx.rpc.xml.SimpleXMLDecoder.decodeXML(flash.xml.XMLNode)">
      <summary>Converts a tree of XMLNodes into a tree of ActionScript Objects.</summary>
      <param name="dataNode" />
    </member>
    <member name="M:mx.rpc.xml.SimpleXMLDecoder.getLocalName(flash.xml.XMLNode)">
      <param name="xmlNode" />
    </member>
    <member name="M:mx.rpc.xml.SimpleXMLDecoder.simpleType(System.Object)">
      <summary>Converts an ActionScript object into a Number, Boolean, or String.</summary>
      <param name="val" />
    </member>
    <member name="T:mx.rpc.xml.SimpleXMLEncoder">
      <summary>The SimpleXMLEncoder class take ActionScript Objects and encodes them to XML.</summary>
    </member>
    <member name="M:mx.rpc.xml.SimpleXMLEncoder.#ctor(flash.xml.XMLDocument)">
      <param name="myXML" />
    </member>
    <member name="M:mx.rpc.xml.SimpleXMLEncoder.encodeDate(Avm.Date,Avm.String)">
      <param name="rawDate" />
      <param name="dateType" />
    </member>
    <member name="M:mx.rpc.xml.SimpleXMLEncoder.encodeValue(System.Object,Avm.QName,flash.xml.XMLNode)">
      <summary>parentNode - optional, an XMLNode under which to put the encoded value.</summary>
      <param name="obj" />
      <param name="qname" />
      <param name="parentNode" />
    </member>
    <member name="N:mx.utils" />
    <member name="T:mx.utils.URLUtil">
      <summary>The URLUtil class is a static class with methods for working with full and relative URLs within Flex.</summary>
    </member>
    <member name="M:mx.utils.URLUtil.getFullURL(Avm.String,Avm.String)">
      <summary>Converts a potentially relative URL to a fully-qualified URL.</summary>
      <param name="rootURL">URL used to resolve the URL specified by the <code>url</code> parameter, if <code>url</code> is relative.</param>
      <param name="url">URL to convert.</param>
    </member>
    <member name="M:mx.utils.URLUtil.getPort(Avm.String)">
      <summary>Returns the port number from the specified URL.</summary>
      <param name="url">The URL to analyze.</param>
    </member>
    <member name="M:mx.utils.URLUtil.getProtocol(Avm.String)">
      <summary>Returns the protocol section of the specified URL.</summary>
      <param name="url">String containing the URL to parse.</param>
    </member>
    <member name="M:mx.utils.URLUtil.getServerName(Avm.String)">
      <summary>Returns the server name from the specified URL.</summary>
      <param name="url">The URL to analyze.</param>
    </member>
    <member name="M:mx.utils.URLUtil.getServerNameWithPort(Avm.String)">
      <summary>Returns the domain and port information from the specified URL.</summary>
      <param name="url">The URL to analyze.</param>
    </member>
    <member name="M:mx.utils.URLUtil.hasUnresolvableTokens">
      <summary>If the <code>LoaderConfig.url</code> property is not available, the <code>replaceTokens()</code> method will not replace the server name and port properties properly.</summary>
    </member>
    <member name="M:mx.utils.URLUtil.isHttpURL(Avm.String)">
      <summary>Determines if the URL uses the HTTP, HTTPS, or RTMP protocol.</summary>
      <param name="url">The URL to analyze.</param>
    </member>
    <member name="M:mx.utils.URLUtil.isHttpsURL(Avm.String)">
      <summary>Determines if the URL uses the secure HTTPS protocol.</summary>
      <param name="url">The URL to analyze.</param>
    </member>
    <member name="M:mx.utils.URLUtil.objectToString(System.Object,Avm.String,System.Boolean)">
      <summary>Enumerates an object's dynamic properties (by using a <code>for..in</code> loop) and returns a String.</summary>
      <param name="object">The object to convert to a String.</param>
      <param name="separator">The character that separates each of the object's <code>property:value</code> pair in the String.</param>
      <param name="encodeURL">Whether or not to URL-encode the String.</param>
    </member>
    <member name="M:mx.utils.URLUtil.replacePort(Avm.String,System.UInt32)">
      <summary>Returns a new String with the port replaced with the specified port.</summary>
      <param name="uri">String containing the URI in which the port is replaced.</param>
      <param name="newPort">uint containing the new port to subsitute.</param>
    </member>
    <member name="M:mx.utils.URLUtil.replaceProtocol(Avm.String,Avm.String)">
      <summary>Replaces the protocol of the specified URI with the given protocol.</summary>
      <param name="uri">String containing the URI in which the protocol needs to be replaced.</param>
      <param name="newProtocol">String containing the new protocol to use.</param>
    </member>
    <member name="M:mx.utils.URLUtil.replaceTokens(Avm.String)">
      <summary>Returns a new String with the port and server tokens replaced with the port and server from the currently running application.</summary>
      <param name="url">String containing the <code>SERVER_NAME_TOKEN</code> and/or <code>SERVER_NAME_PORT</code> which should be replaced by the port and server from the application.</param>
    </member>
    <member name="M:mx.utils.URLUtil.stringToObject(Avm.String,Avm.String,System.Boolean)">
      <summary>Returns an object from a String.</summary>
      <param name="string">The String to convert to an object.</param>
      <param name="separator">The character that separates <code>name=value</code> pairs in the String.</param>
      <param name="decodeURL">Whether or not to decode URL-encoded characters in the String.</param>
    </member>
    <member name="M:mx.utils.URLUtil.urisEqual(Avm.String,Avm.String)">
      <summary>Tests whether two URI Strings are equivalent, ignoring case and differences in trailing slashes.</summary>
      <param name="uri1">The first URI to compare.</param>
      <param name="uri2">The second URI to compare.</param>
    </member>
    <member name="F:mx.utils.URLUtil.SERVER_NAME_TOKEN">
      <summary>The pattern in the String that is passed to the <code>replaceTokens()</code> method that is replaced by the application's server name.</summary>
    </member>
    <member name="F:mx.utils.URLUtil.SERVER_PORT_TOKEN">
      <summary>The pattern in the String that is passed to the <code>replaceTokens()</code> method that is replaced by the application's port.</summary>
    </member>
  </members>
</doc>