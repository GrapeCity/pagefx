<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>flex3</name>
  </assembly>
  <members>
    <member name="N:mx.accessibility" />
    <member name="T:mx.accessibility.AccImpl">
      <summary>The AccImpl class is the base class for accessibility in components.</summary>
    </member>
    <member name="M:mx.accessibility.AccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.AccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="M:mx.accessibility.AccImpl.eventHandler(flash.events.Event)">
      <summary>Generic event handler.</summary>
      <param name="event" />
    </member>
    <member name="M:mx.accessibility.AccImpl.getName(System.UInt32)">
      <summary>Returns the name of the accessible component.</summary>
      <param name="childID" />
    </member>
    <member name="M:mx.accessibility.AccImpl.getState(System.UInt32)">
      <summary>Utility method determines state of the accessible component.</summary>
      <param name="childID" />
    </member>
    <member name="F:mx.accessibility.AccImpl.master">
      <summary>A reference to the UIComponent instance that this AccImpl instance is making accessible.</summary>
    </member>
    <member name="F:mx.accessibility.AccImpl.role">
      <summary>Accessibility Role of the component being made accessible.</summary>
    </member>
    <member name="P:mx.accessibility.AccImpl.eventsToHandle">
      <summary>All subclasses must override this function by returning an array of strings of the events to listen for.</summary>
    </member>
    <member name="T:mx.accessibility.AccordionHeaderAccImpl">
      <summary>The AccordionHeaderAccImpl is the class for enabling Accordion Accessibility.</summary>
    </member>
    <member name="M:mx.accessibility.AccordionHeaderAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.AccordionHeaderAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.AlertAccImpl">
      <summary>The AlertAccImpl class is the accessibility class for Alert.</summary>
    </member>
    <member name="M:mx.accessibility.AlertAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.AlertAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.ButtonAccImpl">
      <summary>The ButtonAccImpl class is the accessibility class for Button.</summary>
    </member>
    <member name="M:mx.accessibility.ButtonAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.ButtonAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.CheckBoxAccImpl">
      <summary>The CheckBoxAccImpl class is the accessibility class for CheckBox.</summary>
    </member>
    <member name="M:mx.accessibility.CheckBoxAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.CheckBoxAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.ColorPickerAccImpl" />
    <member name="M:mx.accessibility.ColorPickerAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.ColorPickerAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.ComboBaseAccImpl">
      <summary>The ComboBaseAccImpl class is the accessibility class for ComboBase.</summary>
    </member>
    <member name="M:mx.accessibility.ComboBaseAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.ComboBaseAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.ComboBoxAccImpl">
      <summary>The ComboBoxAccImpl class is the accessibility class for List.</summary>
    </member>
    <member name="M:mx.accessibility.ComboBoxAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.ComboBoxAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.DataGridAccImpl">
      <summary>The DataGridAccImpl class is the accessibility class for DataGrid.</summary>
    </member>
    <member name="M:mx.accessibility.DataGridAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.DataGridAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.DateChooserAccImpl">
      <summary>The DateChooserAccImpl class is the accessibility class for DateChooser.</summary>
    </member>
    <member name="M:mx.accessibility.DateChooserAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.DateChooserAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.DateFieldAccImpl">
      <summary>The DateFieldAccImpl class is the accessibility class for DateChooser.</summary>
    </member>
    <member name="M:mx.accessibility.DateFieldAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.DateFieldAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.LinkButtonAccImpl">
      <summary>The LinkButtonAccImpl class is the accessibility class for Link.</summary>
    </member>
    <member name="M:mx.accessibility.LinkButtonAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.LinkButtonAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.ListAccImpl">
      <summary>The ListAccImpl class is the accessibility class for List.</summary>
    </member>
    <member name="M:mx.accessibility.ListAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.ListAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.ListBaseAccImpl">
      <summary>The ListBaseAccImpl class is the accessibility class for ListBase.</summary>
    </member>
    <member name="M:mx.accessibility.ListBaseAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.ListBaseAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.MenuAccImpl">
      <summary>The MenuAccImpl class is the accessibility class for Menu.</summary>
    </member>
    <member name="M:mx.accessibility.MenuAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.MenuAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.MenuBarAccImpl">
      <summary>The MenuBarAccImpl class is the accessibility class for MenuBar.</summary>
    </member>
    <member name="M:mx.accessibility.MenuBarAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.MenuBarAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="M:mx.accessibility.MenuBarAccImpl.get_accRole(System.UInt32)">
      <summary>Gets the role for the component.</summary>
      <param name="childID">uint</param>
    </member>
    <member name="T:mx.accessibility.PanelAccImpl">
      <summary>The PanelAccImpl class is the accessibility class for Panel.</summary>
    </member>
    <member name="M:mx.accessibility.PanelAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.PanelAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.RadioButtonAccImpl">
      <summary>The RadioButtonAccimpl class is the accessibility class for RadioButton.</summary>
    </member>
    <member name="M:mx.accessibility.RadioButtonAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.RadioButtonAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.SliderAccImpl">
      <summary>The SliderAccImpl class is the accessibility class for HSlider and VSlider.</summary>
    </member>
    <member name="M:mx.accessibility.SliderAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.SliderAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="M:mx.accessibility.SliderAccImpl.getState(System.UInt32)">
      <summary>Utility method determines state of the accessible component.</summary>
      <param name="childID" />
    </member>
    <member name="T:mx.accessibility.TabBarAccImpl">
      <summary>The TabBarAccImpl class is the accessibility class for TabBar and TabNavigator.</summary>
    </member>
    <member name="M:mx.accessibility.TabBarAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.TabBarAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.TitleWindowAccImpl">
      <summary>The TitleWindowAccImpl class is the accessibility class for TitleWindow.</summary>
    </member>
    <member name="M:mx.accessibility.TitleWindowAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.TitleWindowAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.TreeAccImpl">
      <summary>The TreeAccImpl class is the accessibility class for Tree.</summary>
    </member>
    <member name="M:mx.accessibility.TreeAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="master">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.TreeAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="T:mx.accessibility.UIComponentAccImpl">
      <summary>The UIComponentAccImpl class is the accessibility class for UIComponent.</summary>
    </member>
    <member name="M:mx.accessibility.UIComponentAccImpl.#ctor(mx.core.UIComponent)">
      <summary>Constructor.</summary>
      <param name="component">The UIComponent instance that this AccImpl instance is making accessible.</param>
    </member>
    <member name="M:mx.accessibility.UIComponentAccImpl.enableAccessibility">
      <summary>Method call for enabling accessibility for a component.</summary>
    </member>
    <member name="M:mx.accessibility.UIComponentAccImpl.eventHandler(flash.events.Event)">
      <summary>Generic event handler.</summary>
      <param name="event" />
    </member>
    <member name="M:mx.accessibility.UIComponentAccImpl.getFormName(mx.core.UIComponent)">
      <summary>Method for supporting Form Accessibility.</summary>
      <param name="component" />
    </member>
    <member name="F:mx.accessibility.UIComponentAccImpl.master">
      <summary>A reference to the UIComponent itself.</summary>
    </member>
    <member name="N:mx.automation" />
    <member name="T:mx.automation.Automation">
      <summary>The Automation class defines the entry point for the Flex Automation framework.</summary>
    </member>
    <member name="M:mx.automation.Automation.registerDelegateClass(Avm.Class,Avm.Class)">
      <summary>Registers the component class and delegate class association with Automation.</summary>
      <param name="compClass">The component class.</param>
      <param name="delegateClass">The delegate class associated with the component.</param>
    </member>
    <member name="P:mx.automation.Automation.automationManager">
      <summary>The IAutomationManager instance.</summary>
    </member>
    <member name="P:mx.automation.Automation.automationObjectHelper">
      <summary>The available IAutomationObjectHelper instance.</summary>
    </member>
    <member name="P:mx.automation.Automation.initialized">
      <summary>Contains <code>true</code> if the automation module has been initialized.</summary>
    </member>
    <member name="P:mx.automation.Automation.mouseSimulator">
      <summary>The currently active mouse simulator.</summary>
    </member>
    <member name="T:mx.automation.IAutomationObject">
      <summary>The IAutomationObject interface defines the interface for a delegate object that implements automation for a component.</summary>
    </member>
    <member name="M:mx.automation.IAutomationObject.createAutomationIDPart(mx.automation.IAutomationObject)">
      <summary>Returns a set of properties that identify the child within this container.</summary>
      <param name="child">Child for which to provide the id.</param>
    </member>
    <member name="M:mx.automation.IAutomationObject.getAutomationChildAt(System.Int32)">
      <summary>Provides the automation object at the specified index.</summary>
      <param name="index">The index of the child to return</param>
    </member>
    <member name="M:mx.automation.IAutomationObject.replayAutomatableEvent(flash.events.Event)">
      <summary>Replays the specified event.</summary>
      <param name="event">The event to replay.</param>
    </member>
    <member name="M:mx.automation.IAutomationObject.resolveAutomationIDPart(System.Object)">
      <summary>Resolves a child by using the id provided.</summary>
      <param name="criteria">Set of properties describing the child. The criteria can contain regular expression values resulting in multiple children being matched.</param>
    </member>
    <member name="P:mx.automation.IAutomationObject.automationDelegate">
      <summary>The delegate object that is handling the automation-related functionality.</summary>
    </member>
    <member name="P:mx.automation.IAutomationObject.automationName">
      <summary>Name that can be used as an identifier for this object.</summary>
    </member>
    <member name="P:mx.automation.IAutomationObject.automationTabularData">
      <summary>An implementation of the <code>IAutomationTabularData</code> interface, which can be used to retrieve the data.</summary>
    </member>
    <member name="P:mx.automation.IAutomationObject.automationValue">
      <summary>This value generally corresponds to the rendered appearance of the object and should be usable for correlating the identifier with the object as it appears visually within the application.</summary>
    </member>
    <member name="P:mx.automation.IAutomationObject.numAutomationChildren">
      <summary>The number of automation children this container has.</summary>
    </member>
    <member name="P:mx.automation.IAutomationObject.showInAutomationHierarchy">
      <summary>A flag that determines if an automation object shows in the automation hierarchy.</summary>
    </member>
    <member name="N:mx.binding.utils" />
    <member name="T:mx.binding.utils.BindingUtils">
      <summary>The BindingUtils class defines utility methods for performing data binding from ActionScript.</summary>
    </member>
    <member name="M:mx.binding.utils.BindingUtils.bindSetter(Avm.Function,System.Object,System.Object,System.Boolean)">
      <summary>Binds a setter function, <code>setter</code>, to a bindable property or property chain.</summary>
      <param name="setter">Setter method to invoke with an argument of the current value of <code>chain</code> when that value changes.</param>
      <param name="host">The host of the property. See the <code>bindProperty()</code> method for more information.</param>
      <param name="chain">The name of the property, or property chain. See the <code>bindProperty()</code> method for more information.</param>
      <param name="commitOnly">Set to <code>true</code> if the handler should be called only on committing change events. See the <code>bindProperty()</code> method for more information.</param>
    </member>
    <member name="T:mx.binding.utils.ChangeWatcher">
      <summary>The ChangeWatcher class defines utility methods that you can use with bindable Flex properties.</summary>
    </member>
    <member name="M:mx.binding.utils.ChangeWatcher.#ctor(System.Object,Avm.Function,System.Boolean,mx.binding.utils.ChangeWatcher)">
      <summary>Constructor.</summary>
      <param name="access" />
      <param name="handler" />
      <param name="commitOnly" />
      <param name="next" />
    </member>
    <member name="M:mx.binding.utils.ChangeWatcher.canWatch(System.Object,Avm.String,System.Boolean)">
      <summary>Lets you determine if the host exposes a data-binding event on the property.</summary>
      <param name="host">The host of the property. See the <code>watch()</code> method for more information.</param>
      <param name="name">The name of the property, or property chain. See the <code>watch()</code> method for more information.</param>
      <param name="commitOnly">Set to <code>true</code> if the handler should be called only on committing change events. See the <code>watch()</code> method for more information.</param>
    </member>
    <member name="M:mx.binding.utils.ChangeWatcher.getEvents(System.Object,Avm.String,System.Boolean)">
      <summary>Returns all the binding events for all bindable properties in the host object.</summary>
      <param name="host">The host of the property. See the <code>watch()</code> method for more information.</param>
      <param name="name">The name of the property, or property chain. See the <code>watch()</code> method for more information.</param>
      <param name="commitOnly">Controls inclusion of non-committing change events in the returned value.</param>
    </member>
    <member name="M:mx.binding.utils.ChangeWatcher.getValue">
      <summary>Retrieves the current value of the watched property or property chain, or null if the host object is null.</summary>
    </member>
    <member name="M:mx.binding.utils.ChangeWatcher.isWatching">
      <summary>Returns <code>true</code> if each watcher in the chain is attached to at least one change event.</summary>
    </member>
    <member name="M:mx.binding.utils.ChangeWatcher.reset(System.Object)">
      <summary>Resets this ChangeWatcher instance to use a new host object.</summary>
      <param name="newHost">The new host of the property. See the <code>watch()</code> method for more information.</param>
    </member>
    <member name="M:mx.binding.utils.ChangeWatcher.setHandler(Avm.Function)">
      <summary>Sets the handler function.</summary>
      <param name="handler">The handler function. This argument must not be null.</param>
    </member>
    <member name="M:mx.binding.utils.ChangeWatcher.unwatch">
      <summary>Detaches this ChangeWatcher instance, and its handler function, from the current host.</summary>
    </member>
    <member name="N:mx.collections" />
    <member name="T:mx.collections.ArrayCollection">
      <summary>The ArrayCollection class is a wrapper class that exposes an Array as a collection that can be accessed and manipulated using the methods and properties of the <code>ICollectionView</code> or <code>IList</code> interfaces.</summary>
    </member>
    <member name="P:mx.collections.ArrayCollection.source">
      <summary>The source of data in the ArrayCollection.</summary>
    </member>
    <member name="T:mx.collections.CursorBookmark">
      <summary>Encapsulates the positional aspects of a cursor in an <code>ICollectionView</code>.</summary>
    </member>
    <member name="M:mx.collections.CursorBookmark.#ctor(System.Object)">
      <summary>Creates a new instance of a bookmark with the specified value.</summary>
      <param name="value">The value of this bookmark.</param>
    </member>
    <member name="M:mx.collections.CursorBookmark.getViewIndex">
      <summary>Get the approximate index of the item represented by this bookmark in its view.</summary>
    </member>
    <member name="P:mx.collections.CursorBookmark.CURRENT">
      <summary>A bookmark representing the current item for the <code>IViewCursor</code> in an <code>ICollectionView</code>.</summary>
    </member>
    <member name="P:mx.collections.CursorBookmark.FIRST">
      <summary>A bookmark for the first item in an <code>ICollectionView</code>.</summary>
    </member>
    <member name="P:mx.collections.CursorBookmark.LAST">
      <summary>A bookmark for the last item in an <code>ICollectionView</code>.</summary>
    </member>
    <member name="P:mx.collections.CursorBookmark.value">
      <summary>The underlying marker representation of the bookmark.</summary>
    </member>
    <member name="N:mx.collections.errors" />
    <member name="T:mx.collections.errors.CollectionViewError">
      <summary>The <code>CollectionViewError</code> class represents general errors within a collection that are not related to specific activities such as Cursor seeking.</summary>
    </member>
    <member name="T:mx.collections.errors.CursorError">
      <summary>This error is thrown by a collection Cursor.</summary>
    </member>
    <member name="T:mx.collections.errors.ItemPendingError">
      <summary>This error is thrown when retrieving an item from a collection view requires an asynchronous call.</summary>
    </member>
    <member name="M:mx.collections.errors.ItemPendingError.addResponder(mx.rpc.IResponder)">
      <summary><code>addResponder</code> adds a responder to an Array of responders.</summary>
      <param name="responder">A handler which will be called when the asynchronous request completes.</param>
    </member>
    <member name="P:mx.collections.errors.ItemPendingError.responders">
      <summary>An array of IResponder handlers that will be called when the asynchronous request completes.</summary>
    </member>
    <member name="T:mx.collections.errors.SortError">
      <summary>This error is thrown when a Sort class is not configured properly; for example, if the find criteria are invalid.</summary>
    </member>
    <member name="T:mx.collections.ICollectionView">
      <summary>An <code>ICollectionView</code> is a view onto a collection of data.</summary>
    </member>
    <member name="E:mx.collections.ICollectionView.collectionChange">
      <summary>Dispatched when the ICollectionView has been updated in some way.</summary>
    </member>
    <member name="M:mx.collections.ICollectionView.contains(System.Object)">
      <summary>Returns whether the view contains the specified object.</summary>
      <param name="item">The object to look for.</param>
    </member>
    <member name="M:mx.collections.ICollectionView.createCursor">
      <summary>Creates a new IViewCursor that works with this view.</summary>
    </member>
    <member name="M:mx.collections.ICollectionView.disableAutoUpdate">
      <summary>Prevents changes to the collection itself and items within the collection from being dispatched by the view.</summary>
    </member>
    <member name="M:mx.collections.ICollectionView.enableAutoUpdate">
      <summary>Enables auto-updating.</summary>
    </member>
    <member name="M:mx.collections.ICollectionView.itemUpdated(System.Object,System.Object,System.Object,System.Object)">
      <summary>Notifies the view that an item has been updated.</summary>
      <param name="item">The item within the view that was updated.</param>
      <param name="property">The name of the property that was updated.</param>
      <param name="oldValue">The old value of that property. (If property was null, this can be the old value of the item.).</param>
      <param name="newValue">The new value of that property. (If property was null, there's no need to specify this as the item is assumed to be the new value.)</param>
    </member>
    <member name="M:mx.collections.ICollectionView.refresh">
      <summary>Applies the sort and filter to the view.</summary>
    </member>
    <member name="P:mx.collections.ICollectionView.filterFunction">
      <summary>A function that the view will use to eliminate items that do not match the function's criteria.</summary>
    </member>
    <member name="P:mx.collections.ICollectionView.length">
      <summary>The number of items in this view.</summary>
    </member>
    <member name="P:mx.collections.ICollectionView.sort">
      <summary>The Sort that will be applied to the ICollectionView.</summary>
    </member>
    <member name="T:mx.collections.IList">
      <summary>A collection of items organized in an ordinal fashion.</summary>
    </member>
    <member name="E:mx.collections.IList.collectionChange">
      <summary>Dispatched when the IList has been updated in some way.</summary>
    </member>
    <member name="M:mx.collections.IList.addItem(System.Object)">
      <summary>Adds the specified item to the end of the list.</summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:mx.collections.IList.addItemAt(System.Object,System.Int32)">
      <summary>Adds the item at the specified index.</summary>
      <param name="item">The item to place at the index.</param>
      <param name="index">The index at which to place the item.</param>
    </member>
    <member name="M:mx.collections.IList.getItemAt(System.Int32,System.Int32)">
      <summary>Gets the item at the specified index.</summary>
      <param name="index">The index in the list from which to retrieve the item.</param>
      <param name="prefetch">An <code>int</code> indicating both the direction and number of items to fetch during the request if the item is not local.</param>
    </member>
    <member name="M:mx.collections.IList.getItemIndex(System.Object)">
      <summary>Returns the index of the item if it is in the list such that getItemAt(index) == item.</summary>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:mx.collections.IList.itemUpdated(System.Object,System.Object,System.Object,System.Object)">
      <summary>Notifies the view that an item has been updated.</summary>
      <param name="item">The item within the view that was updated.</param>
      <param name="property">The name of the property that was updated.</param>
      <param name="oldValue">The old value of that property. (If property was null, this can be the old value of the item.)</param>
      <param name="newValue">The new value of that property. (If property was null, there's no need to specify this as the item is assumed to be the new value.)</param>
    </member>
    <member name="M:mx.collections.IList.removeAll">
      <summary>Removes all items from the list.</summary>
    </member>
    <member name="M:mx.collections.IList.removeItemAt(System.Int32)">
      <summary>Removes the item at the specified index and returns it.</summary>
      <param name="index">The index from which to remove the item.</param>
    </member>
    <member name="M:mx.collections.IList.setItemAt(System.Object,System.Int32)">
      <summary>Places the item at the specified index.</summary>
      <param name="item">The new item to be placed at the specified index.</param>
      <param name="index">The index at which to place the item.</param>
    </member>
    <member name="M:mx.collections.IList.toArray">
      <summary>Returns an Array that is populated in the same order as the IList implementation.</summary>
    </member>
    <member name="P:mx.collections.IList.length">
      <summary>The number of items in this collection.</summary>
    </member>
    <member name="T:mx.collections.ItemResponder">
      <summary>The ItemResponder class provides a default implementation of the <code>mx.rpc.IResponder</code> interface.</summary>
    </member>
    <member name="M:mx.collections.ItemResponder.fault(System.Object)">
      <summary>This method is called by a service when an error has been received.</summary>
      <param name="info">Object containing the information about the error that occured.</param>
    </member>
    <member name="M:mx.collections.ItemResponder.result(System.Object)">
      <summary>This method is called by a service when the return value has been received.</summary>
      <param name="data">Object containing the information returned from the request.</param>
    </member>
    <member name="T:mx.collections.IViewCursor">
      <summary>Defines the interface for enumerating a collection view bi-directionally.</summary>
    </member>
    <member name="E:mx.collections.IViewCursor.cursorUpdate">
      <summary>Dispatched whenever the cursor position is updated.</summary>
    </member>
    <member name="M:mx.collections.IViewCursor.findAny(System.Object)">
      <summary>Finds an item with the specified properties within the collection and positions the cursor to that item.</summary>
      <param name="values" />
    </member>
    <member name="M:mx.collections.IViewCursor.findFirst(System.Object)">
      <summary>Finds the first item with the specified properties within the collection and positions the cursor to that item.</summary>
      <param name="values" />
    </member>
    <member name="M:mx.collections.IViewCursor.findLast(System.Object)">
      <summary>Finds the last item with the specified properties within the collection and positions the cursor on that item.</summary>
      <param name="values" />
    </member>
    <member name="M:mx.collections.IViewCursor.insert(System.Object)">
      <summary>Inserts the specified item before the cursor's current position.</summary>
      <param name="item" />
    </member>
    <member name="M:mx.collections.IViewCursor.moveNext">
      <summary>Moves the cursor to the next item within the collection.</summary>
    </member>
    <member name="M:mx.collections.IViewCursor.movePrevious">
      <summary>Moves the cursor to the previous item within the collection.</summary>
    </member>
    <member name="M:mx.collections.IViewCursor.remove">
      <summary>Removes the current item and returns it.</summary>
    </member>
    <member name="M:mx.collections.IViewCursor.seek(mx.collections.CursorBookmark,System.Int32,System.Int32)">
      <summary>Moves the cursor to a location at an offset from the specified bookmark.</summary>
      <param name="bookmark"><code>CursorBookmark</code> reference to marker information that allows repositioning to a specific location. You can set this parameter to value returned from the <code>bookmark</code> property, or to one of the following constant bookmark values: <ul> <li><code>CursorBookmark.FIRST</code> - Seek from the start (first element) of the collection</li> <li><code>CursorBookmark.CURRENT</code> - Seek from the current position in the collection</li> <li><code>CursorBookmark.LAST</code> - Seek from the end (last element) of the collection</li> </ul></param>
      <param name="offset">Indicates how far from the specified bookmark to seek. If the specified number is negative, the cursor attempts to move prior to the specified bookmark. If the offset specified is beyond the end of the collection, the cursor is be positioned off the end, to the <code>beforeFirst</code> or <code>afterLast</code> location.</param>
      <param name="prefetch">Used for remote data. Indicates an intent to iterate in a specific direction once the seek operation completes. This reduces the number of required network round trips during a seek. If the iteration direction is known at the time of the request, the appropriate amount of data can be returned ahead of the request to iterate it.</param>
    </member>
    <member name="P:mx.collections.IViewCursor.afterLast">
      <summary>If the cursor is located after the last item in the view, this property is <code>true</code> .</summary>
    </member>
    <member name="P:mx.collections.IViewCursor.beforeFirst">
      <summary>If the cursor is located before the first item in the view, this property is <code>true</code>.</summary>
    </member>
    <member name="P:mx.collections.IViewCursor.bookmark">
      <summary>Provides access to a bookmark that corresponds to the item returned by the <code>current</code> property.</summary>
    </member>
    <member name="P:mx.collections.IViewCursor.current">
      <summary>Provides access the object at the location in the source collection referenced by this cursor.</summary>
    </member>
    <member name="P:mx.collections.IViewCursor.view">
      <summary>A reference to the ICollectionView with which this cursor is associated.</summary>
    </member>
    <member name="T:mx.collections.ListCollectionView">
      <summary>The ListCollectionView class adds the properties and methods of the <code>ICollectionView</code> interface to an object that conforms to the <code>IList</code> interface.</summary>
    </member>
    <member name="E:mx.collections.ListCollectionView.collectionChange">
      <summary>Dispatched when the ICollectionView has been updated in some way.</summary>
    </member>
    <member name="M:mx.collections.ListCollectionView.#ctor(mx.collections.IList)">
      <summary>The ListCollectionView constructor.</summary>
      <param name="list">the IList this ListCollectionView is meant to wrap.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.addEventListener(Avm.String,Avm.Function,System.Boolean,System.Int32,System.Boolean)">
      <summary />
      <param name="type" />
      <param name="listener" />
      <param name="useCapture" />
      <param name="priority" />
      <param name="useWeakReference" />
    </member>
    <member name="M:mx.collections.ListCollectionView.addItem(System.Object)">
      <summary>Adds the specified item to the end of the list.</summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.addItemAt(System.Object,System.Int32)">
      <summary>Adds the item at the specified index.</summary>
      <param name="item">The item to place at the index.</param>
      <param name="index">The index at which to place the item.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.contains(System.Object)">
      <summary>Returns whether the view contains the specified object.</summary>
      <param name="item">The object to look for.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.createCursor">
      <summary>Creates a new IViewCursor that works with this view.</summary>
    </member>
    <member name="M:mx.collections.ListCollectionView.disableAutoUpdate">
      <summary>Prevents changes to the collection itself and items within the collection from being dispatched by the view.</summary>
    </member>
    <member name="M:mx.collections.ListCollectionView.dispatchEvent(flash.events.Event)">
      <summary />
      <param name="event" />
    </member>
    <member name="M:mx.collections.ListCollectionView.enableAutoUpdate">
      <summary>Enables auto-updating.</summary>
    </member>
    <member name="M:mx.collections.ListCollectionView.getItemAt(System.Int32,System.Int32)">
      <summary>Gets the item at the specified index.</summary>
      <param name="index">The index in the list from which to retrieve the item.</param>
      <param name="prefetch">An <code>int</code> indicating both the direction and number of items to fetch during the request if the item is not local.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.getItemIndex(System.Object)">
      <summary>Returns the index of the item if it is in the list such that getItemAt(index) == item.</summary>
      <param name="item">The item to find.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.hasEventListener(Avm.String)">
      <summary />
      <param name="type" />
    </member>
    <member name="M:mx.collections.ListCollectionView.initialized(System.Object,Avm.String)">
      <summary>Called automatically by the MXML compiler when the ListCollectionView is created using an MXML tag.</summary>
      <param name="document">The MXML document containing this ListCollectionView.</param>
      <param name="id">Ignored.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.itemUpdated(System.Object,System.Object,System.Object,System.Object)">
      <summary>Notifies the view that an item has been updated.</summary>
      <param name="item">The item within the view that was updated.</param>
      <param name="property">The name of the property that was updated.</param>
      <param name="oldValue">The old value of that property. (If property was null, this can be the old value of the item.)</param>
      <param name="newValue">The new value of that property. (If property was null, there's no need to specify this as the item is assumed to be the new value.)</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.refresh">
      <summary>Applies the sort and filter to the view.</summary>
    </member>
    <member name="M:mx.collections.ListCollectionView.removeAll">
      <summary>Remove all items from the list.</summary>
    </member>
    <member name="M:mx.collections.ListCollectionView.removeEventListener(Avm.String,Avm.Function,System.Boolean)">
      <summary />
      <param name="type" />
      <param name="listener" />
      <param name="useCapture" />
    </member>
    <member name="M:mx.collections.ListCollectionView.removeItemAt(System.Int32)">
      <summary>Removes the item at the specified index and returns it.</summary>
      <param name="index">The index from which to remove the item.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.setItemAt(System.Object,System.Int32)">
      <summary>Places the item at the specified index.</summary>
      <param name="item">The new item to be placed at the specified index.</param>
      <param name="index">The index at which to place the item.</param>
    </member>
    <member name="M:mx.collections.ListCollectionView.toArray">
      <summary>Returns an Array that is populated in the same order as the IList implementation.</summary>
    </member>
    <member name="M:mx.collections.ListCollectionView.toString">
      <summary>Pretty prints the contents of this view to a string and returns it.</summary>
    </member>
    <member name="M:mx.collections.ListCollectionView.willTrigger(Avm.String)">
      <summary />
      <param name="type" />
    </member>
    <member name="F:mx.collections.ListCollectionView.localIndex">
      <summary>When the view is sorted or filtered the <code>localIndex</code> property contains an array of items in the sorted or filtered (ordered, reduced) view, in the sorted order.</summary>
    </member>
    <member name="P:mx.collections.ListCollectionView.filterFunction">
      <summary>A function that the view will use to eliminate items that do not match the function's criteria.</summary>
    </member>
    <member name="P:mx.collections.ListCollectionView.length">
      <summary>The number of items in this collection.</summary>
    </member>
    <member name="P:mx.collections.ListCollectionView.list">
      <summary>The IList that this collection view wraps.</summary>
    </member>
    <member name="P:mx.collections.ListCollectionView.sort">
      <summary>The Sort that will be applied to the ICollectionView.</summary>
    </member>
    <member name="T:mx.collections.Sort">
      <summary>Provides the sorting information required to establish a sort on an existing view (ICollectionView interface or class that implements the interface).</summary>
    </member>
    <member name="M:mx.collections.Sort.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.collections.Sort.findItem(Avm.Array,System.Object,Avm.String,System.Boolean,Avm.Function)">
      <summary>Finds the specified object within the specified array (or the insertion point if asked for), returning the index if found or -1 if not.</summary>
      <param name="items">the Array within which to search.</param>
      <param name="values">Object containing the properties to look for (or the object to search for, itself). The object must consist of field name/value pairs, where the field names are names of fields specified by the <code>SortFields</code> property, in the same order they are used in that property. You do not have to specify all of the fields from the <code>SortFields</code> property, but you cannot skip any in the order. Therefore, if the <code>SortFields</code> properity lists three fields, you can specify its first and second fields in this parameter, but you cannot specify only the first and third fields.</param>
      <param name="mode">String containing the type of find to perform. Valid values are <ul> <li>ANY_INDEX_MODE</li> Return any position that is valid for the values. <li>FIRST_INDEX_MODE</li> Return the position where the first occurrance of the values is found. <li>LAST_INDEX_MODE</li> Return the position where the last ocurrance of the specified values is found. </ul></param>
      <param name="returnInsertionIndex">If the method does not find an item identified by the <code>values</code> parameter, and this parameter is <code>true</code> the <code>findItem()</code> method returns the insertion point for the values, that is the point in the sorted order where you should insert the item.</param>
      <param name="compareFunction">a comparator function to use to find the item.  If you do not specify this parameter, the function uses the function determined by the Sort instance's <code>compareFunction</code> property, passing in the array of fields determined by the values object and the current SortFields.</param>
    </member>
    <member name="M:mx.collections.Sort.propertyAffectsSort(Avm.String)">
      <summary>Return whether the specified property is used to control the sort.</summary>
      <param name="property">The name of the field that to test.</param>
    </member>
    <member name="M:mx.collections.Sort.reverse">
      <summary>Goes through all SortFields and calls reverse() on them.</summary>
    </member>
    <member name="M:mx.collections.Sort.sort(Avm.Array)">
      <summary>Apply the current sort to the specified array (not a copy).</summary>
      <param name="items">Array of items to sort.</param>
    </member>
    <member name="F:mx.collections.Sort.FIRST_INDEX_MODE">
      <summary>When executing a find return the index for the first matching item.</summary>
    </member>
    <member name="F:mx.collections.Sort.LAST_INDEX_MODE">
      <summary>When executing a find return the index for the last matching item.</summary>
    </member>
    <member name="P:mx.collections.Sort.compareFunction">
      <summary>The method used to compare items when sorting.</summary>
    </member>
    <member name="P:mx.collections.Sort.fields">
      <summary>An Array of SortField objects that specifies the fields to compare.</summary>
    </member>
    <member name="P:mx.collections.Sort.unique">
      <summary>Indicates if the sort should be unique.</summary>
    </member>
    <member name="T:mx.collections.SortField">
      <summary>Provides the sorting information required to establish a sort on a field or property in an existing view.</summary>
    </member>
    <member name="M:mx.collections.SortField.reverse">
      <summary>Reverse the criteria for this sort field.</summary>
    </member>
    <member name="P:mx.collections.SortField.caseInsensitive">
      <summary>Specifies whether the sort for this field should be case insensitive.</summary>
    </member>
    <member name="P:mx.collections.SortField.compareFunction">
      <summary>The function that compares two items during a sort of items for the associated collection.</summary>
    </member>
    <member name="P:mx.collections.SortField.descending">
      <summary>Specifies whether the this field should be sorted in descending order.</summary>
    </member>
    <member name="P:mx.collections.SortField.name">
      <summary>The name of the field to be sorted.</summary>
    </member>
    <member name="P:mx.collections.SortField.numeric">
      <summary>Specifies that if the field being sorted contains numeric (number/int/uint) values, or string representations of numeric values, the comparitor use a numeric comparison.</summary>
    </member>
    <member name="T:mx.collections.XMLListCollection">
      <summary>The XMLListCollection class provides collection functionality to an XMLList object and makes available some of the methods of the native XMLList class.</summary>
    </member>
    <member name="M:mx.collections.XMLListCollection.attribute(System.Object)">
      <summary>Calls the <code>attribute()</code> method of each XML object in the XMLList and returns an XMLList of the results, which match the given <code>attributeName</code>.</summary>
      <param name="attributeName">The attribute that you want to match in the XML objects of the XMLList.</param>
    </member>
    <member name="M:mx.collections.XMLListCollection.attributes">
      <summary>Calls the <code>attributes()</code> method of each XML object in the XMLList object and returns an XMList of attributes for each XML object.</summary>
    </member>
    <member name="M:mx.collections.XMLListCollection.child(System.Object)">
      <summary>Calls the <code>child()</code> method of each XML object in the XMLList and returns an XMLList containing the children of with the specified property name, in order.</summary>
      <param name="propertyName">The propery to match.</param>
    </member>
    <member name="M:mx.collections.XMLListCollection.children">
      <summary>Calls the children() method of each XML object in the XMLList and returns an XMLList containing the results.</summary>
    </member>
    <member name="M:mx.collections.XMLListCollection.copy">
      <summary>Returns a deep copy of the XMLList object.</summary>
    </member>
    <member name="M:mx.collections.XMLListCollection.descendants(System.Object)">
      <summary>Calls the <code>descendants()</code> method of each XML object in the XMLList and returns an XMLList containing the results.</summary>
      <param name="name">The name of the elements to match.</param>
    </member>
    <member name="M:mx.collections.XMLListCollection.elements(Avm.String)">
      <summary>Calls the <code>elements()</code> method of each XML object in the XMLList.</summary>
      <param name="name">The name of the elements to match.</param>
    </member>
    <member name="M:mx.collections.XMLListCollection.text">
      <summary>Calls the <code>text()</code> method of each XML object in the XMLList and returns an XMLList containing the results.</summary>
    </member>
    <member name="M:mx.collections.XMLListCollection.toString">
      <summary>Returns a string representation of the XMLList by calling the <code>toString()</code> method for each XML object in the XMLList.</summary>
    </member>
    <member name="M:mx.collections.XMLListCollection.toXMLString">
      <summary>Returns a string representation of the XMLList by calling the <code>toXMLString()</code> method for each XML object in the XMLList.</summary>
    </member>
    <member name="P:mx.collections.XMLListCollection.source">
      <summary>The underlying XMLList for this collection.</summary>
    </member>
    <member name="N:mx.containers" />
    <member name="T:mx.containers.Accordion">
      <summary>An Accordion navigator container has a collection of child containers, but only one of them at a time is visible.</summary>
    </member>
    <member name="E:mx.containers.Accordion.change">
      <summary>Dispatched when the selected child container changes.</summary>
    </member>
    <member name="M:mx.containers.Accordion.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.containers.Accordion.getHeaderAt(System.Int32)">
      <summary>Returns a reference to the navigator button for a child container.</summary>
      <param name="index">Zero-based index of the child.</param>
    </member>
    <member name="M:mx.containers.Accordion.loadState(System.Object)">
      <summary />
      <param name="state" />
    </member>
    <member name="M:mx.containers.Accordion.saveState">
      <summary />
    </member>
    <member name="P:mx.containers.Accordion.contentHeight">
      <summary>The height of the area, in pixels, in which content is displayed.</summary>
    </member>
    <member name="P:mx.containers.Accordion.contentWidth">
      <summary>The width of the area, in pixels, in which content is displayed.</summary>
    </member>
    <member name="P:mx.containers.Accordion.headerRenderer">
      <summary>A factory used to create the navigation buttons for each child.</summary>
    </member>
    <member name="P:mx.containers.Accordion.historyManagementEnabled">
      <summary>If set to <code>true</code>, this property enables history management within this Accordion container.</summary>
    </member>
    <member name="P:mx.containers.Accordion.resizeToContent">
      <summary>If set to <code>true</code>, this Accordion automatically resizes to the size of its current child.</summary>
    </member>
    <member name="P:mx.containers.Accordion.selectedChild">
      <summary>A reference to the currently visible child container.</summary>
    </member>
    <member name="P:mx.containers.Accordion.selectedIndex">
      <summary>The zero-based index of the currently visible child container.</summary>
    </member>
    <member name="N:mx.containers.accordionClasses" />
    <member name="T:mx.containers.accordionClasses.AccordionHeader">
      <summary>The AccordionHeader class defines the appearance of the navigation buttons of an Accordion.</summary>
    </member>
    <member name="M:mx.containers.accordionClasses.AccordionHeader.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:mx.containers.accordionClasses.AccordionHeader.data">
      <summary>Stores a reference to the content associated with the header.</summary>
    </member>
    <member name="T:mx.containers.ApplicationControlBar">
      <summary>The ApplicationControlBar container holds components that provide global navigation and application commands.</summary>
    </member>
    <member name="M:mx.containers.ApplicationControlBar.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:mx.containers.ApplicationControlBar.dock">
      <summary>If <code>true</code>, specifies that the ApplicationControlBar should be docked to the top of the application.</summary>
    </member>
    <member name="T:mx.containers.Box">
      <summary>A Box container lays out its children in a single vertical column or a single horizontal row.</summary>
    </member>
    <member name="M:mx.containers.Box.measure">
      <summary>Calculates the default sizes and minimum and maximum values of the Box container.</summary>
    </member>
    <member name="M:mx.containers.Box.pixelsToPercent(System.Double)">
      <summary>Method used to convert number of pixels to a percentage relative to the contents of this container.</summary>
      <param name="pxl">The number of pixels for which a percentage value is desired.</param>
    </member>
    <member name="M:mx.containers.Box.updateDisplayList(System.Double,System.Double)">
      <summary>Sets the size and position of each child of the Box container.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="P:mx.containers.Box.direction">
      <summary>The direction in which this Box container lays out its children.</summary>
    </member>
    <member name="T:mx.containers.BoxDirection">
      <summary>The BoxDirection class specifies constant values for the <code>direction</code> property of the Box container.</summary>
    </member>
    <member name="F:mx.containers.BoxDirection.VERTICAL">
      <summary>Specifies that children of the Box container are laid out vertically.</summary>
    </member>
    <member name="T:mx.containers.Canvas">
      <summary>A Canvas layout container defines a rectangular region in which you place child containers and controls.</summary>
    </member>
    <member name="M:mx.containers.Canvas.measure">
      <summary>Calculates the preferred minimum and preferred maximum sizes of the Canvas.</summary>
    </member>
    <member name="M:mx.containers.Canvas.updateDisplayList(System.Double,System.Double)">
      <summary>Sets the size of each child of the container.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="P:mx.containers.Canvas.constraintColumns">
      <summary />
    </member>
    <member name="P:mx.containers.Canvas.constraintRows">
      <summary />
    </member>
    <member name="T:mx.containers.ControlBar">
      <summary>The ControlBar container lets you place controls at the bottom of a Panel or TitleWindow container.</summary>
    </member>
    <member name="T:mx.containers.DividedBox">
      <summary>A DividedBox container measures and lays out its children horizontally or vertically in exactly the same way as a Box container, but it inserts draggable dividers in the gaps between the children.</summary>
    </member>
    <member name="E:mx.containers.DividedBox.dividerRelease">
      <summary>Dispatched when the user releases a divider.</summary>
    </member>
    <member name="E:mx.containers.DividedBox.dividerPress">
      <summary>Dispatched when the user presses any divider in this container.</summary>
    </member>
    <member name="E:mx.containers.DividedBox.dividerDrag">
      <summary>Dispatched multiple times as the user drags any divider.</summary>
    </member>
    <member name="M:mx.containers.DividedBox.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.containers.DividedBox.getDividerAt(System.Int32)">
      <summary>Returns a reference to the specified BoxDivider object in this DividedBox container.</summary>
      <param name="i">Zero-based index of a divider, counting from the left for a horizontal DividedBox, or from the top for a vertical DividedBox.</param>
    </member>
    <member name="M:mx.containers.DividedBox.moveDivider(System.Int32,System.Double)">
      <summary>Move a specific divider a given number of pixels.</summary>
      <param name="i">Zero-based index of a divider, counting from the left for a horizontal DividedBox, or from the top for a vertical DividedBox.</param>
      <param name="amt">The number of pixels to move the divider. A negative number can be specified in order to move a divider up or left. The divider movement is constrained in the same manner as if a user had moved it.</param>
    </member>
    <member name="F:mx.containers.DividedBox.dividerClass">
      <summary>The class for the divider between the children.</summary>
    </member>
    <member name="F:mx.containers.DividedBox.liveDragging">
      <summary>If <code>true</code>, the children adjacent to a divider are continuously resized while the user drags it.</summary>
    </member>
    <member name="P:mx.containers.DividedBox.numDividers">
      <summary>The number of dividers.</summary>
    </member>
    <member name="P:mx.containers.DividedBox.resizeToContent">
      <summary>If <code>true</code>, the DividedBox automatically resizes to the size of its children.</summary>
    </member>
    <member name="N:mx.containers.dividedBoxClasses" />
    <member name="T:mx.containers.dividedBoxClasses.BoxDivider">
      <summary>The BoxDivider class represents the divider between children of a DividedBox container.</summary>
    </member>
    <member name="N:mx.containers.errors" />
    <member name="T:mx.containers.errors.ConstraintError">
      <summary>This error is thrown when a constraint expression is not configured properly; for example, if the GridColumn reference is invalid.</summary>
    </member>
    <member name="T:mx.containers.Form">
      <summary>The Form container lets you control the layout of a form, mark form fields as required or optional, handle error messages, and bind your form data to the Flex data model to perform data checking and validation.</summary>
    </member>
    <member name="M:mx.containers.Form.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.containers.Form.measure">
      <summary>Calculates the preferred, minimum and maximum sizes of the Form.</summary>
    </member>
    <member name="M:mx.containers.Form.updateDisplayList(System.Double,System.Double)">
      <summary>Responds to size changes by setting the positions and sizes of this container's children.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="P:mx.containers.Form.maxLabelWidth">
      <summary>The maximum width, in pixels, of the labels of the FormItems containers in this Form.</summary>
    </member>
    <member name="T:mx.containers.FormHeading">
      <summary>The FormHeading container is used to display a heading for a group of controls inside a Form container.</summary>
    </member>
    <member name="P:mx.containers.FormHeading.label">
      <summary>Form heading text.</summary>
    </member>
    <member name="T:mx.containers.FormItem">
      <summary>The FormItem container defines a label and one or more children arranged horizontally or vertically.</summary>
    </member>
    <member name="M:mx.containers.FormItem.measure">
      <summary>Calculates the preferred, minimum and maximum sizes of the FormItem.</summary>
    </member>
    <member name="M:mx.containers.FormItem.updateDisplayList(System.Double,System.Double)">
      <summary>Responds to size changes by setting the positions and sizes of this container's children.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="P:mx.containers.FormItem.direction">
      <summary>Direction of the FormItem subcomponents.</summary>
    </member>
    <member name="P:mx.containers.FormItem.itemLabel">
      <summary>A read-only reference to the FormItemLabel subcomponent displaying the label of the FormItem.</summary>
    </member>
    <member name="P:mx.containers.FormItem.label">
      <summary>Text label for the FormItem.</summary>
    </member>
    <member name="P:mx.containers.FormItem.required">
      <summary>If <code>true</code>, display an indicator that the FormItem children require user input.</summary>
    </member>
    <member name="T:mx.containers.FormItemDirection">
      <summary>The FormItemDirection class defines the constant values for the <code>direction</code> property of the FormItem class.</summary>
    </member>
    <member name="F:mx.containers.FormItemDirection.VERTICAL">
      <summary>Specifies that the children of the FormItem container are laid out vertically.</summary>
    </member>
    <member name="T:mx.containers.Grid">
      <summary>A Grid container lets you arrange children as rows and columns of cells, similar to an HTML table.</summary>
    </member>
    <member name="M:mx.containers.Grid.measure">
      <summary>Calculates the preferred, minimum, and maximum sizes of the Grid.</summary>
    </member>
    <member name="M:mx.containers.Grid.updateDisplayList(System.Double,System.Double)">
      <summary>Sets the size and position of each child of the Grid.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="T:mx.containers.GridItem">
      <summary>The GridItem container defines a grid cell in GridRow container.</summary>
    </member>
    <member name="P:mx.containers.GridItem.colSpan">
      <summary>Number of columns of the Grid container spanned by the cell.</summary>
    </member>
    <member name="P:mx.containers.GridItem.rowSpan">
      <summary>Number of rows of the Grid container spanned by the cell.</summary>
    </member>
    <member name="T:mx.containers.GridRow">
      <summary>The GridRow container defines a row in a Grid container, and contains GridCell containers.</summary>
    </member>
    <member name="M:mx.containers.GridRow.updateDisplayList(System.Double,System.Double)">
      <summary>Sets the size and position of each child of the GridRow container.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="T:mx.containers.HBox">
      <summary>The HBox container lays out its children in a single horizontal row.</summary>
    </member>
    <member name="T:mx.containers.HDividedBox">
      <summary>The HDividedBox container lays out its children horizontally in the same way as HBox container, but it inserts a draggable divider in the gap between each child.</summary>
    </member>
    <member name="T:mx.containers.Panel">
      <summary>A Panel container consists of a title bar, a caption, a border, and a  content area for its children.</summary>
    </member>
    <member name="M:mx.containers.Panel.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.containers.Panel.getHeaderHeight">
      <summary>Returns the height of the header.</summary>
    </member>
    <member name="M:mx.containers.Panel.measure">
      <summary>Calculates the default mininum and maximum sizes of the Panel container.</summary>
    </member>
    <member name="M:mx.containers.Panel.startDragging(flash.events.MouseEvent)">
      <summary>Called when the user starts dragging a Panel that has been popped up by the PopUpManager.</summary>
      <param name="event" />
    </member>
    <member name="M:mx.containers.Panel.stopDragging">
      <summary>Called when the user stops dragging a Panel that has been popped up by the PopUpManager.</summary>
    </member>
    <member name="F:mx.containers.Panel.controlBar">
      <summary>A reference to this Panel container's control bar, if any.</summary>
    </member>
    <member name="F:mx.containers.Panel.statusTextField">
      <summary>The UITextField sub-control that displays the status.</summary>
    </member>
    <member name="F:mx.containers.Panel.titleBar">
      <summary>The TitleBar sub-control that displays the Panel container's title bar.</summary>
    </member>
    <member name="F:mx.containers.Panel.titleTextField">
      <summary>The UITextField sub-control that displays the title.</summary>
    </member>
    <member name="P:mx.containers.Panel.closeButtonStyleFilters">
      <summary>The set of styles to pass from the Panel to the close button.</summary>
    </member>
    <member name="P:mx.containers.Panel.constraintColumns">
      <summary />
    </member>
    <member name="P:mx.containers.Panel.constraintRows">
      <summary />
    </member>
    <member name="P:mx.containers.Panel.fontContext">
      <summary>The module factory that provides the font context for this component.</summary>
    </member>
    <member name="P:mx.containers.Panel.layout">
      <summary>Specifies the layout mechanism used for this container.</summary>
    </member>
    <member name="P:mx.containers.Panel.status">
      <summary>Text in the status area of the title bar.</summary>
    </member>
    <member name="P:mx.containers.Panel.title">
      <summary>Title or caption displayed in the title bar.</summary>
    </member>
    <member name="P:mx.containers.Panel.titleIcon">
      <summary>The icon displayed in the title bar.</summary>
    </member>
    <member name="T:mx.containers.TabNavigator">
      <summary>The TabNavigator container extends the ViewStack container by including a TabBar container for navigating between its child containers.</summary>
    </member>
    <member name="M:mx.containers.TabNavigator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.containers.TabNavigator.getTabAt(System.Int32)">
      <summary>Returns the tab of the navigator's TabBar control at the specified index.</summary>
      <param name="index">Index in the navigator's TabBar control.</param>
    </member>
    <member name="M:mx.containers.TabNavigator.measure">
      <summary>Calculates the default sizes and mininum and maximum values of this TabNavigator container.</summary>
    </member>
    <member name="M:mx.containers.TabNavigator.updateDisplayList(System.Double,System.Double)">
      <summary>Responds to size changes by setting the positions and sizes of this container's tabs and children.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="F:mx.containers.TabNavigator.tabBar">
      <summary>A reference to the TabBar inside this TabNavigator.</summary>
    </member>
    <member name="P:mx.containers.TabNavigator.tabBarStyleFilters">
      <summary>The set of styles to pass from the TabNavigator to the tabBar.</summary>
    </member>
    <member name="T:mx.containers.Tile">
      <summary>A Tile container lays out its children in a grid of equal-sized cells.</summary>
    </member>
    <member name="M:mx.containers.Tile.measure">
      <summary>Calculates the default minimum and maximum sizes of the Tile container.</summary>
    </member>
    <member name="M:mx.containers.Tile.updateDisplayList(System.Double,System.Double)">
      <summary>Sets the positions and sizes of this container's children.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="P:mx.containers.Tile.direction">
      <summary>Determines how children are placed in the container.</summary>
    </member>
    <member name="P:mx.containers.Tile.tileHeight">
      <summary>Height of each tile cell, in pixels.</summary>
    </member>
    <member name="P:mx.containers.Tile.tileWidth">
      <summary>Width of each tile cell, in pixels.</summary>
    </member>
    <member name="T:mx.containers.TileDirection">
      <summary>The TileDirection class defines the constant values for the <code>direction</code> property of the Tile container.</summary>
    </member>
    <member name="F:mx.containers.TileDirection.VERTICAL">
      <summary>Specifies that the children of the Tile container are laid out vertically; that is, starting with the first column.</summary>
    </member>
    <member name="T:mx.containers.TitleWindow">
      <summary>A TitleWindow layout container contains a title bar, a caption, a border, and a content area for its child.</summary>
    </member>
    <member name="E:mx.containers.TitleWindow.close">
      <summary>Dispatched when the user selects the close button.</summary>
    </member>
    <member name="M:mx.containers.TitleWindow.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:mx.containers.TitleWindow.showCloseButton">
      <summary>Whether to display a Close button in the TitleWindow container.</summary>
    </member>
    <member name="N:mx.containers.utilityClasses" />
    <member name="T:mx.containers.utilityClasses.ConstraintColumn">
      <summary>The ConstraintColumn class partitions an absolutely positioned container in the vertical plane.</summary>
    </member>
    <member name="M:mx.containers.utilityClasses.ConstraintColumn.initialized(System.Object,Avm.String)">
      <summary>Called automatically by the MXML compiler when the ConstraintColumn instance is created using an MXML tag.</summary>
      <param name="document">The MXML document containing this ConstraintColumn.</param>
      <param name="id">Ignored.</param>
    </member>
    <member name="M:mx.containers.utilityClasses.ConstraintColumn.setActualWidth(System.Double)">
      <summary>Sizes the constraint column.</summary>
      <param name="w">Width of constaint column computed during parent container processing.</param>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintColumn.explicitWidth">
      <summary>Number that specifies the explicit width of the ConstraintColumn instance, in pixels, in the ConstraintColumn instance's coordinates.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintColumn.id">
      <summary>ID of the ConstraintColumn instance.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintColumn.maxWidth">
      <summary>Number that specifies the maximum width of the ConstraintColumn instance, in pixels, in the ConstraintColumn instance's coordinates.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintColumn.minWidth">
      <summary>Number that specifies the minimum width of the ConstraintColumn instance, in pixels, in the ConstraintColumn instance's coordinates.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintColumn.percentWidth">
      <summary>Number that specifies the width of a component as a percentage of its parent container's size.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintColumn.width">
      <summary>Number that specifies the width of the ConstraintColumn instance, in pixels, in the parent container's coordinates.</summary>
    </member>
    <member name="T:mx.containers.utilityClasses.ConstraintRow">
      <summary>ConstraintRow class partitions an absolutely positioned container in the horizontal plane.</summary>
    </member>
    <member name="M:mx.containers.utilityClasses.ConstraintRow.initialized(System.Object,Avm.String)">
      <summary>Called automatically by the MXML compiler when the ConstraintRow instance is created using an MXML tag.</summary>
      <param name="document">The MXML document containing this ConstraintRow.</param>
      <param name="id">Ignored.</param>
    </member>
    <member name="M:mx.containers.utilityClasses.ConstraintRow.setActualHeight(System.Double)">
      <summary>Sizes the ConstraintRow</summary>
      <param name="h">Height of constaint row computed during parent container processing.</param>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintRow.explicitHeight">
      <summary>Number that specifies the explicit height of the ConstraintRow instance, in pixels, in the ConstraintRow instance's coordinates.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintRow.height">
      <summary>Number that specifies the height of the ConstraintRow instance, in pixels, in the parent's coordinates.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintRow.id">
      <summary>ID of the ConstraintRow instance.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintRow.maxHeight">
      <summary>Number that specifies the maximum height of the ConstraintRow instance, in pixels, in the ConstraintRow instance's coordinates.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintRow.minHeight">
      <summary>Number that specifies the minimum height of the ConstraintRow instance, in pixels, in the ConstraintRow instance's coordinates.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.ConstraintRow.percentHeight">
      <summary>Number that specifies the height of a component as a percentage of its parent's size.</summary>
    </member>
    <member name="T:mx.containers.utilityClasses.IConstraintLayout">
      <summary>IConstraintLayout is a marker interface that indicates that a container supports ConstraintColumn class and ConstraintRow class within its layout.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.IConstraintLayout.constraintColumns">
      <summary>An Array of ConstraintColumn instances that partition this container.</summary>
    </member>
    <member name="P:mx.containers.utilityClasses.IConstraintLayout.constraintRows">
      <summary>An Array of ConstraintRow instances that partition this container.</summary>
    </member>
    <member name="T:mx.containers.VBox">
      <summary>The VBox container lays out its children in a single vertical column.</summary>
    </member>
    <member name="T:mx.containers.VDividedBox">
      <summary>The VDividedBox container lays out its children vertically in the same way as the VBox container, but it inserts a draggable divider in the gap between each child.</summary>
    </member>
    <member name="T:mx.containers.ViewStack">
      <summary>A ViewStack navigator container consists of a collection of child containers stacked on top of each other, where only one child at a time is visible.</summary>
    </member>
    <member name="E:mx.containers.ViewStack.change">
      <summary>Dispatched when the selected child container changes.</summary>
    </member>
    <member name="M:mx.containers.ViewStack.commitSelectedIndex(System.Int32)">
      <summary>Commits the selected index.</summary>
      <param name="newIndex" />
    </member>
    <member name="M:mx.containers.ViewStack.loadState(System.Object)">
      <summary />
      <param name="state" />
    </member>
    <member name="M:mx.containers.ViewStack.measure">
      <summary>Calculates the default sizes and minimum and maximum values of the ViewStack container.</summary>
    </member>
    <member name="M:mx.containers.ViewStack.saveState">
      <summary />
    </member>
    <member name="M:mx.containers.ViewStack.updateDisplayList(System.Double,System.Double)">
      <summary>Responds to size changes by setting the positions and sizes of this container's children.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="P:mx.containers.ViewStack.contentHeight">
      <summary>The height of the area, in pixels, in which content is displayed.</summary>
    </member>
    <member name="P:mx.containers.ViewStack.contentWidth">
      <summary>The width of the area, in pixels, in which content is displayed.</summary>
    </member>
    <member name="P:mx.containers.ViewStack.contentX">
      <summary>The x coordinate of the area of the ViewStack container in which content is displayed, in pixels.</summary>
    </member>
    <member name="P:mx.containers.ViewStack.contentY">
      <summary>The y coordinate of the area of the ViewStack container in which content is displayed, in pixels.</summary>
    </member>
    <member name="P:mx.containers.ViewStack.historyManagementEnabled">
      <summary>If <code>true</code>, enables history management within this ViewStack container.</summary>
    </member>
    <member name="P:mx.containers.ViewStack.resizeToContent">
      <summary>If <code>true</code>, the ViewStack container automatically resizes to the size of its current child.</summary>
    </member>
    <member name="P:mx.containers.ViewStack.selectedChild">
      <summary>A reference to the currently visible child container.</summary>
    </member>
    <member name="P:mx.containers.ViewStack.selectedIndex">
      <summary>The zero-based index of the currently visible child container.</summary>
    </member>
    <member name="N:mx.controls" />
    <member name="T:mx.controls.Alert">
      <summary>The Alert control is a pop-up dialog box that can contain a message, a title, buttons (any combination of OK, Cancel, Yes, and No) and an icon.</summary>
    </member>
    <member name="M:mx.controls.Alert.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.Alert.show(Avm.String,Avm.String,System.UInt32,flash.display.Sprite,Avm.Function,Avm.Class,System.UInt32)">
      <summary>Static method that pops up the Alert control.</summary>
      <param name="text">Text string that appears in the Alert control. This text is centered in the alert dialog box.</param>
      <param name="title">Text string that appears in the title bar. This text is left justified.</param>
      <param name="flags">Which buttons to place in the Alert control. Valid values are <code>Alert.OK</code>, <code>Alert.CANCEL</code>, <code>Alert.YES</code>, and <code>Alert.NO</code>. The default value is <code>Alert.OK</code>. Use the bitwise OR operator to display more than one button. For example, passing <code>(Alert.YES | Alert.NO)</code> displays Yes and No buttons. Regardless of the order that you specify buttons, they always appear in the following order from left to right: OK, Yes, No, Cancel.</param>
      <param name="parent">Object upon which the Alert control centers itself.</param>
      <param name="closeHandler">Event handler that is called when any button on the Alert control is pressed. The event object passed to this handler is an instance of CloseEvent; the <code>detail</code> property of this object contains the value <code>Alert.OK</code>, <code>Alert.CANCEL</code>, <code>Alert.YES</code>, or <code>Alert.NO</code>.</param>
      <param name="iconClass">Class of the icon that is placed to the left of the text in the Alert control.</param>
      <param name="defaultButtonFlag">A bitflag that specifies the default button. You can specify one and only one of <code>Alert.OK</code>, <code>Alert.CANCEL</code>, <code>Alert.YES</code>, or <code>Alert.NO</code>. The default value is <code>Alert.OK</code>. Pressing the Enter key triggers the default button just as if you clicked it. Pressing Escape triggers the Cancel or No button just as if you selected it.</param>
    </member>
    <member name="F:mx.controls.Alert.CANCEL">
      <summary>Value that enables a Cancel button on the Alert control when passed as the <code>flags</code> parameter of the <code>show()</code> method.</summary>
    </member>
    <member name="F:mx.controls.Alert.NO">
      <summary>Value that enables a No button on the Alert control when passed as the <code>flags</code> parameter of the <code>show()</code> method.</summary>
    </member>
    <member name="F:mx.controls.Alert.NONMODAL">
      <summary>Value that makes an Alert nonmodal when passed as the <code>flags</code> parameter of the <code>show()</code> method.</summary>
    </member>
    <member name="F:mx.controls.Alert.OK">
      <summary>Value that enables an OK button on the Alert control when passed as the <code>flags</code> parameter of the <code>show()</code> method.</summary>
    </member>
    <member name="F:mx.controls.Alert.buttonFlags">
      <summary>A bitmask that contains <code>Alert.OK</code>, <code>Alert.CANCEL</code>, <code>Alert.YES</code>, and/or <code>Alert.NO</code> indicating the buttons available in the Alert control.</summary>
    </member>
    <member name="F:mx.controls.Alert.buttonHeight">
      <summary>Height of each Alert button, in pixels.</summary>
    </member>
    <member name="F:mx.controls.Alert.buttonWidth">
      <summary>Width of each Alert button, in pixels.</summary>
    </member>
    <member name="F:mx.controls.Alert.defaultButtonFlag">
      <summary>A bitflag that contains either <code>Alert.OK</code>, <code>Alert.CANCEL</code>, <code>Alert.YES</code>, or <code>Alert.NO</code> to specify the default button.</summary>
    </member>
    <member name="F:mx.controls.Alert.iconClass">
      <summary>The class of the icon to display.</summary>
    </member>
    <member name="F:mx.controls.Alert.text">
      <summary>The text to display in this alert dialog box.</summary>
    </member>
    <member name="P:mx.controls.Alert.cancelLabel">
      <summary>The label for the Cancel button.</summary>
    </member>
    <member name="P:mx.controls.Alert.noLabel">
      <summary>The label for the No button.</summary>
    </member>
    <member name="P:mx.controls.Alert.okLabel">
      <summary>The label for the OK button.</summary>
    </member>
    <member name="P:mx.controls.Alert.yesLabel">
      <summary>The label for the Yes button.</summary>
    </member>
    <member name="T:mx.controls.Button">
      <summary>The Button control is a commonly used rectangular button.</summary>
    </member>
    <member name="E:mx.controls.Button.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="E:mx.controls.Button.change">
      <summary>Dispatched when the <code>selected</code> property changes for a toggle Button control.</summary>
    </member>
    <member name="E:mx.controls.Button.buttonDown">
      <summary>Dispatched when the user presses the Button control.</summary>
    </member>
    <member name="M:mx.controls.Button.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.Button.clickHandler(flash.events.MouseEvent)">
      <summary>The default handler for the <code>MouseEvent.CLICK</code> event.</summary>
      <param name="event">event object.</param>
    </member>
    <member name="M:mx.controls.Button.mouseDownHandler(flash.events.MouseEvent)">
      <summary>The default handler for the <code>MouseEvent.MOUSE_DOWN</code> event.</summary>
      <param name="event">event object.</param>
    </member>
    <member name="M:mx.controls.Button.mouseUpHandler(flash.events.MouseEvent)">
      <summary>The default handler for the <code>MouseEvent.MOUSE_UP</code> event.</summary>
      <param name="event">event object.</param>
    </member>
    <member name="M:mx.controls.Button.rollOutHandler(flash.events.MouseEvent)">
      <summary>The default handler for the <code>MouseEvent.ROLL_OUT</code> event.</summary>
      <param name="event">event object.</param>
    </member>
    <member name="M:mx.controls.Button.rollOverHandler(flash.events.MouseEvent)">
      <summary>The default handler for the <code>MouseEvent.ROLL_OVER</code> event.</summary>
      <param name="event">event object.</param>
    </member>
    <member name="F:mx.controls.Button.selectedField">
      <summary>The name of the field in the <code>data</code> property which specifies the value of the Button control's <code>selected</code> property.</summary>
    </member>
    <member name="F:mx.controls.Button.stickyHighlighting">
      <summary>If <code>false</code>, the Button displays its down skin when the user presses it but changes to its over skin when the user drags the mouse off of it.</summary>
    </member>
    <member name="F:mx.controls.Button.textField">
      <summary>The internal UITextField object that renders the label of this Button.</summary>
    </member>
    <member name="P:mx.controls.Button.autoRepeat">
      <summary>Specifies whether to dispatch repeated <code>buttonDown</code> events if the user holds down the mouse button.</summary>
    </member>
    <member name="P:mx.controls.Button.data">
      <summary>The <code>data</code> property lets you pass a value to the component when you use it as an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.Button.emphasized">
      <summary>Draws a thick border around the Button control when the control is in its up state if <code>emphasized</code> is set to <code>true</code>.</summary>
    </member>
    <member name="P:mx.controls.Button.fontContext">
      <summary>The module factory that provides the font context for this component.</summary>
    </member>
    <member name="P:mx.controls.Button.label">
      <summary>Text to appear on the Button control.</summary>
    </member>
    <member name="P:mx.controls.Button.labelPlacement">
      <summary>Orientation of the label in relation to a specified icon.</summary>
    </member>
    <member name="P:mx.controls.Button.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the list control.</summary>
    </member>
    <member name="P:mx.controls.Button.selected">
      <summary>Indicates whether a toggle button is toggled on (<code>true</code>) or off (<code>false</code>).</summary>
    </member>
    <member name="P:mx.controls.Button.toggle">
      <summary>Controls whether a Button is in a toggle state or not.</summary>
    </member>
    <member name="T:mx.controls.ButtonBar">
      <summary>The ButtonBar control defines a horizontal or vertical group of logically related push buttons with a common look and navigation.</summary>
    </member>
    <member name="E:mx.controls.ButtonBar.itemClick">
      <summary>Dispatched when a user clicks a button.</summary>
    </member>
    <member name="T:mx.controls.ButtonLabelPlacement">
      <summary>The ButtonLabelPlacement class defines the constants for the allowed values of the <code>labelPlacement</code> property of a Button, CheckBox, LinkButton, or RadioButton control.</summary>
    </member>
    <member name="F:mx.controls.ButtonLabelPlacement.LEFT">
      <summary>Specifies that the label appears to the left of the icon.</summary>
    </member>
    <member name="F:mx.controls.ButtonLabelPlacement.RIGHT">
      <summary>Specifies that the label appears to the right of the icon.</summary>
    </member>
    <member name="F:mx.controls.ButtonLabelPlacement.TOP">
      <summary>Specifies that the label appears above the icon.</summary>
    </member>
    <member name="T:mx.controls.CheckBox">
      <summary>The CheckBox control consists of an optional label and a small box that can contain a check mark or not.</summary>
    </member>
    <member name="M:mx.controls.CheckBox.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.controls.ColorPicker">
      <summary>The ColorPicker control provides a way for a user to choose a color from a swatch list.</summary>
    </member>
    <member name="E:mx.controls.ColorPicker.open">
      <summary>Dispatched when the color swatch panel opens.</summary>
    </member>
    <member name="E:mx.controls.ColorPicker.itemRollOver">
      <summary>Dispatched when the user rolls the mouse over a swatch in the SwatchPanel object.</summary>
    </member>
    <member name="E:mx.controls.ColorPicker.itemRollOut">
      <summary>Dispatched when the user rolls the mouse out of a swatch in the SwatchPanel object.</summary>
    </member>
    <member name="E:mx.controls.ColorPicker.enter">
      <summary>Dispatched if the ColorPicker <code>editable</code> property is set to <code>true</code> and the user presses Enter after typing in a hexadecimal color value.</summary>
    </member>
    <member name="E:mx.controls.ColorPicker.close">
      <summary>Dispatched when the swatch panel closes.</summary>
    </member>
    <member name="E:mx.controls.ColorPicker.change">
      <summary>Dispatched when the selected color changes as a result of user interaction.</summary>
    </member>
    <member name="M:mx.controls.ColorPicker.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.ColorPicker.close(flash.events.Event)">
      <summary>Hides the drop-down SwatchPanel object.</summary>
      <param name="trigger" />
    </member>
    <member name="M:mx.controls.ColorPicker.open">
      <summary>Displays the drop-down SwatchPanel object that shows colors that users can select.</summary>
    </member>
    <member name="P:mx.controls.ColorPicker.colorField">
      <summary>Name of the field in the objects of the dataProvider Array that specifies the hexadecimal values of the colors that the swatch panel displays.</summary>
    </member>
    <member name="P:mx.controls.ColorPicker.labelField">
      <summary>Name of the field in the objects of the dataProvider Array that contain text to display as the label in the SwatchPanel object text box.</summary>
    </member>
    <member name="P:mx.controls.ColorPicker.selectedColor">
      <summary>The value of the currently selected color in the SwatchPanel object.</summary>
    </member>
    <member name="P:mx.controls.ColorPicker.showTextField">
      <summary>Specifies whether to show the text box that displays the color label or hexadecimal color value.</summary>
    </member>
    <member name="P:mx.controls.ColorPicker.swatchStyleFilters">
      <summary>Set of styles to pass from the ColorPicker through to the preview swatch.</summary>
    </member>
    <member name="P:mx.controls.ColorPicker.selectedIndex">
      <summary>Index in the dataProvider of the selected item in the SwatchPanel object.</summary>
    </member>
    <member name="T:mx.controls.ComboBase">
      <summary>The ComboBase class is the base class for controls that display text in a text field and have a button that causes a drop-down list to appear where the user can choose which text to display.</summary>
    </member>
    <member name="M:mx.controls.ComboBase.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.ComboBase.calculatePreferredSizeFromData(System.Int32)">
      <summary>Determines default values of the height and width to use for the entries in the drop-down list.</summary>
      <param name="numItems">The number of items to check to determine the size</param>
    </member>
    <member name="M:mx.controls.ComboBase.collectionChangeHandler(flash.events.Event)">
      <summary>Responds to changes to the data provider.</summary>
      <param name="event">The CollectionEvent dispatched from the collection</param>
    </member>
    <member name="M:mx.controls.ComboBase.downArrowButton_buttonDownHandler(mx.events.FlexEvent)">
      <summary>Performs some action when the drop-down button is pressed.</summary>
      <param name="event" />
    </member>
    <member name="M:mx.controls.ComboBase.itemToUID(System.Object)">
      <summary>Determines the UID for a dataProvider item.</summary>
      <param name="data">A dataProvider item</param>
    </member>
    <member name="M:mx.controls.ComboBase.measure">
      <summary>Determines the <code>measuredWidth</code> and <code>measuredHeight</code> properties of the control.</summary>
    </member>
    <member name="M:mx.controls.ComboBase.textInput_changeHandler(flash.events.Event)">
      <summary>Handles changes to the TextInput that serves as the editable text field in the component.</summary>
      <param name="event" />
    </member>
    <member name="M:mx.controls.ComboBase.updateDisplayList(System.Double,System.Double)">
      <summary>Sizes and positions the internal components in the given width and height.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="F:mx.controls.ComboBase.collection">
      <summary>The ICollectionView of items this component displays.</summary>
    </member>
    <member name="F:mx.controls.ComboBase.iterator">
      <summary>The main IViewCursor used to fetch items from the dataProvider and pass the items to the renderers.</summary>
    </member>
    <member name="F:mx.controls.ComboBase.textInput">
      <summary>The internal TextInput subcomponent that displays the current selection.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.arrowButtonStyleFilters">
      <summary>Set of styles to pass from the ComboBase to the down arrow button</summary>
    </member>
    <member name="P:mx.controls.ComboBase.borderMetrics">
      <summary>Returns an EdgeMetrics object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.dataProvider">
      <summary>The set of items this component displays.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.editable">
      <summary>A flag that indicates whether the control is editable, which lets the user directly type entries that are not specified in the dataProvider, or not editable, which requires the user select from the items in the dataProvider.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.imeMode">
      <summary />
    </member>
    <member name="P:mx.controls.ComboBase.restrict">
      <summary>Set of characters that a user can or cannot enter into the text field.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.selectedIndex">
      <summary>The index in the data provider of the selected item.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.selectedItem">
      <summary>The item in the data provider at the selectedIndex.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.text">
      <summary>Contents of the text field.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.textInputStyleFilters">
      <summary>The set of styles to pass from the ComboBase to the text input.</summary>
    </member>
    <member name="P:mx.controls.ComboBase.value">
      <summary>The value of the selected item.</summary>
    </member>
    <member name="T:mx.controls.ComboBox">
      <summary>The ComboBox control contains a drop-down list from which the user can select a single value.</summary>
    </member>
    <member name="E:mx.controls.ComboBox.scroll">
      <summary>Dispatched when the user scrolls the ComboBox control's drop-down list.</summary>
    </member>
    <member name="E:mx.controls.ComboBox.open">
      <summary>Dispatched when the user clicks the drop-down button to display the drop-down list.</summary>
    </member>
    <member name="E:mx.controls.ComboBox.itemRollOver">
      <summary>Dispatched when the user rolls the mouse over a drop-down list item.</summary>
    </member>
    <member name="E:mx.controls.ComboBox.itemRollOut">
      <summary>Dispatched when user rolls the mouse out of a drop-down list item.</summary>
    </member>
    <member name="E:mx.controls.ComboBox.enter">
      <summary>Dispatched if the <code>editable</code> property is set to <code>true</code> and the user presses the Enter key while typing in the editable text field.</summary>
    </member>
    <member name="E:mx.controls.ComboBox.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="E:mx.controls.ComboBox.close">
      <summary>Dispatched when the drop-down list is dismissed for any reason such when the user: <ul> <li>selects an item in the drop-down list</li> <li>clicks outside of the drop-down list</li> <li>clicks the drop-down button while the drop-down list is displayed</li> <li>presses the ESC key while the drop-down list is displayed</li> </ul></summary>
    </member>
    <member name="E:mx.controls.ComboBox.change">
      <summary>Dispatched when the ComboBox contents changes as a result of user interaction, when the <code>selectedIndex</code> or <code>selectedItem</code> property changes, and, if the ComboBox control is editable, each time a keystroke is entered in the box.</summary>
    </member>
    <member name="M:mx.controls.ComboBox.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.ComboBox.calculatePreferredSizeFromData(System.Int32)">
      <summary>Determines default values of the height and width to use for each entry in the drop-down list, based on the maximum size of the label text in the first <code>numItems</code> items in the data provider.</summary>
      <param name="count">The number of items to check to determine the value.</param>
    </member>
    <member name="M:mx.controls.ComboBox.close(flash.events.Event)">
      <summary>Hides the drop-down list.</summary>
      <param name="trigger" />
    </member>
    <member name="M:mx.controls.ComboBox.itemToLabel(System.Object)">
      <summary>Returns a string representing the <code>item</code> parameter.</summary>
      <param name="item" />
    </member>
    <member name="M:mx.controls.ComboBox.measure">
      <summary>Makes sure the control is at least 40 pixels wide, and tall enough to fit one line of text in the TextInput portion of the control but at least 22 pixels high.</summary>
    </member>
    <member name="M:mx.controls.ComboBox.open">
      <summary>Displays the drop-down list.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.data">
      <summary>The <code>data</code> property lets you pass a value to the component when you use it in an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.dropDownStyleFilters">
      <summary>The set of styles to pass from the ComboBox to the dropDown.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.dropdown">
      <summary>A reference to the List control that acts as the drop-down in the ComboBox.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.dropdownFactory">
      <summary>The IFactory that creates a ListBase-derived instance to use as the drop-down.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.dropdownWidth">
      <summary>Width of the drop-down list, in pixels.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.itemRenderer">
      <summary>IFactory that generates the instances that displays the data for the drop-down list of the control.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.labelField">
      <summary>Name of the field in the items in the <code>dataProvider</code> Array to display as the label in the TextInput portion and drop-down list.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.labelFunction">
      <summary>User-supplied function to run on each item to determine its label.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the List control.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.prompt">
      <summary>The prompt for the ComboBox control.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.rowCount">
      <summary>Maximum number of rows visible in the ComboBox control list.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.selectedLabel">
      <summary>The String displayed in the TextInput portion of the ComboBox.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.dataProvider">
      <summary />
    </member>
    <member name="P:mx.controls.ComboBox.selectedIndex">
      <summary>Index of the selected item in the drop-down list.</summary>
    </member>
    <member name="P:mx.controls.ComboBox.selectedItem">
      <summary>Contains a reference to the selected item in the <code>dataProvider</code>.</summary>
    </member>
    <member name="T:mx.controls.DataGrid">
      <summary>The <code>DataGrid</code> control is like a List except that it can show more than one column of data making it suited for showing objects with multiple properties.</summary>
    </member>
    <member name="E:mx.controls.DataGrid.headerShift">
      <summary>Dispatched when the user releases the mouse button on a column header after having dragged the column to a new location resulting in shifting the column to a new index.</summary>
    </member>
    <member name="E:mx.controls.DataGrid.headerRelease">
      <summary>Dispatched when the user releases the mouse button on a column header to request the control to sort the grid contents based on the contents of the column.</summary>
    </member>
    <member name="E:mx.controls.DataGrid.columnStretch">
      <summary>Dispatched when a user changes the width of a column, indicating that the amount of data displayed in that column may have changed.</summary>
    </member>
    <member name="E:mx.controls.DataGrid.itemFocusOut">
      <summary>Dispatched when an item renderer loses focus, which can occur if the user clicks another item in the DataGrid control or clicks outside the control, or uses the keyboard to navigate to another item in the DataGrid control or outside the control.</summary>
    </member>
    <member name="E:mx.controls.DataGrid.itemFocusIn">
      <summary>Dispatched when an item renderer gets focus, which can occur if the user clicks on an item in the DataGrid control or navigates to the item using a keyboard.</summary>
    </member>
    <member name="E:mx.controls.DataGrid.itemEditEnd">
      <summary>Dispatched when an item editing session ends for any reason.</summary>
    </member>
    <member name="E:mx.controls.DataGrid.itemEditBegin">
      <summary>Dispatched when the <code>editedItemPosition</code> property has been set and the item can be edited.</summary>
    </member>
    <member name="E:mx.controls.DataGrid.itemEditBeginning">
      <summary>Dispatched when the user releases the mouse button while over an item renderer, tabs to the DataGrid control or within the DataGrid control, or in any other way attempts to edit an item.</summary>
    </member>
    <member name="M:mx.controls.DataGrid.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.DataGrid.adjustListContent(System.Double,System.Double)">
      <summary>Called from updateDisplayList() to adjust the size and position of listContent.</summary>
      <param name="unscaledWidth" />
      <param name="unscaledHeight" />
    </member>
    <member name="M:mx.controls.DataGrid.clearSeparators">
      <summary>Removes column header separators that the user normally uses to resize columns.</summary>
    </member>
    <member name="M:mx.controls.DataGrid.createItemEditor(System.Int32,System.Int32)">
      <summary>Creates the item editor for the item renderer at the <code>editedItemPosition</code> using the editor specified by the <code>itemEditor</code> property.</summary>
      <param name="colIndex">The column index in the data provider of the item to be edited.</param>
      <param name="rowIndex">The row index in the data provider of the item to be edited.</param>
    </member>
    <member name="M:mx.controls.DataGrid.destroyItemEditor">
      <summary>This method closes an item editor currently open on an item renderer.</summary>
    </member>
    <member name="M:mx.controls.DataGrid.drawColumnBackground(flash.display.Sprite,System.Int32,System.UInt32,mx.controls.dataGridClasses.DataGridColumn)">
      <summary>Draws a column background for a column with the suggested color.</summary>
      <param name="s">A Sprite that will contain a display object that contains the graphics for that column.</param>
      <param name="columnIndex">The column's index in the set of displayed columns. The left most visible column has a column index of 0. This is used to keep track of the objects used for drawing backgrounds so a particular column can re-use the same display object even though the index of the DataGridColumn for that column has changed.</param>
      <param name="color">The suggested color for the indicator</param>
      <param name="column">The column of the DataGrid control that you are drawing the background for.</param>
    </member>
    <member name="M:mx.controls.DataGrid.drawHeaderBackground(mx.core.UIComponent)">
      <summary>Draws the background of the headers into the given UIComponent.</summary>
      <param name="headerBG">A UIComponent that will contain the header background graphics.</param>
    </member>
    <member name="M:mx.controls.DataGrid.drawHorizontalLine(flash.display.Sprite,System.Int32,System.UInt32,System.Double)">
      <summary>Draws a line between rows.</summary>
      <param name="s">A Sprite that will contain a display object that contains the graphics for that row.</param>
      <param name="rowIndex">The row's index in the set of displayed rows.  The header does not count, the top most visible row has a row index of 0. This is used to keep track of the objects used for drawing backgrounds so a particular row can re-use the same display object even though the index of the item that row is rendering has changed.</param>
      <param name="color">The suggested color for the indicator</param>
      <param name="y">The suggested y position for the background</param>
    </member>
    <member name="M:mx.controls.DataGrid.drawLinesAndColumnBackgrounds">
      <summary>Draw lines between columns, and column backgrounds.</summary>
    </member>
    <member name="M:mx.controls.DataGrid.drawLinesAndColumnGraphics(mx.controls.listClasses.ListBaseContentHolder,Avm.Array,System.Object)">
      <summary>Draw lines between columns, and column backgrounds.</summary>
      <param name="contentHolder" />
      <param name="visibleColumns" />
      <param name="separators" />
    </member>
    <member name="M:mx.controls.DataGrid.drawRowBackground(flash.display.Sprite,System.Int32,System.Double,System.Double,System.UInt32,System.Int32)">
      <summary>Draws a row background at the position and height specified using the color specified.</summary>
      <param name="s">A Sprite that will contain a display object that contains the graphics for that row.</param>
      <param name="rowIndex">The row's index in the set of displayed rows.  The header does not count, the top most visible row has a row index of 0. This is used to keep track of the objects used for drawing backgrounds so a particular row can re-use the same display object even though the index of the item that row is rendering has changed.</param>
      <param name="y">The suggested y position for the background</param>
      <param name="height">The suggested height for the indicator</param>
      <param name="color">The suggested color for the indicator</param>
      <param name="dataIndex">The index of the item for that row in the data provider.  This can be used to color the 10th item differently for example.</param>
    </member>
    <member name="M:mx.controls.DataGrid.drawSeparators">
      <summary>Creates and displays the column header separators that the user normally uses to resize columns.</summary>
    </member>
    <member name="M:mx.controls.DataGrid.drawVerticalLine(flash.display.Sprite,System.Int32,System.UInt32,System.Double)">
      <summary>Draw lines between columns.</summary>
      <param name="s">A Sprite that will contain a display object that contains the graphics for that row.</param>
      <param name="colIndex">The column's index in the set of displayed columns. The left most visible column has a column index of 0.</param>
      <param name="color">The suggested color for the indicator</param>
      <param name="x">The suggested x position for the background</param>
    </member>
    <member name="M:mx.controls.DataGrid.isItemEditable(System.Object)">
      <summary>Determines if the item renderer for a data provider item is editable.</summary>
      <param name="data">The data provider item</param>
    </member>
    <member name="M:mx.controls.DataGrid.placeSortArrow">
      <summary>Draws the sort arrow graphic on the column that is the current sort key.</summary>
    </member>
    <member name="M:mx.controls.DataGrid.scrollPositionToIndex(System.Int32,System.Int32)">
      <summary>Returns the data provider index for the item at the first visible row and column for the given scroll positions.</summary>
      <param name="horizontalScrollPosition">The <code>horizontalScrollPosition</code> property value corresponding to the scroll position.</param>
      <param name="verticalScrollPosition">The <code>verticalScrollPosition</code> property value corresponding to the scroll position.</param>
    </member>
    <member name="M:mx.controls.DataGrid.scrollVertically(System.Int32,System.Int32,System.Boolean)">
      <summary>Adjusts the renderers in response to a change in scroll position.</summary>
      <param name="pos">The new scroll position.</param>
      <param name="deltaPos">The change in position.  It is always a positive number.</param>
      <param name="scrollUp"><code>true</code> if scroll position is getting smaller.</param>
    </member>
    <member name="F:mx.controls.DataGrid.editable">
      <summary>A flag that indicates whether or not the user can edit items in the data provider.</summary>
    </member>
    <member name="F:mx.controls.DataGrid.itemEditorInstance">
      <summary>A reference to the currently active instance of the item editor, if it exists.</summary>
    </member>
    <member name="F:mx.controls.DataGrid.resizableColumns">
      <summary>A flag that indicates whether the user can change the size of the columns.</summary>
    </member>
    <member name="F:mx.controls.DataGrid.sortableColumns">
      <summary>A flag that indicates whether the user can sort the data provider items by clicking on a column header cell.</summary>
    </member>
    <member name="P:mx.controls.DataGrid.columns">
      <summary>An array of DataGridColumn objects, one for each column that can be displayed.</summary>
    </member>
    <member name="P:mx.controls.DataGrid.draggableColumns">
      <summary>A flag that indicates whether the user is allowed to reorder columns.</summary>
    </member>
    <member name="P:mx.controls.DataGrid.editedItemPosition">
      <summary>The column and row index of the item renderer for the data provider item being edited, if any.</summary>
    </member>
    <member name="P:mx.controls.DataGrid.editedItemRenderer">
      <summary>A reference to the item renderer in the DataGrid control whose item is currently being edited.</summary>
    </member>
    <member name="P:mx.controls.DataGrid.imeMode">
      <summary>Specifies the IME (input method editor) mode.</summary>
    </member>
    <member name="P:mx.controls.DataGrid.minColumnWidth">
      <summary>The minimum width of the columns, in pixels.</summary>
    </member>
    <member name="P:mx.controls.DataGrid.horizontalScrollPosition">
      <summary>The offset into the content from the left edge.</summary>
    </member>
    <member name="N:mx.controls.dataGridClasses" />
    <member name="T:mx.controls.dataGridClasses.DataGridBase">
      <summary>The DataGridBase class is the base class for controls that display lists of items in multiple columns.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.adjustRow(mx.controls.listClasses.ListBaseContentHolder,System.Int32,System.Double,System.Double)">
      <summary>Adjust size and positions of the renderers for the given rowNum, row position and height</summary>
      <param name="contentHolder">The set of rows (locked rows, regular rows)</param>
      <param name="rowNum">The row number</param>
      <param name="yy">The y position of the row</param>
      <param name="hh">The height of the row</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.calculateRowHeight(System.Object,System.Double,System.Boolean)">
      <summary>Calculates the row height of columns in a row.</summary>
      <param name="data">The data provider item for the row.</param>
      <param name="hh">The current height of the row.</param>
      <param name="skipVisible">If <code>true</code>, no need to measure item renderers in visible columns</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.clearRow(mx.controls.listClasses.ListBaseContentHolder,System.Int32)">
      <summary>Remove renderers from a row that should be empty for the given rowNum</summary>
      <param name="contentHolder">The set of rows (locked rows, regular rows)</param>
      <param name="rowNum">The row number</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.createColumnItemRenderer(mx.controls.dataGridClasses.DataGridColumn,System.Boolean,System.Object)">
      <summary>Returns the item renderer for a column cell or for a column header.</summary>
      <param name="c">The DataGridColumn instance of the item renderer.</param>
      <param name="forHeader"><code>true</code> to return the header item renderer, and <code>false</code> to return the item render for the column cells.</param>
      <param name="data">If <code>forHeader</code> is <code>false</code>, the <code>data</code> Object for the item renderer. If <code>forHeader</code> is <code>true</code>, the DataGridColumn instance.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.drawVisibleItem(Avm.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Draw an item if it is visible.</summary>
      <param name="uid">The uid used to find the renderer.</param>
      <param name="selected"><code>true</code> if the renderer should be drawn in its selected state.</param>
      <param name="highlighted"><code>true</code> if the renderer should be drawn in its highlighted state.</param>
      <param name="caret"><code>true</code> if the renderer should be drawn as if it is the selection caret.</param>
      <param name="transition"><code>true</code> if the selection state should fade in via an effect.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.finishKeySelection">
      <summary>Sets selected items based on the <code>caretIndex</code> and <code>anchorIndex</code> properties.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.itemRendererToIndices(mx.controls.listClasses.IListItemRenderer)">
      <summary>Returns a Point containing the columnIndex and rowIndex of an item renderer.</summary>
      <param name="item">An item renderer</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.layoutColumnItemRenderer(mx.controls.dataGridClasses.DataGridColumn,mx.controls.listClasses.IListItemRenderer,System.Double,System.Double)">
      <summary>Size and temporarily position an itemRenderer for a column, returning its size as a Point Its final position may be adjusted later due to alignment settings</summary>
      <param name="c">The DataGridColumn for the renderer</param>
      <param name="item">The renderer</param>
      <param name="xx">The x position</param>
      <param name="yy">The y position</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.makeListData(System.Object,Avm.String,System.Int32,System.Int32,mx.controls.dataGridClasses.DataGridColumn)">
      <summary>Creates a new DataGridListData instance and populates the fields based on the input data provider item.</summary>
      <param name="data">The data provider item used to populate the ListData.</param>
      <param name="uid">The UID for the item.</param>
      <param name="rowNum">The index of the item in the data provider.</param>
      <param name="columnNum">The columnIndex associated with this item.</param>
      <param name="column">The column associated with this item.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.makeRow(mx.controls.listClasses.ListBaseContentHolder,System.Int32,System.Double,System.Double,System.Double,System.Object,Avm.String)">
      <summary>Make the renderers for the given rowNum, dataObject and uid</summary>
      <param name="contentHolder">The set of rows (locked rows, regular rows)</param>
      <param name="rowNum">The row number</param>
      <param name="left">The offset from the left side for the first column</param>
      <param name="right">The offset from the right side for the last column</param>
      <param name="yy">The y position of the row</param>
      <param name="data">The data for the row</param>
      <param name="uid">The uid for the data</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.moveSelectionVertically(System.UInt32,System.Boolean,System.Boolean)">
      <summary>Moves the selection in a vertical direction in response to the user selecting items using the up-arrow or down-arrow Keys and modifiers such as the Shift and Ctrl keys.</summary>
      <param name="code">The key that was pressed (e.g. Keyboard.DOWN)</param>
      <param name="shiftKey"><code>true</code> if the shift key was held down when the keyboard key was pressed.</param>
      <param name="ctrlKey"><code>true</code> if the ctrl key was held down when the keyboard key was pressed</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.prepareRowArray(mx.controls.listClasses.ListBaseContentHolder,System.Int32)">
      <summary>Make sure there's a slot in the row arrays for the given row number</summary>
      <param name="contentHolder">The set of rows (locked rows, regular rows)</param>
      <param name="rowNum">The row number</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.removeExtraRow(mx.controls.listClasses.ListBaseContentHolder)">
      <summary>Remove extra row from the end of the contentHolder</summary>
      <param name="contentHolder">The set of rows (locked rows, regular rows)</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.setRowInfo(mx.controls.listClasses.ListBaseContentHolder,System.Int32,System.Double,System.Double,Avm.String)">
      <summary>Set the rowInfo for the given rowNum, row position and height</summary>
      <param name="contentHolder">The set of rows (locked rows, regular rows)</param>
      <param name="rowNum">The row number</param>
      <param name="yy">The y position of the row</param>
      <param name="hh">The height of the row</param>
      <param name="uid">The UID for the data</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.setupColumnItemRenderer(mx.controls.dataGridClasses.DataGridColumn,mx.controls.listClasses.ListBaseContentHolder,System.Int32,System.Int32,System.Object,Avm.String)">
      <summary>Setup an item renderer for a column and put it in the listItems array at the requested position</summary>
      <param name="c">The DataGridColumn for the renderer</param>
      <param name="contentHolder">The set of rows (locked rows, regular rows)</param>
      <param name="rowNum">The row number</param>
      <param name="colNum">The column number</param>
      <param name="data">The data for the row</param>
      <param name="uid">The uid for the data</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridBase.updateRendererDisplayList(mx.controls.listClasses.IListItemRenderer)">
      <summary>redraw the renderer synchronously</summary>
      <param name="r">the renderer;</param>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.columnCaretIndicator">
      <summary>The DisplayObject that contains the graphics that indicates which renderer is the caret for lockedColumns.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.columnHighlightIndicator">
      <summary>The DisplayObject that contains the graphics that indicates which renderer is highlighted for lockedColumns.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.columnMap">
      <summary>A map of item renderes to columns.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.freeItemRenderersTable">
      <summary>A per-column table of unused item renderers.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.header">
      <summary>The header sub-component</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.headerMask" />
    <member name="F:mx.controls.dataGridClasses.DataGridBase.lockedColumnAndRowContent">
      <summary>The sub-component that contains locked rows for locked columns</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.lockedColumnContent">
      <summary>The sub-component that contains locked columns</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.lockedColumnHeader">
      <summary>The header sub-component for locked columns</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridBase.lockedRowContent">
      <summary>The sub-component that contains locked rows</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridBase.fontContext">
      <summary>The module factory that provides the font context for this component.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridBase.headerHeight">
      <summary>The height of the header cell of the column, in pixels.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridBase.lockedColumnCount">
      <summary>The index of the first column in the control that scrolls.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridBase.lockedRowCount">
      <summary>The index of the first row in the control that scrolls.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridBase.showHeaders">
      <summary>A flag that indicates whether the control should show column headers.</summary>
    </member>
    <member name="T:mx.controls.dataGridClasses.DataGridColumn">
      <summary>The DataGridColumn class describes a column in a DataGrid control.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridColumn.#ctor(Avm.String)">
      <summary>Constructor.</summary>
      <param name="columnName">The name of the field in the data provider associated with the column, and the text for the header cell of this column.  This is equivalent to setting the <code>dataField</code> and <code>headerText</code> properties.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridColumn.getItemRendererFactory(System.Boolean,System.Object)">
      <summary>Return the appropriate factory, using the default factory if none specified.</summary>
      <param name="forHeader"><code>true</code> if this is a header renderer.</param>
      <param name="data">The data to be presented by the item renderer.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridColumn.itemToDataTip(System.Object)">
      <summary>Returns a String that the item renderer displays as the datatip for the given data object, based on the <code>dataTipField</code> and <code>dataTipFunction</code> properties.</summary>
      <param name="data">Object to be rendered.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridColumn.itemToLabel(System.Object)">
      <summary>Returns the String that the item renderer displays for the given data object.</summary>
      <param name="data">Object to be rendered.</param>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.dataField">
      <summary>The name of the field or property in the data provider item associated with the column.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.draggable">
      <summary>A flag that indicates whether the user is allowed to drag the column to a new position If <code>true</code>, the user can drag the the column headers to a new position</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.editable">
      <summary>A flag that indicates whether the items in the column are editable.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.editorDataField">
      <summary>The name of the property of the item editor that contains the new data for the list item.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.editorHeightOffset">
      <summary>The height of the item editor, in pixels, relative to the size of the item renderer.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.editorUsesEnterKey">
      <summary>A flag that indicates whether the item editor uses Enter key.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.editorWidthOffset">
      <summary>The width of the item editor, in pixels, relative to the size of the item renderer.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.editorXOffset">
      <summary>The x location of the upper-left corner of the item editor, in pixels, relative to the upper-left corner of the item.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.editorYOffset">
      <summary>The y location of the upper-left corner of the item editor, in pixels, relative to the upper-left corner of the item.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.itemEditor">
      <summary>A class factory for the instances of the item editor to use for the column, when it is editable.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.rendererIsEditor">
      <summary>A flag that indicates that the item renderer is also an item editor.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.resizable">
      <summary>A flag that indicates whether the user is allowed to resize the width of the column.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.sortDescending">
      <summary>Indicates whether the column sort is in ascending order, <code>false</code>, or <code>descending</code> order, true.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridColumn.sortable">
      <summary>A flag that indicates whether the user can click on the header of this column to sort the data provider.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.dataTipField">
      <summary>The name of the field in the data provider to display as the datatip.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.dataTipFunction">
      <summary>Specifies a callback function to run on each item of the data provider to determine its dataTip.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.headerRenderer">
      <summary>The class factory for item renderer instances that display the column header for the column.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.headerText">
      <summary>Text for the header of this column.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.headerWordWrap">
      <summary>A flag that indicates whether text in the header will be word wrapped if it doesn't fit on one line.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.imeMode">
      <summary>Specifies the IME (input method editor) mode.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.itemRenderer">
      <summary>The class factory for item renderer instances that display the data for each item in the column.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.labelFunction">
      <summary>A function that determines the text to display in this column.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.minWidth">
      <summary>The minimum width of the column.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.nullItemRenderer">
      <summary>The class factory for item renderer instances that display the data for each item in the column.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.showDataTips">
      <summary>A flag that indicates whether the datatips are shown in the column.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.sortCompareFunction">
      <summary>A callback function that gets called when sorting the data in the column.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.visible">
      <summary>A flag that indicates whethe the column is visible.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.width">
      <summary>The width of the column, in pixels.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridColumn.wordWrap">
      <summary>A flag that indicates whether the text in a row of this column is word wrapped if it doesn't fit on one line.</summary>
    </member>
    <member name="T:mx.controls.dataGridClasses.DataGridDragProxy">
      <summary>The DataGridDragProxy class defines the default drag proxy used when dragging data from a DataGrid control.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridDragProxy.measure" />
    <member name="T:mx.controls.dataGridClasses.DataGridHeader">
      <summary>The DataGridHeader class defines the default header renderer for a DataGrid control.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.clearSeparators">
      <summary>Removes column header separators that the user normally uses to resize columns.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.createChildren">
      <summary>Create child objects of the component.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.drawColumnDragOverlay(flash.display.Sprite,System.Double,System.Double,System.Double,System.Double,System.UInt32,mx.controls.listClasses.IListItemRenderer)">
      <summary>Draws the overlay on the dragged column into the given Sprite at the position, width and height specified using the color specified.</summary>
      <param name="indicator">A Sprite that should contain the graphics that indicate that a column is being dragged.</param>
      <param name="x">The suggested x position for the indicator.</param>
      <param name="y">The suggested y position for the indicator.</param>
      <param name="width">The suggested width for the indicator.</param>
      <param name="height">The suggested height for the indicator.</param>
      <param name="color">The suggested color for the indicator.</param>
      <param name="itemRenderer">The item renderer that is being dragged.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.drawHeaderBackground(mx.core.UIComponent)">
      <summary>Draws the background of the headers into the given UIComponent.</summary>
      <param name="headerBG">A UIComponent that will contain the header background graphics.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.drawHeaderIndicator(flash.display.Sprite,System.Double,System.Double,System.Double,System.Double,System.UInt32,mx.controls.listClasses.IListItemRenderer)">
      <summary>Draws the highlight indicator into the given Sprite at the position, width and height specified using the color specified.</summary>
      <param name="indicator">A Sprite that should contain the graphics that make a renderer look highlighted.</param>
      <param name="x">The suggested x position for the indicator.</param>
      <param name="y">The suggested y position for the indicator.</param>
      <param name="width">The suggested width for the indicator.</param>
      <param name="height">The suggested height for the indicator.</param>
      <param name="color">The suggested color for the indicator.</param>
      <param name="itemRenderer">The item renderer that is being highlighted.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.drawSelectionIndicator(flash.display.Sprite,System.Double,System.Double,System.Double,System.Double,System.UInt32,mx.controls.listClasses.IListItemRenderer)">
      <summary>Draws the selection indicator into the given Sprite at the position, width and height specified using the color specified.</summary>
      <param name="indicator">A Sprite that should contain the graphics that make a renderer look selected.</param>
      <param name="x">The suggested x position for the indicator.</param>
      <param name="y">The suggested y position for the indicator.</param>
      <param name="width">The suggested width for the indicator.</param>
      <param name="height">The suggested height for the indicator.</param>
      <param name="color">The suggested color for the indicator.</param>
      <param name="itemRenderer">The item renderer that is being selected.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.drawSeparators">
      <summary>Creates and displays the column header separators that the user normally uses to resize columns.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.measure">
      <summary>Calculates the default size, and optionally the default minimum size, of the component.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.placeSortArrow">
      <summary>Draws the sort arrow graphic on the column that is the current sort key.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeader.updateDisplayList(System.Double,System.Double)">
      <summary>Draws the object and/or sizes and positions its children.</summary>
      <param name="w">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="h">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.bottomOffset">
      <summary>The offset, in pixels, from the bottom of the content of the renderer.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.cachedHeaderHeight">
      <summary>The cached header height, in pixels.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.cachedPaddingBottom">
      <summary>The cached padding for the bottom of the renderer, in pixels.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.cachedPaddingTop">
      <summary>The cached padding for the top of the renderer, in pixels.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.dataGrid">
      <summary>The DataGrid control associated with this renderer.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.headerItems">
      <summary>An Array of header renderer instances.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.leftOffset">
      <summary>The offset, in pixels, from the left side of the content of the renderer.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.needRightSeparator">
      <summary>Whether we need the separator on the far right</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.needRightSeparatorEvents">
      <summary>Whether we need the separator events on the far right</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.rightOffset">
      <summary>The offset, in pixels, from the right side of the content of the renderer.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridHeader.topOffset">
      <summary>The offset, in pixels, from the top of the content of the renderer.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridHeader.enabled">
      <summary />
    </member>
    <member name="T:mx.controls.dataGridClasses.DataGridHeaderBase">
      <summary>The DataGridHeaderBase class defines the base class for the DataGridHeader class, the class that defines the item renderer for the DataGrid control.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridHeaderBase.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.controls.dataGridClasses.DataGridItemRenderer">
      <summary>The DataGridItemRenderer class defines the default item renderer for a DataGrid control.</summary>
    </member>
    <member name="E:mx.controls.dataGridClasses.DataGridItemRenderer.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.clearStyle(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.getClassStyleDeclarations">
      <summary>Returns an Array of CSSStyleDeclaration objects for the type selector that applies to this component, or <code>null</code> if none exist.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.getStyle(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.initProtoChain">
      <summary>Sets up the <code>inheritingStyles</code> and <code>nonInheritingStyles</code> objects and their proto chains so that the <code>getStyle()</code> method can work.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.notifyStyleChangeInChildren(Avm.String,System.Boolean)">
      <summary>Propagates style changes to the children of this component.</summary>
      <param name="styleProp">Name of the style property.</param>
      <param name="recursive">Whether to propagate the style changes to the children's children.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.regenerateStyleCache(System.Boolean)">
      <summary>Sets up the internal style cache values so that the <code>getStyle()</code> method functions.</summary>
      <param name="recursive">Regenerate the proto chains of the children.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.registerEffects(Avm.Array)">
      <summary>Registers the EffectManager as one of the event listeners for each effect event.</summary>
      <param name="effects">An Array of Strings of effect names.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.setStyle(Avm.String,)">
      <summary />
      <param name="styleProp" />
      <param name="newValue" />
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.toolTipShowHandler(mx.events.ToolTipEvent)">
      <summary>The event handler to position the tooltip.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.validateDisplayList">
      <summary>If Flex calls <code>LayoutManager.invalidateDisplayList()</code> method on this ILayoutManagerClient, then this function is called when it's time to update the display list.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.validateProperties">
      <summary>If Flex calls the <code>LayoutManager.invalidateProperties()</code> method on this ILayoutManagerClient, then this function is called when it's time to commit property values.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridItemRenderer.validateSize(System.Boolean)">
      <summary>If Flex calls the <code>LayoutManager.invalidateSize()</code> method on this ILayoutManagerClient, then this function is called when it's time to do measurements.</summary>
      <param name="recursive">If <code>true</code>, call this method on the object's children.</param>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridItemRenderer.data">
      <summary>The implementation of the <code>data</code> property as defined by the IDataRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridItemRenderer.listData">
      <summary>The implementation of the <code>listData</code> property as defined by the IDropInListItemRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridItemRenderer.styleDeclaration">
      <summary>Storage for the inline inheriting styles on this object.</summary>
    </member>
    <member name="T:mx.controls.dataGridClasses.DataGridListData">
      <summary>The DataGridListData class defines the data type of the <code>listData</code> property that is implemented by drop-in item renderers or drop-in item editors for the DataGrid control.</summary>
    </member>
    <member name="F:mx.controls.dataGridClasses.DataGridListData.dataField">
      <summary>Name of the field or property in the data provider associated with the column.</summary>
    </member>
    <member name="T:mx.controls.dataGridClasses.DataGridLockedRowContentHolder">
      <summary>The DataGridLockedRowContentHolder class defines a container in a DataGrid control of all of the control's item renderers and item editors.</summary>
    </member>
    <member name="M:mx.controls.dataGridClasses.DataGridLockedRowContentHolder.#ctor(mx.controls.listClasses.ListBase)">
      <summary>Constructor.</summary>
      <param name="parentList">The DataGrid control.</param>
    </member>
    <member name="P:mx.controls.dataGridClasses.DataGridLockedRowContentHolder.measuredHeight">
      <summary>The measured height of the DataGrid control.</summary>
    </member>
    <member name="T:mx.controls.DateChooser">
      <summary>The DateChooser control displays the name of a month, the year, and a grid of the days of the month, with columns labeled for the day of the week.</summary>
    </member>
    <member name="E:mx.controls.DateChooser.scroll">
      <summary>Dispatched when the month changes due to user interaction.</summary>
    </member>
    <member name="E:mx.controls.DateChooser.change">
      <summary>Dispatched when a date is selected or changed.</summary>
    </member>
    <member name="M:mx.controls.DateChooser.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.allowDisjointSelection">
      <summary>If <code>true</code>, specifies that non-contiguous(disjoint) selection is allowed in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.allowMultipleSelection">
      <summary>If <code>true</code>, specifies that multiple selection is allowed in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.calendarLayoutStyleFilters">
      <summary>The set of styles to pass from the DateChooser to the calendar layout.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.dayNames">
      <summary>The weekday names for DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.disabledDays">
      <summary>The days to disable in a week.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.disabledRanges">
      <summary>Disables single and multiple days.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.displayedMonth">
      <summary>Used together with the <code>displayedYear</code> property, the <code>displayedMonth</code> property specifies the month displayed in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.displayedYear">
      <summary>Used together with the <code>displayedMonth</code> property, the <code>displayedYear</code> property specifies the month displayed in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.firstDayOfWeek">
      <summary>Number representing the day of the week to display in the first column of the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.maxYear">
      <summary>The last year selectable in the control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.minYear">
      <summary>The first year selectable in the control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.monthNames">
      <summary>Names of the months displayed at the top of the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.monthSymbol">
      <summary>This property is appended to the end of the value specified by the <code>monthNames</code> property to define the names of the months displayed at the top of the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.nextMonthStyleFilters">
      <summary>The set of styles to pass from the DateChooser to the next month button.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.nextYearStyleFilters">
      <summary>The set of styles to pass from the DateChooser to the next year button.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.prevMonthStyleFilters">
      <summary>The set of styles to pass from the DateChooser to the previous month button.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.prevYearStyleFilters">
      <summary>The set of styles to pass from the DateChooser to the previous year button.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.selectableRange">
      <summary>Range of dates between which dates are selectable.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.selectedDate">
      <summary>Date selected in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.selectedRanges">
      <summary>Selected date ranges.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.showToday">
      <summary>If <code>true</code>, specifies that today is highlighted in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.yearNavigationEnabled">
      <summary>Enables year navigation.</summary>
    </member>
    <member name="P:mx.controls.DateChooser.yearSymbol">
      <summary>This property is appended to the end of the year displayed at the top of the DateChooser control.</summary>
    </member>
    <member name="T:mx.controls.DateField">
      <summary>The DateField control is a text field that shows the date with a calendar icon on its right side.</summary>
    </member>
    <member name="E:mx.controls.DateField.scroll">
      <summary>Dispatched when the month changes due to user interaction.</summary>
    </member>
    <member name="E:mx.controls.DateField.open">
      <summary>Dispatched when a user selects the field to open the drop-down list.</summary>
    </member>
    <member name="E:mx.controls.DateField.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="E:mx.controls.DateField.close">
      <summary>Dispatched when a date is selected or the user clicks outside the drop-down list.</summary>
    </member>
    <member name="E:mx.controls.DateField.change">
      <summary>Dispatched when a date is selected or changed, and the DateChooser control closes.</summary>
    </member>
    <member name="M:mx.controls.DateField.#ctor">
      <summary>Constructor</summary>
    </member>
    <member name="M:mx.controls.DateField.close">
      <summary>Closes the DateChooser control.</summary>
    </member>
    <member name="M:mx.controls.DateField.dateToString(Avm.Date,Avm.String)">
      <summary>Formats a Date into a String according to the <code>outputFormat</code> argument.</summary>
      <param name="value">Date value to format.</param>
      <param name="outputFormat">String defining the date format.</param>
    </member>
    <member name="M:mx.controls.DateField.open">
      <summary>Opens the DateChooser control.</summary>
    </member>
    <member name="M:mx.controls.DateField.stringToDate(Avm.String,Avm.String)">
      <summary>Parses a String object that contains a date, and returns a Date object corresponding to the String.</summary>
      <param name="valueString">Date value to format.</param>
      <param name="inputFormat">String defining the date format.</param>
    </member>
    <member name="P:mx.controls.DateField.data">
      <summary>The <code>data</code> property lets you pass a value to the component when you use it in an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.DateField.dayNames">
      <summary>Weekday names for DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateField.disabledDays">
      <summary>Days to disable in a week.</summary>
    </member>
    <member name="P:mx.controls.DateField.disabledRanges">
      <summary>Disables single and multiple days.</summary>
    </member>
    <member name="P:mx.controls.DateField.displayedMonth">
      <summary>Used with the <code>displayedYear</code> property, the <code>displayedMonth</code> property specifies the month displayed in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateField.displayedYear">
      <summary>Used with the <code>displayedMonth</code> property, the <code>displayedYear</code> property determines which year is displayed in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateField.dropdown">
      <summary>Contains a reference to the DateChooser control contained by the DateField control.</summary>
    </member>
    <member name="P:mx.controls.DateField.dropdownFactory">
      <summary>The IFactory that creates a DateChooser-derived instance to use as the date-chooser The default value is an IFactory for DateChooser</summary>
    </member>
    <member name="P:mx.controls.DateField.firstDayOfWeek">
      <summary>Day of the week (0-6, where 0 is the first element of the dayNames Array) to display in the first column of the  DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateField.formatString">
      <summary>The format of the displayed date in the text field.</summary>
    </member>
    <member name="P:mx.controls.DateField.labelFunction">
      <summary>Function used to format the date displayed in the text field of the DateField control.</summary>
    </member>
    <member name="P:mx.controls.DateField.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the List control.</summary>
    </member>
    <member name="P:mx.controls.DateField.maxYear">
      <summary>The last year selectable in the control.</summary>
    </member>
    <member name="P:mx.controls.DateField.minYear">
      <summary>The first year selectable in the control.</summary>
    </member>
    <member name="P:mx.controls.DateField.monthNames">
      <summary>Names of the months displayed at the top of the control.</summary>
    </member>
    <member name="P:mx.controls.DateField.monthSymbol">
      <summary>This property is appended to the end of the value specified by the <code>monthNames</code> property to define the names of the months displayed at the top of the control.</summary>
    </member>
    <member name="P:mx.controls.DateField.parseFunction">
      <summary>Function used to parse the date entered as text in the text field area of the DateField control and return a Date object to the control.</summary>
    </member>
    <member name="P:mx.controls.DateField.selectableRange">
      <summary>Range of dates between which dates are selectable.</summary>
    </member>
    <member name="P:mx.controls.DateField.selectedDate">
      <summary>Date as selected in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateField.showToday">
      <summary>If <code>true</code>, specifies that today is highlighted in the DateChooser control.</summary>
    </member>
    <member name="P:mx.controls.DateField.yearNavigationEnabled">
      <summary>Enables year navigation.</summary>
    </member>
    <member name="P:mx.controls.DateField.yearSymbol">
      <summary>This property is appended to the end of the year displayed at the top of the control.</summary>
    </member>
    <member name="T:mx.controls.FormItemLabel">
      <summary>The FormItem container uses a FormItemLabel object to display the label portion of the FormItem container.</summary>
    </member>
    <member name="T:mx.controls.HorizontalList">
      <summary>The HorizontalList control displays a horizontal list of items.</summary>
    </member>
    <member name="T:mx.controls.HRule">
      <summary>The HRule control creates a single horizontal line.</summary>
    </member>
    <member name="M:mx.controls.HRule.#ctor">
      <summary>Constructor</summary>
    </member>
    <member name="T:mx.controls.HScrollBar">
      <summary>The HScrollBar (horizontal ScrollBar) control lets you control the portion of data that is displayed when there is too much data to fit in a display area.</summary>
    </member>
    <member name="E:mx.controls.HScrollBar.scroll">
      <summary>Dispatched when the ScrollBar control scrolls through user initiated action or programmatically.</summary>
    </member>
    <member name="T:mx.controls.HSlider">
      <summary>The HSlider control lets users select a value by moving a slider thumb between the end points of the slider track.</summary>
    </member>
    <member name="T:mx.controls.IFlexContextMenu">
      <summary>The IFlexContextMenu interface defines the interface for a Flex context menus.</summary>
    </member>
    <member name="M:mx.controls.IFlexContextMenu.setContextMenu(flash.display.InteractiveObject)">
      <summary>Sets the context menu of an InteractiveObject.</summary>
      <param name="component">InteractiveObject to set context menu on</param>
    </member>
    <member name="M:mx.controls.IFlexContextMenu.unsetContextMenu(flash.display.InteractiveObject)">
      <summary>Unsets the context menu of a InteractiveObject.</summary>
      <param name="component">InteractiveObject to unset context menu on</param>
    </member>
    <member name="T:mx.controls.Image">
      <summary>The Image control lets you import JPEG, PNG, GIF, and SWF files at runtime.</summary>
    </member>
    <member name="E:mx.controls.Image.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="P:mx.controls.Image.data">
      <summary>The <code>data</code> property lets you pass a value to the component when you use it in an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.Image.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the List control.</summary>
    </member>
    <member name="T:mx.controls.Label">
      <summary>The Label control displays a single line of noneditable text.</summary>
    </member>
    <member name="E:mx.controls.Label.link">
      <summary>Dispatched when a user clicks a hyperlink in an HTML-enabled text field, where the URL begins with <code>"event:"</code>.</summary>
    </member>
    <member name="E:mx.controls.Label.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="M:mx.controls.Label.getLineMetrics(System.Int32)">
      <summary>Returns a TextLineMetrics object with information about the text position and measurements for a line of text in the control.</summary>
      <param name="lineIndex">The zero-based index of the line for which to get the metrics. For the Label control, which has only a single line, must be 0.</param>
    </member>
    <member name="F:mx.controls.Label.textField">
      <summary>The internal UITextField that renders the text of this Label.</summary>
    </member>
    <member name="F:mx.controls.Label.truncateToFit">
      <summary>If this propery is <code>true</code>, and the Label control size is smaller than its text, the text of the Label control is truncated using a localizable string, such as <code>"..."</code>.</summary>
    </member>
    <member name="P:mx.controls.Label.condenseWhite">
      <summary>Specifies whether extra white space (spaces, line breaks, and so on) should be removed in a Label control with HTML text.</summary>
    </member>
    <member name="P:mx.controls.Label.data">
      <summary>Lets you pass a value to the component when you use it in an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.Label.fontContext">
      <summary>The module factory that provides the font context for this component.</summary>
    </member>
    <member name="P:mx.controls.Label.htmlText">
      <summary>Specifies the text displayed by the Label control, including HTML markup that expresses the styles of that text.</summary>
    </member>
    <member name="P:mx.controls.Label.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the List control.</summary>
    </member>
    <member name="P:mx.controls.Label.selectable">
      <summary>Specifies whether the text can be selected.</summary>
    </member>
    <member name="P:mx.controls.Label.text">
      <summary>Specifies the plain text displayed by this control.</summary>
    </member>
    <member name="P:mx.controls.Label.textHeight">
      <summary>The height of the text.</summary>
    </member>
    <member name="P:mx.controls.Label.textWidth">
      <summary>The width of the text.</summary>
    </member>
    <member name="T:mx.controls.LinkBar">
      <summary>A LinkBar control defines a horizontal or vertical row of LinkButton controls that designate a series of link destinations.</summary>
    </member>
    <member name="M:mx.controls.LinkBar.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.LinkBar.styleChanged(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="M:mx.controls.LinkBar.updateDisplayList(System.Double,System.Double)">
      <summary>Responds to size changes by setting the positions and sizes of this LinkBar control's children.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, of the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="P:mx.controls.LinkBar.selectedIndex">
      <summary>The index of the last selected LinkButton control if the LinkBar control uses a ViewStack container as its data provider.</summary>
    </member>
    <member name="T:mx.controls.LinkButton">
      <summary>The LinkButton control is a borderless Button control whose contents are highlighted when a user moves the mouse over it.</summary>
    </member>
    <member name="M:mx.controls.LinkButton.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.controls.List">
      <summary>The List control displays a vertical list of items.</summary>
    </member>
    <member name="E:mx.controls.List.itemFocusOut">
      <summary>Dispatched when an item renderer loses the focus, which can occur if the user clicks another item in the List control or outside the list, or uses the keyboard to navigate to another item in the List control or outside the List control.</summary>
    </member>
    <member name="E:mx.controls.List.itemFocusIn">
      <summary>Dispatched when an item renderer gets focus, which can occur if the user clicks on an item in the List control or navigates to the item using a keyboard.</summary>
    </member>
    <member name="E:mx.controls.List.itemEditEnd">
      <summary>Dispatched when an item editing session is ending for any reason.</summary>
    </member>
    <member name="E:mx.controls.List.itemEditBegin">
      <summary>Dispatched when the <code>editedItemPosition</code> property is set and the item can be edited.</summary>
    </member>
    <member name="E:mx.controls.List.itemEditBeginning">
      <summary>Dispatched when the user releases the mouse button while over an item, tabs to the List or within the List, or in any other way attempts to edit an item.</summary>
    </member>
    <member name="M:mx.controls.List.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.List.createItemEditor(System.Int32,System.Int32)">
      <summary>Creates the item editor for the item renderer at the <code>editedItemPosition</code> using the editor specified by the <code>itemEditor</code> property.</summary>
      <param name="colIndex">The column index. Flex sets the value of this property to 0 for a List control.</param>
      <param name="rowIndex">The index in the data provider of the item to be edited.</param>
    </member>
    <member name="M:mx.controls.List.createItemRenderer(System.Object)">
      <summary>Get the appropriate renderer, using the default renderer if none specified</summary>
      <param name="data" />
    </member>
    <member name="M:mx.controls.List.destroyItemEditor">
      <summary>Closes an item editor that is currently open on an item.</summary>
    </member>
    <member name="M:mx.controls.List.drawRowBackground(flash.display.Sprite,System.Int32,System.Double,System.Double,System.UInt32,System.Int32)">
      <summary>Draws a row background at the position and height specified.</summary>
      <param name="s">A Sprite that will contain a display object that contains the graphics for that row.</param>
      <param name="rowIndex">The row's index in the set of displayed rows. The header does not count; the top most visible row has a row index of 0. This is used to keep track of the objects used for drawing backgrounds so that a particular row can reuse the same display object even though the index of the item that the row is rendering has changed.</param>
      <param name="y">The suggested y position for the background.</param>
      <param name="height">The suggested height for the indicator.</param>
      <param name="color">The suggested color for the indicator.</param>
      <param name="dataIndex">The index of the item for that row in the data provider. For example, this can be used to color the 10th item differently.</param>
    </member>
    <member name="M:mx.controls.List.endEdit(Avm.String)">
      <summary>Stops the editing of an item in the data provider.</summary>
      <param name="reason">A constant defining the reason for the event (such as "CANCELLED", "NEW_ROW", or "OTHER"). The value must be a member of the ListEventReason class.</param>
    </member>
    <member name="M:mx.controls.List.isItemEditable(System.Object)">
      <summary>Determines if the item renderer for a data provider item is editable.</summary>
      <param name="data">The data provider item</param>
    </member>
    <member name="M:mx.controls.List.layoutEditor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Positions the item editor instance at the suggested position with the suggested dimensions.</summary>
      <param name="x">The suggested x position for the indicator.</param>
      <param name="y">The suggested y position for the indicator.</param>
      <param name="w">The suggested width for the indicator.</param>
      <param name="h">The suggested height for the indicator.</param>
    </member>
    <member name="M:mx.controls.List.makeListData(System.Object,Avm.String,System.Int32)">
      <summary>Creates a new ListData instance and populates the fields based on the input data provider item.</summary>
      <param name="data">The data provider item used to populate the ListData.</param>
      <param name="uid">The UID for the item.</param>
      <param name="rowNum">The index of the item in the data provider.</param>
    </member>
    <member name="F:mx.controls.List.editable">
      <summary>A flag that indicates whether or not the user can edit items in the data provider.</summary>
    </member>
    <member name="F:mx.controls.List.editorDataField">
      <summary>The name of the property of the item editor that contains the new data for the list item.</summary>
    </member>
    <member name="F:mx.controls.List.editorHeightOffset">
      <summary>The height of the item editor, in pixels, relative to the size of the item renderer.</summary>
    </member>
    <member name="F:mx.controls.List.editorUsesEnterKey">
      <summary>A flag that indicates whether the item editor uses Enter key.</summary>
    </member>
    <member name="F:mx.controls.List.editorWidthOffset">
      <summary>The width of the item editor, in pixels, relative to the size of the item renderer.</summary>
    </member>
    <member name="F:mx.controls.List.editorXOffset">
      <summary>The x location of the upper-left corner of the item editor, in pixels, relative to the upper-left corner of the item.</summary>
    </member>
    <member name="F:mx.controls.List.editorYOffset">
      <summary>The y location of the upper-left corner of the item editor, in pixels, relative to the upper-left corner of the item.</summary>
    </member>
    <member name="F:mx.controls.List.itemEditor">
      <summary>The class factory for the item editor to use for the control, if the <code>editable</code> property is set to <code>true</code>.</summary>
    </member>
    <member name="F:mx.controls.List.itemEditorInstance">
      <summary>A reference to the currently active instance of the item editor, if it exists.</summary>
    </member>
    <member name="F:mx.controls.List.measuringObjects">
      <summary>cache of measuring objects by factory</summary>
    </member>
    <member name="F:mx.controls.List.rendererIsEditor">
      <summary>Specifies whether the item renderer is also an item editor.</summary>
    </member>
    <member name="P:mx.controls.List.editedItemPosition">
      <summary>The column and row index of the item renderer for the data provider item being edited, if any.</summary>
    </member>
    <member name="P:mx.controls.List.editedItemRenderer">
      <summary>A reference to the item renderer in the DataGrid control whose item is currently being edited.</summary>
    </member>
    <member name="P:mx.controls.List.imeMode">
      <summary>Specifies the IME (input method editor) mode.</summary>
    </member>
    <member name="N:mx.controls.listClasses" />
    <member name="T:mx.controls.listClasses.BaseListData">
      <summary>The BaseListData class defines the data type of the <code>listData</code> property implemented by drop-in item renderers or drop-in item editors.</summary>
    </member>
    <member name="F:mx.controls.listClasses.BaseListData.columnIndex">
      <summary>The index of the column of the List-based control relative to the currently visible columns of the control, where the first column is at an index of 1.</summary>
    </member>
    <member name="F:mx.controls.listClasses.BaseListData.label">
      <summary>The textual representation of the item data, based on the list class's <code>itemToLabel()</code> method.</summary>
    </member>
    <member name="F:mx.controls.listClasses.BaseListData.owner">
      <summary>A reference to the list object that owns this item.</summary>
    </member>
    <member name="F:mx.controls.listClasses.BaseListData.rowIndex">
      <summary>The index of the row of the DataGrid, List, or Tree control relative to the currently visible rows of the control, where the first row is at an index of 1.</summary>
    </member>
    <member name="P:mx.controls.listClasses.BaseListData.uid">
      <summary>The unique identifier for this item.</summary>
    </member>
    <member name="T:mx.controls.listClasses.IDropInListItemRenderer">
      <summary>The interface for "drop-in" item renderers.</summary>
    </member>
    <member name="P:mx.controls.listClasses.IDropInListItemRenderer.listData">
      <summary>Implements the <code>listData</code> property using setter and getter methods.</summary>
    </member>
    <member name="T:mx.controls.listClasses.IListItemRenderer">
      <summary>Item renderers and item editors for list components must implement the IListItemRenderer interface.</summary>
    </member>
    <member name="T:mx.controls.listClasses.ListBase">
      <summary>The ListBase class is the base class for controls that represent lists of items that can have one or more selected and can scroll through the items.</summary>
    </member>
    <member name="E:mx.controls.listClasses.ListBase.itemDoubleClick">
      <summary>Dispatched when the user double-clicks on an item in the control.</summary>
    </member>
    <member name="E:mx.controls.listClasses.ListBase.itemClick">
      <summary>Dispatched when the user clicks on an item in the control.</summary>
    </member>
    <member name="E:mx.controls.listClasses.ListBase.itemRollOut">
      <summary>Dispatched when the user rolls the mouse pointer out of an item in the control.</summary>
    </member>
    <member name="E:mx.controls.listClasses.ListBase.itemRollOver">
      <summary>Dispatched when the user rolls the mouse pointer over an item in the control.</summary>
    </member>
    <member name="E:mx.controls.listClasses.ListBase.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="E:mx.controls.listClasses.ListBase.change">
      <summary>Dispatched when the <code>selectedIndex</code> or <code>selectedItem</code> property changes as a result of user interaction.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.UIDToItemRenderer(Avm.String)">
      <summary>Find an item renderer based on its UID if it is visible</summary>
      <param name="uid">The UID of the item</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.addDataEffectItem(System.Object)">
      <summary>Adds an item renderer if a data change effect is running.</summary>
      <param name="item">The item renderer to add to the control's layout.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.addDragData(System.Object)">
      <summary>Adds the selected items to the DragSource object as part of a drag-and-drop operation.</summary>
      <param name="ds">The DragSource object to which to add the data.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.addToFreeItemRenderers(mx.controls.listClasses.IListItemRenderer)">
      <summary>Adds a renderer to the recycled renderer list, making it invisible and cleaning up references to it.</summary>
      <param name="item">IListItemRenderer</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.addToRowArrays">
      <summary>Add a blank row to the beginning of the arrays that store references to the rows</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.adjustListContent(System.Double,System.Double)">
      <summary>Called from updateDisplayList() to adjust the size and position of listContent.</summary>
      <param name="unscaledWidth" />
      <param name="unscaledHeight" />
    </member>
    <member name="M:mx.controls.listClasses.ListBase.applySelectionEffect(flash.display.Sprite,Avm.String,mx.controls.listClasses.IListItemRenderer)">
      <summary>Sets up the effect for applying the selection indicator.</summary>
      <param name="indicator">A Sprite that contains the graphics depicting selection</param>
      <param name="uid">The UID of the item being selected which can be used to index into a table and track more than one selection effect</param>
      <param name="itemRenderer">The item renderer that is being shown as selected</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.calculateDropIndex(mx.events.DragEvent)">
      <summary>Returns the index where the dropped items should be added to the drop target.</summary>
      <param name="event">A DragEvent that contains information about the position of the mouse.  If <code>null</code> the method should return the <code>dropIndex</code> value from the last valid event.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.calculateDropIndicatorY(System.Double,System.Int32)">
      <summary>Calculates the y position of the drop indicator when performing a drag-and-drop operation.</summary>
      <param name="rowCount">The number of visible rows in the control.</param>
      <param name="rowNum">The row number in the control where the drop indicator should appear.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.clearCaretIndicator(flash.display.Sprite,mx.controls.listClasses.IListItemRenderer)">
      <summary>Clears the caret indicator into the given Sprite</summary>
      <param name="indicator">A Sprite that should contain the graphics for that make a renderer look highlighted</param>
      <param name="itemRenderer">The item renderer that is being highlighted</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.clearHighlightIndicator(flash.display.Sprite,mx.controls.listClasses.IListItemRenderer)">
      <summary>Clears the highlight indicator in the given Sprite</summary>
      <param name="indicator">A Sprite that should contain the graphics for that make a renderer look highlighted</param>
      <param name="itemRenderer">The item renderer that is being highlighted</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.clearIndicators">
      <summary>Removes all selection and highlight and caret indicators.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.clearSelected(System.Boolean)">
      <summary>Clears the set of selected items and removes all graphics depicting the selected state of those items.</summary>
      <param name="transition"><code>true</code> if the graphics should have a fadeout effect.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.clearVisibleData">
      <summary>Empty the visibleData hash table</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.collectionChangeHandler(flash.events.Event)">
      <summary>Handles CollectionEvents dispatched from the data provider as the data changes.</summary>
      <param name="event">The CollectionEvent.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.commitProperties">
      <summary>Calculates the column width and row height and number of rows and columns based on whether properties like <code>columnCount</code> <code>columnWidth</code>, <code>rowHeight</code> and <code>rowCount</code> were explicitly set.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.configureScrollBars">
      <summary>Configures the ScrollBars based on the number of rows and columns and viewable rows and columns.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.copyItemWithUID(System.Object)">
      <summary>Makes a deep copy of the object by calling the <code>ObjectUtil.copy()</code> method, and replaces the copy's <code>uid</code> property (if present) with a new value by calling the <code>UIDUtil.createUID()</code> method.</summary>
      <param name="item">The item to copy</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.copySelectedItems(System.Boolean)">
      <summary>Makes a copy of the selected items in the order they were selected.</summary>
      <param name="useDataField"><code>true</code> if the array should be filled with the actual items or <code>false</code> if the array should be filled with the indexes of the items</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.createChildren">
      <summary>Create objects that are children of this ListBase, in this case the <code>listContent</code> object that will hold all the item renderers.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.createItemRenderer(System.Object)">
      <summary>Creates an item renderer given the data object</summary>
      <param name="data">data object</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.destroyRow(System.Int32,System.Int32)">
      <summary>Recycle a row that we don't need anymore and remove its indicators</summary>
      <param name="i">The index of the row</param>
      <param name="numCols">The number of columns in the row</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.dragCompleteHandler(mx.events.DragEvent)">
      <summary>Handles <code>DragEvent.DRAG_COMPLETE</code> events.</summary>
      <param name="event">The DragEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.dragDropHandler(mx.events.DragEvent)">
      <summary>Handles <code>DragEvent.DRAG_DROP events</code>.</summary>
      <param name="event">The DragEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.dragEnterHandler(mx.events.DragEvent)">
      <summary>Handles <code>DragEvent.DRAG_ENTER</code> events.</summary>
      <param name="event">The DragEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.dragExitHandler(mx.events.DragEvent)">
      <summary>Handles <code>DragEvent.DRAG_EXIT</code> events.</summary>
      <param name="event">The DragEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.dragOverHandler(mx.events.DragEvent)">
      <summary>Handles <code>DragEvent.DRAG_OVER</code> events.</summary>
      <param name="event">The DragEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.dragScroll">
      <summary>Interval function that scrolls the list up or down if the mouse goes above or below the list.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.dragStartHandler(mx.events.DragEvent)">
      <summary>The default handler for the <code>dragStart</code> event.</summary>
      <param name="event">The DragEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.drawCaretIndicator(flash.display.Sprite,System.Double,System.Double,System.Double,System.Double,System.UInt32,mx.controls.listClasses.IListItemRenderer)">
      <summary>Draws the caret indicator into the given Sprite at the position, width and height specified using the color specified.</summary>
      <param name="indicator">A Sprite that should contain the graphics for that make a renderer look highlighted</param>
      <param name="x">The suggested x position for the indicator</param>
      <param name="y">The suggested y position for the indicator</param>
      <param name="width">The suggested width for the indicator</param>
      <param name="height">The suggested height for the indicator</param>
      <param name="color">The suggested color for the indicator</param>
      <param name="itemRenderer">The item renderer that is being highlighted</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.drawHighlightIndicator(flash.display.Sprite,System.Double,System.Double,System.Double,System.Double,System.UInt32,mx.controls.listClasses.IListItemRenderer)">
      <summary>Draws the highlight indicator into the given Sprite at the position, width and height specified using the color specified.</summary>
      <param name="indicator">A Sprite that should contain the graphics for that make a renderer look highlighted</param>
      <param name="x">The suggested x position for the indicator</param>
      <param name="y">The suggested y position for the indicator</param>
      <param name="width">The suggested width for the indicator</param>
      <param name="height">The suggested height for the indicator</param>
      <param name="color">The suggested color for the indicator</param>
      <param name="itemRenderer">The item renderer that is being highlighted</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.drawItem(mx.controls.listClasses.IListItemRenderer,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Draws the renderer with indicators that it is highlighted, selected, or the caret.</summary>
      <param name="item">The renderer.</param>
      <param name="selected"><code>true</code> if the renderer should be drawn in its selected state.</param>
      <param name="highlighted"><code>true</code> if the renderer should be drawn in its highlighted state.</param>
      <param name="caret"><code>true</code> if the renderer should be drawn as if it is the selection caret.</param>
      <param name="transition"><code>true</code> if the selection state should fade in via an effect.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.drawRowBackgrounds">
      <summary>Draws any alternating row colors, borders and backgrounds for the rows.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.drawSelectionIndicator(flash.display.Sprite,System.Double,System.Double,System.Double,System.Double,System.UInt32,mx.controls.listClasses.IListItemRenderer)">
      <summary>Draws the selection indicator into the given Sprite at the position, width and height specified using the color specified.</summary>
      <param name="indicator">A Sprite that should contain the graphics for that make a renderer look highlighted</param>
      <param name="x">The suggested x position for the indicator</param>
      <param name="y">The suggested y position for the indicator</param>
      <param name="width">The suggested width for the indicator</param>
      <param name="height">The suggested height for the indicator</param>
      <param name="color">The suggested color for the indicator</param>
      <param name="itemRenderer">The item renderer that is being highlighted</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.findKey(System.Int32)">
      <summary>Tries to find the next item in the data provider that starts with the character in the <code>eventCode</code> parameter.</summary>
      <param name="eventCode">The key that was pressed on the keyboard</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.findString(Avm.String)">
      <summary>Finds an item in the list based on a String, and moves the selection to it.</summary>
      <param name="str">The String to match.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.finishDataChangeEffect(mx.events.EffectEvent)">
      <summary>Cleans up after a data change effect has finished running by restoring the original collection and iterator and removing any cached values used by the effect.</summary>
      <param name="event">the EffectEvent</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.finishKeySelection">
      <summary>Sets selected items based on the <code>caretIndex</code> and <code>anchorIndex</code> properties.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.getItemRendererFactory(System.Object)">
      <summary>Return the appropriate factory, using the default factory if none specified.</summary>
      <param name="data">The data to be presented by the item renderer.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.getRendererSemanticValue(System.Object,Avm.String)">
      <summary>Returns <code>true</code> or <code>false</code> to indicates whether the effect should play on the target.</summary>
      <param name="target">An item renderer</param>
      <param name="semanticProperty">The semantic property of the renderer whose value will be returned.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.getReservedOrFreeItemRenderer(System.Object)">
      <summary>Retrieves an already-created item renderer not currently in use.</summary>
      <param name="data">Object The data to be presented by the item renderer</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.hideDropFeedback(mx.events.DragEvent)">
      <summary>Hides the drop indicator under the mouse pointer that indicates that a drag and drop operation is allowed.</summary>
      <param name="event">A DragEvent object that contains information about the mouse location.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.indexToColumn(System.Int32)">
      <summary>The column for the data provider item at the given index.</summary>
      <param name="index">The offset into the data provider</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.indexToItemRenderer(System.Int32)">
      <summary>Get an item renderer for the index of an item in the data provider, if one exists.</summary>
      <param name="index">The offset into the data provider for an item</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.indexToRow(System.Int32)">
      <summary>The row for the data provider item at the given index.</summary>
      <param name="index">The offset into the data provider.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.indicesToIndex(System.Int32,System.Int32)">
      <summary>Computes the offset into the data provider of the item at colIndex, rowIndex.</summary>
      <param name="rowIndex">The 0-based index of the row, including rows scrolled off the top.  Thus, if <code>verticalScrollPosition</code> is 2 then the first visible row has a rowIndex of 2.</param>
      <param name="colIndex">The 0-based index of the column, including columns scrolled off the left.  If <code>horizontalScrollPosition</code> is 2 then the first column on the left has a columnIndex of 2.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.initiateDataChangeEffect(System.Double,System.Double)">
      <summary>Initiates a data change effect when there have been changes in the data provider.</summary>
      <param name="unscaledWidth" />
      <param name="unscaledHeight" />
    </member>
    <member name="M:mx.controls.listClasses.ListBase.invalidateList">
      <summary>Refresh all rows on next update.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.isItemHighlighted(System.Object)">
      <summary>Determines if the item renderer for a data provider item is highlighted (is rolled over via the mouse or or under the caret via keyboard navigation).</summary>
      <param name="data">The data provider item</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.isItemSelectable(System.Object)">
      <summary>Determines if the item renderer for a data provider item is selectable.</summary>
      <param name="data">The data provider item</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.isItemSelected(System.Object)">
      <summary>Determines if the item renderer for a data provider item is selected.</summary>
      <param name="data">The data provider item</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.isItemVisible(System.Object)">
      <summary>Determines if an item is being displayed by a renderer.</summary>
      <param name="item">A data provider item.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.isRendererUnconstrained(System.Object)">
      <summary>Returns true if an item renderer is no longer being positioned by the list's layout algorithm while a data change effect is running as a result of a call to <code>unconstrainRenderer()</code>.</summary>
      <param name="item">An item renderer</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.itemRendererContains(mx.controls.listClasses.IListItemRenderer,flash.display.DisplayObject)">
      <summary>Determines whether a renderer contains (or owns) a display object.</summary>
      <param name="renderer">The renderer that might contain or own the display object.</param>
      <param name="object">The display object that might be associated with the renderer.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.itemRendererToIndex(mx.controls.listClasses.IListItemRenderer)">
      <summary>Returns the index of the item in the data provider of the item being rendered by this item renderer.</summary>
      <param name="itemRenderer">The item renderer that is displaying the item for which you want to know the data provider index.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.itemRendererToIndices(mx.controls.listClasses.IListItemRenderer)">
      <summary>Returns a Point containing the columnIndex and rowIndex of an item renderer.</summary>
      <param name="item">An item renderer</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.itemToDataTip(System.Object)">
      <summary>Returns the dataTip string the renderer would display for the given data object based on the dataTipField and dataTipFunction properties.</summary>
      <param name="data">Object to be rendered.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.itemToIcon(System.Object)">
      <summary>Returns the class for an icon, if any, for a data item, based on the iconField and iconFunction properties.</summary>
      <param name="data">The item from which to extract the icon class</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.itemToItemRenderer(System.Object)">
      <summary>Returns the item renderer for a given item in the data provider, if there is one.</summary>
      <param name="item">The data provider item</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.itemToLabel(System.Object)">
      <summary>Returns the string the renderer would display for the given data object based on the labelField and labelFunction properties.</summary>
      <param name="data">Object to be rendered.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.itemToUID(System.Object)">
      <summary>Determines the UID for a data provider item.</summary>
      <param name="data">The data provider item</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.makeRowsAndColumns(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.UInt32)">
      <summary>Make enough rows and columns to fill the area described by left, top, right, bottom.</summary>
      <param name="left">Horizontal pixel offset of area to fill.</param>
      <param name="top">Vertical pixel offset of area to fill.</param>
      <param name="right">Horizontal pixel offset of area to fill (from left side of component).</param>
      <param name="bottom">Vertical pixel offset of area to fill (from top of component).</param>
      <param name="firstColumn">Offset into <code>listItems</code> to store the first renderer to be created.</param>
      <param name="firstRow">Offset into <code>listItems</code> to store the first renderer to be created.</param>
      <param name="byCount">If true, make <code>rowsNeeded</code> number of rows and ignore <code>bottom</code> parameter</param>
      <param name="rowsNeeded">Number of rows to create if <code>byCount</code> is true;</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.measure">
      <summary>Calculates the measured width and height of the component based on the <code>rowCount</code>, <code>columnCount</code>, <code>rowHeight</code> and <code>columnWidth</code> properties.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.measureHeightOfItems(System.Int32,System.Int32)">
      <summary>Measures a set of items from the data provider using the current item renderer and returns the sum of the heights of those items.</summary>
      <param name="index">The data provider item at which to start calculating the height.</param>
      <param name="count">The number of items to use in calculating the height.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.measureWidthOfItems(System.Int32,System.Int32)">
      <summary>Measures a set of items from the data provider using the current item renderer and returns the maximum width found.</summary>
      <param name="index">The data provider item at which to start measuring the width.</param>
      <param name="count">The number of items to measure in calculating the width.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseClickHandler(flash.events.MouseEvent)">
      <summary>Handles <code>MouseEvent.MOUSE_CLICK</code> events from any mouse targets contained in the list including the renderers.</summary>
      <param name="event">The MouseEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseDoubleClickHandler(flash.events.MouseEvent)">
      <summary>Handles <code>MouseEvent.MOUSE_DOUBLE_CLICK</code> events from any mouse targets contained in the list including the renderers.</summary>
      <param name="event">The MouseEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseDownHandler(flash.events.MouseEvent)">
      <summary>Handles <code>MouseEvent.MOUSE_DOWN</code> events from any mouse targets contained in the list including the renderers.</summary>
      <param name="event">The MouseEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseEventToItemRenderer(flash.events.MouseEvent)">
      <summary>Determines which item renderer is under the mouse.</summary>
      <param name="event">A MouseEvent that contains the position of the mouse and the object it is over</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseMoveHandler(flash.events.MouseEvent)">
      <summary>Handles <code>MouseEvent.MOUSE_MOVE</code> events from any mouse targets contained in the list including the renderers.</summary>
      <param name="event">The MouseEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseOutHandler(flash.events.MouseEvent)">
      <summary>Handles <code>MouseEvent.MOUSE_OUT</code> events from any mouse targets contained in the list including the renderers.</summary>
      <param name="event">The MouseEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseOverHandler(flash.events.MouseEvent)">
      <summary>Handles <code>MouseEvent.MOUSE_OVER</code> events from any mouse targets contained in the list, including the renderers.</summary>
      <param name="event">The MouseEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseUpHandler(flash.events.MouseEvent)">
      <summary>Handles <code>MouseEvent.MOUSE_DOWN</code> events from any mouse targets contained in the list including the renderers.</summary>
      <param name="event">The MouseEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.mouseWheelHandler(flash.events.MouseEvent)">
      <summary>Handles <code>mouseWheel</code> events by changing scroll positions.</summary>
      <param name="event">The MouseEvent object.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.moveIndicatorsHorizontally(Avm.String,System.Double)">
      <summary>Move the selection and highlight indicators horizontally</summary>
      <param name="uid">UID used to find the indicators</param>
      <param name="moveBlockDistance">The distance to move horizontally</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.moveIndicatorsVertically(Avm.String,System.Double)">
      <summary>Move the selection and highlight indicators vertically</summary>
      <param name="uid">UID used to find the indicators</param>
      <param name="moveBlockDistance">The distance to move vertically</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.moveRowVertically(System.Int32,System.Int32,System.Double)">
      <summary>Move a row vertically, and update the rowInfo record</summary>
      <param name="i">The index of the row</param>
      <param name="numCols">The number of columns in the row</param>
      <param name="moveBlockDistance">The distance to move</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.moveSelectionHorizontally(System.UInt32,System.Boolean,System.Boolean)">
      <summary>Moves the selection in a horizontal direction in response to the user selecting items using the left-arrow or right-arrow keys and modifiers such as  the Shift and Ctrl keys.</summary>
      <param name="code">The key that was pressed (e.g. Keyboard.LEFT)</param>
      <param name="shiftKey"><code>true</code> if the shift key was held down when the keyboard key was pressed.</param>
      <param name="ctrlKey"><code>true</code> if the ctrl key was held down when the keyboard key was pressed</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.moveSelectionVertically(System.UInt32,System.Boolean,System.Boolean)">
      <summary>Moves the selection in a vertical direction in response to the user selecting items using the up-arrow or down-arrow Keys and modifiers such as the Shift and Ctrl keys.</summary>
      <param name="code">The key that was pressed (e.g. Keyboard.DOWN)</param>
      <param name="shiftKey"><code>true</code> if the shift key was held down when the keyboard key was pressed.</param>
      <param name="ctrlKey"><code>true</code> if the ctrl key was held down when the keyboard key was pressed</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.prepareDataEffect(mx.events.CollectionEvent)">
      <summary>Prepare the data effect for the collection event</summary>
      <param name="ce" />
    </member>
    <member name="M:mx.controls.listClasses.ListBase.purgeItemRenderers">
      <summary>Called by updateDisplayList() to remove existing item renderers and clean up various caching structures when renderer changes.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.reKeyVisibleData">
      <summary>Update the keys in the visibleData hash table</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.removeDataEffectItem(System.Object)">
      <summary>Removes an item renderer if a data change effect is running.</summary>
      <param name="item">The item renderer to remove from the control's layout.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.removeFromRowArrays(System.Int32)">
      <summary>Remove a row from the arrays that store references to the row</summary>
      <param name="i">The index of the row</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.removeIndicators(Avm.String)">
      <summary>Cleans up selection highlights and other associated graphics for a given item in the data provider.</summary>
      <param name="uid">The UID of the data provider item</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.restoreRowArrays(System.Int32)">
      <summary>Remove the requested number of rows from the beginning of the arrays that store references to the rows</summary>
      <param name="modDeltaPos">The number of rows to remove</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.scrollHorizontally(System.Int32,System.Int32,System.Boolean)">
      <summary>Adjusts the renderers in response to a change in scroll position.</summary>
      <param name="pos">The new scroll position.</param>
      <param name="deltaPos">The change in position.  It is always a positive number.</param>
      <param name="scrollUp"><code>true</code> if scroll position is getting smaller.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.scrollPositionToIndex(System.Int32,System.Int32)">
      <summary>Returns the data provider index for the item at the first visible row and column for the given scroll positions.</summary>
      <param name="horizontalScrollPosition">The <code>horizontalScrollPosition</code> property value corresponding to the scroll position.</param>
      <param name="verticalScrollPosition">The <code>verticalScrollPosition</code> property value corresponding to the scroll position.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.scrollToIndex(System.Int32)">
      <summary>Ensures that the data provider item at the given index is visible.</summary>
      <param name="index">The index of the item in the data provider.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.scrollVertically(System.Int32,System.Int32,System.Boolean)">
      <summary>Adjusts the renderers in response to a change in scroll position.</summary>
      <param name="pos">The new scroll position.</param>
      <param name="deltaPos">The change in position.  It is always a positive number.</param>
      <param name="scrollUp"><code>true</code> if scroll position is getting smaller.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.seekPendingFailureHandler(System.Object,mx.controls.listClasses.ListBaseSeekPending)">
      <summary>The default failure handler when a seek fails due to a page fault.</summary>
      <param name="data" />
      <param name="info" />
    </member>
    <member name="M:mx.controls.listClasses.ListBase.seekPendingResultHandler(System.Object,mx.controls.listClasses.ListBaseSeekPending)">
      <summary>The default result handler when a seek fails due to a page fault.</summary>
      <param name="data" />
      <param name="info" />
    </member>
    <member name="M:mx.controls.listClasses.ListBase.seekPositionSafely(System.Int32)">
      <summary>Seek to a position, and handle ItemPendingError if necessary</summary>
      <param name="index">Index into the collection</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.selectItem(mx.controls.listClasses.IListItemRenderer,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Updates the set of selected items given that the item renderer provided was clicked by the mouse and the keyboard modifiers are in the given state.</summary>
      <param name="item">The item renderer that was clicked</param>
      <param name="shiftKey"><code>true</code> if the shift key was held down when the mouse was clicked.</param>
      <param name="ctrlKey"><code>true</code> if the ctrl key was held down when the mouse was clicked.</param>
      <param name="transition"><code>true</code> if the graphics for the selected state should be faded in using an effect.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.setRowCount(System.Int32)">
      <summary>Sets the <code>rowCount</code> property without causing invalidation or setting the <code>explicitRowCount</code> property, which permanently locks in the number of rows.</summary>
      <param name="v">The row count.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.setRowHeight(System.Double)">
      <summary>Sets the <code>rowHeight</code> property without causing invalidation or setting of <code>explicitRowHeight</code> which permanently locks in the height of the rows.</summary>
      <param name="v">The row height, in pixels.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.shiftRow(System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Shift a row in the arrays that reference rows</summary>
      <param name="oldIndex">Old index in the arrays</param>
      <param name="newIndex">New index in the arrays</param>
      <param name="numCols">The number of columns in the row</param>
      <param name="shiftItems">TRUE if we actually move the item FALSE if we simply change the items rowIndex</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.showDropFeedback(mx.events.DragEvent)">
      <summary>Displays a drop indicator under the mouse pointer to indicate that a drag and drop operation is allowed and where the items will be dropped.</summary>
      <param name="event">A DragEvent object that contains information as to where the mouse is.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.sumRowHeights(System.Int32,System.Int32)">
      <summary>Determine the height of the requested set of rows</summary>
      <param name="startRowIdx">index of first row</param>
      <param name="endRowIdx">index of last row</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.truncateRowArrays(System.Int32)">
      <summary>Remove all remaining rows from the end of the arrays that store references to the rows</summary>
      <param name="numRows">The row index to truncate from</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.unconstrainRenderer(System.Object)">
      <summary>Called by an <code>UnconstrainItemAction</code> effect as part of a data change effect if the item renderers corresponding to certain data items need to move outside the normal positions of item renderers in the control.</summary>
      <param name="item">The item renderer that is a target of the effect.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.updateDisplayList(System.Double,System.Double)">
      <summary>Adds or removes item renderers if the number of displayable items changed.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="M:mx.controls.listClasses.ListBase.updateList">
      <summary>Refreshes all rows now.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.actualCollection">
      <summary>A copy of the value normally stored in <code>collection</code> used while running data changes effects.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.actualIterator">
      <summary>A copy of the value normally stored in <code>iterator</code> used while running data changes effects.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.allowDragSelection">
      <summary>A flag that indicates whether drag-selection is enabled.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.anchorBookmark">
      <summary>A bookmark to the item that is the anchor.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.anchorIndex">
      <summary>The offset of the item in the data provider that is the selection anchor point.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.cachedItemsChangeEffect">
      <summary>The effect that plays when changes occur in the data provider for the control, set through the itemsChangeEffect style.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.caretBookmark">
      <summary>A bookmark to the item under the caret.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.caretIndex">
      <summary>The offset of the item in the data provider that is the selection caret point.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.caretIndicator">
      <summary>The DisplayObject that contains the graphics that indicate which renderer is the caret.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.caretItemRenderer">
      <summary>The renderer for the item under the caret.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.caretUID">
      <summary>The UID of the item under the caret.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.collection">
      <summary>An ICollectionView that represents the data provider.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.dataEffectCompleted">
      <summary>A flag that indicates that the a data change effect has just completed.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.dataItemWrappersByRenderer">
      <summary>A dictionary mapping item renderers to the ItemWrappers used to supply their data.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.defaultColumnCount">
      <summary>The default number of columns to display.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.defaultRowCount">
      <summary>The default number of rows to display.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.explicitColumnCount">
      <summary>The column count requested by explicitly setting the <code>columnCount</code> property.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.explicitColumnWidth">
      <summary>The column width requested by explicitly setting the <code>columnWidth</code>.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.explicitRowCount">
      <summary>The row count requested by explicitly setting <code>rowCount</code>.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.explicitRowHeight">
      <summary>The row height requested by explicitly setting <code>rowHeight</code>.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.factoryMap">
      <summary>A map of item renderers by factory.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.freeItemRenderers">
      <summary>A stack of unused item renderers.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.freeItemRenderersByFactory">
      <summary>A map of free item renderers by factory.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.highlightIndicator">
      <summary>The DisplayObject that contains the graphics that indicates which renderer is highlighted.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.highlightItemRenderer">
      <summary>The renderer that is currently rolled over or under the caret.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.highlightUID">
      <summary>The UID of the item that is current rolled over or under the caret.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.itemsNeedMeasurement">
      <summary>A flag that indicates whether the <code>columnWidth</code> and <code>rowHeight</code> properties need to be calculated.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.itemsSizeChanged">
      <summary>A flag that indicates that the size of the renderers may have changed.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.iterator">
      <summary>The main IViewCursor used to fetch items from the data provider and pass the items to the renderers.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.iteratorValid">
      <summary>A flag that indicates that a page fault as occurred and that the iterator's position is not valid (not positioned at the topmost item being displayed).</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.keySelectionPending">
      <summary>A flag that indicates if keyboard selection was interrupted by a page fault.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.lastDropIndex">
      <summary>The most recently calculated index where the drag item should be added to the drop target.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.lastSeekPending">
      <summary>The most recent seek that caused a page fault.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.listContent">
      <summary>An internal display object that parents all of the item renderers, selection and highlighting indicators and other supporting graphics.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.menuSelectionMode">
      <summary>A flag that indicates whether menu-style selection should be used.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.modifiedCollectionView">
      <summary>The collection view that temporarily preserves previous data provider state to facilitate running data change effects.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.offscreenExtraColumns">
      <summary>The target number of extra columns of item renderers used in the layout of the control.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.offscreenExtraColumnsLeft">
      <summary>The number of offscreen columns currently to the left of the leftmost visible column.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.offscreenExtraColumnsRight">
      <summary>The number of offscreen columns currently to the right of the right visible column.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.offscreenExtraRows">
      <summary>The target number of extra rows of item renderers to be used in the layout of the control.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.offscreenExtraRowsBottom">
      <summary>The number of offscreen rows currently below the bottom visible item renderer.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.offscreenExtraRowsOrColumnsChanged">
      <summary>A flag indicating that the number of offscreen rows or columns may have changed.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.offscreenExtraRowsTop">
      <summary>The number of offscreen rows currently above the topmost visible row.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.rendererChanged">
      <summary>A flag that indicates that the renderer changed.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.reservedItemRenderers">
      <summary>A hash map of currently unused item renderers that may be used again in the near future.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.rowMap">
      <summary>A hash map of item renderers to their respective ListRowInfo object.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.runDataEffectNextUpdate">
      <summary>A flag that indicates if a data effect should be initiated the next time the display is updated.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.runningDataEffect">
      <summary>A flag indicating if a data change effect is currently running</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.selectedData">
      <summary>A hash table of ListBaseSelectionData objects that track which items are currently selected.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.selectionIndicators">
      <summary>A hash table of selection indicators.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.selectionLayer">
      <summary>The layer in <code>listContent</code> where all selection and highlight indicators are drawn.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.selectionTweens">
      <summary>A hash table of selection tweens.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.showCaret">
      <summary>A flag that indicates whether to show caret.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.unconstrainedRenderers">
      <summary>A hash map of item renderers that are not subject to the layout algorithms of the list</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBase.wordWrapChanged">
      <summary>A flag that indicates whether the value of the <code>wordWrap</code> property has changed since the last time the display list was updated.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.allowMultipleSelection">
      <summary>A flag that indicates whether you can allow more than one item to be selected at the same time.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.columnCount">
      <summary>The number of columns to be displayed in a TileList control or items in a HorizontalList control.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.columnWidth">
      <summary>The width of the control's columns.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.data">
      <summary>The item in the data provider this component should render when this component is used as an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.dataProvider">
      <summary>Set of data to be viewed.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.dataTipField">
      <summary>Name of the field in the data provider items to display as the data tip.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.dataTipFunction">
      <summary>User-supplied function to run on each item to determine its dataTip.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.dragEnabled">
      <summary>A flag that indicates whether you can drag items out of this control and drop them on other controls.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.dragImage">
      <summary>Gets an instance of a class that displays the visuals during a drag and drop operation.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.dragImageOffsets">
      <summary>Gets the offset of the drag image for drag and drop.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.dragMoveEnabled">
      <summary>A flag that indicates whether items can be moved instead of just copied from the control as part of a drag-and-drop operation.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.dropEnabled">
      <summary>A flag that indicates whether dragged items can be dropped onto the control.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.iconField">
      <summary>The name of the field in the data provider object that determines what to display as the icon.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.iconFunction">
      <summary>A user-supplied function to run on each item to determine its icon.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.itemRenderer">
      <summary>The custom item renderer for the control.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.labelField">
      <summary>The name of the field in the data provider items to display as the label.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.labelFunction">
      <summary>A user-supplied function to run on each item to determine its label.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.listContentStyleFilters">
      <summary>The set of styles to pass from the ListBase to the listContent.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the additional data from the list control.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.listItems">
      <summary>An Array of Arrays that contains the itemRenderer instances that render each data provider item.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.nullItemRenderer">
      <summary>The custom item renderer for the control.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.offscreenExtraRowsOrColumns">
      <summary>The target number of extra rows or columns of item renderers to be used in the layout of the control.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.rowCount">
      <summary>Number of rows to be displayed.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.rowHeight">
      <summary>The height of the rows in pixels.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.rowInfo">
      <summary>An array of ListRowInfo objects that cache row heights and other tracking information for the rows in listItems.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.selectable">
      <summary>A flag that indicates whether the list shows selected items as selected.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.selectedIndex">
      <summary>The index in the data provider of the selected item.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.selectedIndices">
      <summary>An array of indices in the data provider of the selected items.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.selectedItem">
      <summary>A reference to the selected item in the data provider.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.selectedItems">
      <summary>An array of references to the selected items in the data provider.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.showDataTips">
      <summary>A flag that indicates whether dataTips are displayed for text in the rows.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.value">
      <summary>The selected item, or the data or label field of the selected item.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.variableRowHeight">
      <summary>A flag that indicates whether the individual rows can have different height.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.visibleData">
      <summary>A hash table of data provider item renderers currently in view.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.wordWrap">
      <summary>A flag that indicates whether text in the row should be word wrapped.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListBase.allowItemSizeChangeNotification">
      <summary>If false, renderers cannot invalidate size of List</summary>
    </member>
    <member name="T:mx.controls.listClasses.ListBaseSeekPending">
      <summary>An object that stores data about a seek operation that was interrupted by an ItemPendingError error.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBaseSeekPending.bookmark">
      <summary>The bookmark that was being used in the seek operation.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBaseSeekPending.offset">
      <summary>The offset from the bookmark that was the target of the seek operation.</summary>
    </member>
    <member name="T:mx.controls.listClasses.ListBaseSelectionData">
      <summary>Records used by list classes to keep track of what is selected.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBaseSelectionData.approximate">
      <summary>If true, then the index property is an approximate value and not the exact value.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBaseSelectionData.data">
      <summary>The data Object that is selected (selectedItem)</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListBaseSelectionData.index">
      <summary>The index in the data provider of the selected item.</summary>
    </member>
    <member name="T:mx.controls.listClasses.ListData">
      <summary>The ListData class defines the data type of the <code>listData</code> property implemented by drop-in item renderers or drop-in item editors for the List control.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListData.icon">
      <summary>A Class representing the icon for the item in the List control computed from the list class's <code>itemToIcon()</code> method</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListData.labelField">
      <summary>The value of the <code>labelField</code> property in the list class.</summary>
    </member>
    <member name="T:mx.controls.listClasses.ListItemDragProxy">
      <summary>The default drag proxy used when dragging from a list-based control (except for the DataGrid class).</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListItemDragProxy.measure" />
    <member name="T:mx.controls.listClasses.ListItemRenderer">
      <summary>The ListItemRenderer class defines the default item renderer for a List control.</summary>
    </member>
    <member name="E:mx.controls.listClasses.ListItemRenderer.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="M:mx.controls.listClasses.ListItemRenderer.toolTipShowHandler(mx.events.ToolTipEvent)">
      <summary>Positions the tooltip.</summary>
      <param name="event">Event object.</param>
    </member>
    <member name="F:mx.controls.listClasses.ListItemRenderer.icon">
      <summary>The internal IFlexDisplayObject that displays the icon in this renderer.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListItemRenderer.label">
      <summary>The internal UITextField that displays the text in this renderer.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListItemRenderer.data">
      <summary>The implementation of the <code>data</code> property as defined by the IDataRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListItemRenderer.fontContext">
      <summary>The module factory that provides the font context for this component.</summary>
    </member>
    <member name="P:mx.controls.listClasses.ListItemRenderer.listData">
      <summary>The implementation of the <code>listData</code> property as defined by the IDropInListItemRenderer interface.</summary>
    </member>
    <member name="T:mx.controls.listClasses.ListRowInfo">
      <summary>Used by the list-based classes to store information about their IListItemRenderers.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListRowInfo.data">
      <summary>The item in the dataprovider.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListRowInfo.height">
      <summary>The height of the row including margins.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListRowInfo.itemOldY">
      <summary>The last Y value for the renderer.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListRowInfo.oldY">
      <summary>The last Y value for the row.</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListRowInfo.uid">
      <summary>The unique identifier of the item in the dataProvider</summary>
    </member>
    <member name="F:mx.controls.listClasses.ListRowInfo.y">
      <summary>The y-position value for the row.</summary>
    </member>
    <member name="T:mx.controls.listClasses.TileBase">
      <summary>The TileBase class is the base class for controls that display data items in a sequence of rows and columns.</summary>
    </member>
    <member name="M:mx.controls.listClasses.TileBase.adjustListContent(System.Double,System.Double)">
      <summary>Called from updateDisplayList() to adjust the size and position of listContent.</summary>
      <param name="unscaledWidth" />
      <param name="unscaledHeight" />
    </member>
    <member name="M:mx.controls.listClasses.TileBase.createItemRenderer(System.Object)">
      <summary>Get the appropriate renderer, using the default renderer if none specified</summary>
      <param name="data" />
    </member>
    <member name="M:mx.controls.listClasses.TileBase.drawTileBackground(flash.display.Sprite,System.Int32,System.Int32,System.Double,System.Double,System.UInt32,mx.controls.listClasses.IListItemRenderer)">
      <summary>Draws the background for an individual tile.</summary>
      <param name="s">The Sprite that contains the individual tile backgrounds.</param>
      <param name="rowIndex">The index of the row that contains the tile.</param>
      <param name="columnIndex">The index of the column that contains the tile.</param>
      <param name="width">The width of the background.</param>
      <param name="height">The height of the background.</param>
      <param name="color">The fill color for the background.</param>
      <param name="item">The item renderer for the tile.</param>
    </member>
    <member name="M:mx.controls.listClasses.TileBase.drawTileBackgrounds">
      <summary>Draws the backgrounds, if any, behind all of the tiles.</summary>
    </member>
    <member name="M:mx.controls.listClasses.TileBase.makeListData(System.Object,Avm.String,System.Int32,System.Int32)">
      <summary>Creates a new ListData instance and populates the fields based on the input data provider item.</summary>
      <param name="data">The data provider item used to populate the ListData.</param>
      <param name="uid">The UID for the item.</param>
      <param name="rowNum">The index of the item in the data provider.</param>
      <param name="columnNum">The columnIndex associated with this item.</param>
    </member>
    <member name="M:mx.controls.listClasses.TileBase.scrollHorizontally(System.Int32,System.Int32,System.Boolean)">
      <summary>Adjusts the renderers in response to a change in scroll position.</summary>
      <param name="pos">The new scroll position.</param>
      <param name="deltaPos">The change in position.  It is always a positive number.</param>
      <param name="scrollUp"><code>true</code> if scroll position is getting smaller.</param>
    </member>
    <member name="F:mx.controls.listClasses.TileBase.measuringObjects">
      <summary>cache of measuring objects by factory</summary>
    </member>
    <member name="P:mx.controls.listClasses.TileBase.direction">
      <summary>The direction in which this control lays out its children.</summary>
    </member>
    <member name="P:mx.controls.listClasses.TileBase.maxColumns">
      <summary>The maximum number of columns that the control can have.</summary>
    </member>
    <member name="P:mx.controls.listClasses.TileBase.maxRows">
      <summary>The maximum number of rows that the control can have.</summary>
    </member>
    <member name="T:mx.controls.listClasses.TileBaseDirection">
      <summary>Values for the <code>direction</code> property of the TileList component.</summary>
    </member>
    <member name="F:mx.controls.listClasses.TileBaseDirection.VERTICAL">
      <summary>Arrange chidren vertically.</summary>
    </member>
    <member name="T:mx.controls.listClasses.TileListItemRenderer">
      <summary>The TileListItemRenderer class defines the default item renderer for the HorizontalList and TileList controls.</summary>
    </member>
    <member name="E:mx.controls.listClasses.TileListItemRenderer.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="M:mx.controls.listClasses.TileListItemRenderer.toolTipShowHandler(mx.events.ToolTipEvent)">
      <summary>Positions the tooltip.</summary>
      <param name="event">Event object.</param>
    </member>
    <member name="F:mx.controls.listClasses.TileListItemRenderer.icon">
      <summary>The internal IFlexDisplayObject that displays the icon in this renderer.</summary>
    </member>
    <member name="F:mx.controls.listClasses.TileListItemRenderer.label">
      <summary>The internal UITextField that displays the text in this renderer.</summary>
    </member>
    <member name="P:mx.controls.listClasses.TileListItemRenderer.data">
      <summary>The implementation of the <code>data</code> property as defined by the IDataRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.listClasses.TileListItemRenderer.listData">
      <summary>The implementation of the <code>listData</code> property as defined by the IDropInListItemRenderer interface.</summary>
    </member>
    <member name="T:mx.controls.Menu">
      <summary>The Menu control creates a pop-up menu of individually selectable choices, similar to the File or Edit menu found in most software applications.</summary>
    </member>
    <member name="E:mx.controls.Menu.itemRollOver">
      <summary>Dispatched when a user rolls the mouse over a menu item.</summary>
    </member>
    <member name="E:mx.controls.Menu.itemRollOut">
      <summary>Dispatched when a user rolls the mouse out of a menu item.</summary>
    </member>
    <member name="E:mx.controls.Menu.menuShow">
      <summary>Dispatched when a menu or submenu opens.</summary>
    </member>
    <member name="E:mx.controls.Menu.menuHide">
      <summary>Dispatched when a menu or submenu is dismissed.</summary>
    </member>
    <member name="E:mx.controls.Menu.itemClick">
      <summary>Dispatched when a menu item is selected.</summary>
    </member>
    <member name="E:mx.controls.Menu.change">
      <summary>Dispatched when selection changes as a result of user interaction.</summary>
    </member>
    <member name="M:mx.controls.Menu.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.Menu.createMenu(flash.display.DisplayObjectContainer,System.Object,System.Boolean)">
      <summary>Creates and returns an instance of the Menu class.</summary>
      <param name="parent">A container that the PopUpManager uses to place the Menu control in. The Menu control may not actually be parented by this object.</param>
      <param name="mdp">The data provider for the Menu control.</param>
      <param name="showRoot">A Boolean flag that specifies whether to display the root node of the data provider.</param>
    </member>
    <member name="M:mx.controls.Menu.hide">
      <summary>Hides the Menu control and any of its submenus if the Menu control is visible.</summary>
    </member>
    <member name="M:mx.controls.Menu.makeListData(System.Object,Avm.String,System.Int32)">
      <summary>Creates a new MenuListData instance and populates the fields based on the input data provider item.</summary>
      <param name="data">The data provider item used to populate the ListData.</param>
      <param name="uid">The UID for the item.</param>
      <param name="rowNum">The index of the item in the data provider.</param>
    </member>
    <member name="M:mx.controls.Menu.measure">
      <summary>Calculates the preferred width and height of the Menu based on the widths and heights of its menu items.</summary>
    </member>
    <member name="M:mx.controls.Menu.popUpMenu(mx.controls.Menu,flash.display.DisplayObjectContainer,System.Object)">
      <summary>Sets the dataProvider of an existing Menu control and places the Menu control in the specified parent container.</summary>
      <param name="menu">Menu control to popup.</param>
      <param name="parent">A container that the PopUpManager uses to place the Menu control in. The Menu control may not actually be parented by this object. If you omit this property, the method sets the Menu control's parent to the application.</param>
      <param name="mdp">dataProvider object set on the popped up Menu. If you omit this property, the method sets the Menu data provider to a new, empty XML object.</param>
    </member>
    <member name="M:mx.controls.Menu.setMenuItemToggled(System.Object,System.Boolean)">
      <summary>Toggles the menu item.</summary>
      <param name="item">The menu item to toggle</param>
      <param name="toggle">Boolean value that indicates whether the item is toggled.</param>
    </member>
    <member name="M:mx.controls.Menu.show(System.Object,System.Object)">
      <summary>Shows the Menu control.</summary>
      <param name="xShow">Horizontal location of the Menu control's upper-left corner (optional).</param>
      <param name="yShow">Vertical location of the Menu control's upper-left corner (optional).</param>
    </member>
    <member name="P:mx.controls.Menu.dataDescriptor">
      <summary>The object that accesses and manipulates data in the data provider.</summary>
    </member>
    <member name="P:mx.controls.Menu.hasRoot">
      <summary>A flag that indicates that the current data provider has a root node; for example, a single top node in a hierarchical structure.</summary>
    </member>
    <member name="P:mx.controls.Menu.parentMenu">
      <summary>The parent menu in a hierarchical chain of menus, where the current menu is a submenu of the parent.</summary>
    </member>
    <member name="P:mx.controls.Menu.showRoot">
      <summary>A Boolean flag that specifies whether to display the data provider's root node.</summary>
    </member>
    <member name="T:mx.controls.MenuBar">
      <summary>A MenuBar control defines a horizontal, top-level menu bar that contains one or menu items.</summary>
    </member>
    <member name="E:mx.controls.MenuBar.itemRollOver">
      <summary>Dispatched when the mouse pointer rolls over a menu item.</summary>
    </member>
    <member name="E:mx.controls.MenuBar.itemRollOut">
      <summary>Dispatched when the mouse pointer rolls out of a menu item.</summary>
    </member>
    <member name="E:mx.controls.MenuBar.menuShow">
      <summary>Dispatched when a pop-up submenu opens, or the user selects a menu bar item with no drop-down menu.</summary>
    </member>
    <member name="E:mx.controls.MenuBar.menuHide">
      <summary>Dispatched when a pop-up submenu closes.</summary>
    </member>
    <member name="E:mx.controls.MenuBar.itemClick">
      <summary>Dispatched when the user selects an item in a pop-up submenu.</summary>
    </member>
    <member name="E:mx.controls.MenuBar.change">
      <summary>Dispatched when selection changes as a result of user interaction.</summary>
    </member>
    <member name="M:mx.controls.MenuBar.#ctor">
      <summary>Constructor</summary>
    </member>
    <member name="M:mx.controls.MenuBar.getMenuAt(System.Int32)">
      <summary>Returns a reference to the Menu object at the specified MenuBar item index, where 0 is the Menu contained at the leftmost MenuBar item index.</summary>
      <param name="index">Index of the Menu instance to return.</param>
    </member>
    <member name="M:mx.controls.MenuBar.itemToIcon(System.Object)">
      <summary>Returns the class for an icon, if any, for a data item, based on the <code>iconField</code> property.</summary>
      <param name="data">The item from which to extract the icon class</param>
    </member>
    <member name="M:mx.controls.MenuBar.itemToLabel(System.Object)">
      <summary />
      <param name="data" />
    </member>
    <member name="M:mx.controls.MenuBar.measure">
      <summary>Calculates the preferred width and height of the MenuBar based on the default widths of the MenuBar items.</summary>
    </member>
    <member name="M:mx.controls.MenuBar.updateBackground">
      <summary>Updates the MenuBar control's background skin.</summary>
    </member>
    <member name="F:mx.controls.MenuBar.labelFunction">
      <summary>The function that determines the text to display for each menu item.</summary>
    </member>
    <member name="F:mx.controls.MenuBar.menuBarItems">
      <summary>An Array that contains the MenuBarItem objects that render each item in the top-level menu bar of a MenuBar control.</summary>
    </member>
    <member name="F:mx.controls.MenuBar.menus">
      <summary>An Array containing the Menu objects corresponding to the pop-up submenus of this MenuBar control.</summary>
    </member>
    <member name="P:mx.controls.MenuBar.dataDescriptor">
      <summary>The object that accesses and manipulates data in the data provider.</summary>
    </member>
    <member name="P:mx.controls.MenuBar.dataProvider">
      <summary>The hierarchy of objects that are displayed as MenuBar items and menus.</summary>
    </member>
    <member name="P:mx.controls.MenuBar.hasRoot">
      <summary />
    </member>
    <member name="P:mx.controls.MenuBar.iconField">
      <summary>The name of the field in the data provider that determines the icon to display for each menu item.</summary>
    </member>
    <member name="P:mx.controls.MenuBar.labelField">
      <summary>The name of the field in the data provider that determines the text to display for each menu item.</summary>
    </member>
    <member name="P:mx.controls.MenuBar.menuBarItemRenderer">
      <summary>The item renderer used by the MenuBar control for the top-level menu bar of the MenuBar control.</summary>
    </member>
    <member name="P:mx.controls.MenuBar.menuBarItemStyleFilters">
      <summary>The set of styles to pass from the MenuBar to the menuBar items.</summary>
    </member>
    <member name="P:mx.controls.MenuBar.selectedIndex">
      <summary>The index in the MenuBar control of the currently open Menu or the last opened Menu if none are currently open.</summary>
    </member>
    <member name="P:mx.controls.MenuBar.showRoot">
      <summary>A Boolean flag that specifies whether to display the data provider's root node.</summary>
    </member>
    <member name="N:mx.controls.menuClasses" />
    <member name="T:mx.controls.menuClasses.IMenuBarItemRenderer">
      <summary>The IMenuBarItemRenderer interface defines the interface that an item renderer for the top-level menu bar of a MenuBar control must implement.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.IMenuBarItemRenderer.menuBar">
      <summary>Contains a reference to the item renderer's MenuBar control.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.IMenuBarItemRenderer.menuBarItemIndex">
      <summary>Contains the index of this item renderer relative to other item renderers in the MenuBar control.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.IMenuBarItemRenderer.menuBarItemState">
      <summary>Contains the current state of this item renderer.</summary>
    </member>
    <member name="T:mx.controls.menuClasses.IMenuDataDescriptor">
      <summary>The IMenuDataDescriptor interface defines the interface that a dataDescriptor for a Menu or MenuBar control must implement.</summary>
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.addChildAt(System.Object,System.Object,System.Int32,System.Object)">
      <summary />
      <param name="parent" />
      <param name="newChild" />
      <param name="index" />
      <param name="model" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.getChildren(System.Object,System.Object)">
      <summary />
      <param name="node" />
      <param name="model" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.getData(System.Object,System.Object)">
      <summary />
      <param name="node" />
      <param name="model" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.getGroupName(System.Object)">
      <summary />
      <param name="node" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.getType(System.Object)">
      <summary />
      <param name="node" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.hasChildren(System.Object,System.Object)">
      <summary />
      <param name="node" />
      <param name="model" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.isBranch(System.Object,System.Object)">
      <summary />
      <param name="node" />
      <param name="model" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.isEnabled(System.Object)">
      <summary />
      <param name="node" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.isToggled(System.Object)">
      <summary />
      <param name="node" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.removeChildAt(System.Object,System.Object,System.Int32,System.Object)">
      <summary />
      <param name="parent" />
      <param name="child" />
      <param name="index" />
      <param name="model" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.setEnabled(System.Object,System.Boolean)">
      <summary />
      <param name="node" />
      <param name="value" />
    </member>
    <member name="M:mx.controls.menuClasses.IMenuDataDescriptor.setToggled(System.Object,System.Boolean)">
      <summary />
      <param name="node" />
      <param name="value" />
    </member>
    <member name="T:mx.controls.menuClasses.IMenuItemRenderer">
      <summary>The IMenuItemRenderer interface defines the interface that a menu item renderer for a Menu control must implement.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.IMenuItemRenderer.measuredBranchIconWidth">
      <summary>The width of the branch icon</summary>
    </member>
    <member name="P:mx.controls.menuClasses.IMenuItemRenderer.measuredIconWidth">
      <summary>The width of the icon</summary>
    </member>
    <member name="P:mx.controls.menuClasses.IMenuItemRenderer.measuredTypeIconWidth">
      <summary>The width of the type icon (radio/check)</summary>
    </member>
    <member name="P:mx.controls.menuClasses.IMenuItemRenderer.menu">
      <summary>A reference to this menu item renderer's Menu control, if it contains one.</summary>
    </member>
    <member name="T:mx.controls.menuClasses.MenuBarItem">
      <summary>The MenuBarItem class defines the default item renderer for the top-level menu bar of a MenuBar control.</summary>
    </member>
    <member name="M:mx.controls.menuClasses.MenuBarItem.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuBarItem.icon">
      <summary>The IFlexDisplayObject that displays the icon in this MenuBarItem.</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuBarItem.label">
      <summary>The UITextField that displays the text in this MenuBarItem.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuBarItem.data">
      <summary>The implementation of the <code>data</code> property as defined by the IDataRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuBarItem.dataProvider">
      <summary>The object that provides the data for the Menu that is popped up when this MenuBarItem is selected.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuBarItem.menuBar">
      <summary>The implementation of the <code>menuBar</code> property as defined by the IMenuBarItemRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuBarItem.menuBarItemIndex">
      <summary>The implementation of the <code>menuBarItemIndex</code> property as defined by the IMenuBarItemRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuBarItem.menuBarItemState">
      <summary>The implementation of the <code>menuBarItemState</code> property as defined by the IMenuBarItemRenderer interface.</summary>
    </member>
    <member name="T:mx.controls.menuClasses.MenuItemRenderer">
      <summary>The MenuItemRenderer class defines the default item renderer for menu items in any menu control.</summary>
    </member>
    <member name="E:mx.controls.menuClasses.MenuItemRenderer.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuItemRenderer.branchIcon">
      <summary>The internal IFlexDisplayObject that displays the branch icon in this renderer.</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuItemRenderer.label">
      <summary>The internal UITextField that displays the text in this renderer.</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuItemRenderer.separatorIcon">
      <summary>The internal IFlexDisplayObject that displays the separator icon in this renderer</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuItemRenderer.typeIcon">
      <summary>The internal IFlexDisplayObject that displays the type icon in this renderer for check and radio buttons.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuItemRenderer.data">
      <summary>The implementation of the <code>data</code> property as defined by the IDataRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuItemRenderer.icon">
      <summary>The internal IFlexDisplayObject that displays the icon in this renderer.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuItemRenderer.listData">
      <summary>The implementation of the <code>listData</code> property as defined by the IDropInListItemRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuItemRenderer.measuredBranchIconWidth">
      <summary>The width of the branch icon</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuItemRenderer.measuredIconWidth">
      <summary>The width of the icon</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuItemRenderer.measuredTypeIconWidth">
      <summary>The width of the type icon (radio/check)</summary>
    </member>
    <member name="P:mx.controls.menuClasses.MenuItemRenderer.menu">
      <summary>Contains a reference to the associated Menu control.</summary>
    </member>
    <member name="T:mx.controls.menuClasses.MenuListData">
      <summary>The MenuListData class defines the data type of the <code>listData</code> property implemented by drop-in item renderers or drop-in item editors for the Menu and MenuBar control.</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuListData.maxMeasuredBranchIconWidth">
      <summary>The max branch icon width for all MenuItemListRenderers</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuListData.maxMeasuredIconWidth">
      <summary>The max icon width for all MenuItemListRenderers</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuListData.maxMeasuredTypeIconWidth">
      <summary>The max type icon width for all MenuItemListRenderers</summary>
    </member>
    <member name="F:mx.controls.menuClasses.MenuListData.useTwoColumns">
      <summary>Whether the left icons should layout in two separate columns (one for icons and one for type icons, like check and radio)</summary>
    </member>
    <member name="T:mx.controls.NavBar">
      <summary>The NavBar control is the superclass for navigator controls, such as the LinkBar and TabBar controls, and cannot be instantiated directly.</summary>
    </member>
    <member name="E:mx.controls.NavBar.itemClick">
      <summary>Dispatched when a navigation item is selected.</summary>
    </member>
    <member name="M:mx.controls.NavBar.clickHandler(flash.events.MouseEvent)">
      <summary>Handles the <code>MouseEvent.CLICK</code> event for the items in the NavBar control.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.controls.NavBar.createNavItem(Avm.String,Avm.Class)">
      <summary>Creates the individual navigator items.</summary>
      <param name="label">The label for the created navigator item.</param>
      <param name="icon">The icon for the created navigator item. Typically, this is an icon that you have embedded in the application.</param>
    </member>
    <member name="M:mx.controls.NavBar.hiliteSelectedNavItem(System.Int32)">
      <summary>Highlights the selected navigator item.</summary>
      <param name="index">The index of the selected item in the NavBar control. The first item is at an index of 0.</param>
    </member>
    <member name="M:mx.controls.NavBar.itemToLabel(System.Object)">
      <summary>Returns the string the renderer would display for the given data object based on the labelField and labelFunction properties.</summary>
      <param name="data">Object to be rendered.</param>
    </member>
    <member name="M:mx.controls.NavBar.resetNavItems">
      <summary>Resets the navigator bar to its default state.</summary>
    </member>
    <member name="M:mx.controls.NavBar.updateNavItemIcon(System.Int32,Avm.Class)">
      <summary>Resets the icon of a navigator item in the NavBar control.</summary>
      <param name="index">The index of the navigator item in the NavBar control. The first navigator item is at an index of 0.</param>
      <param name="icon">The new icon for the navigator item. Typically, this is an icon that you have embedded in the application.</param>
    </member>
    <member name="M:mx.controls.NavBar.updateNavItemLabel(System.Int32,Avm.String)">
      <summary>Sets the label property of a navigator item in the NavBar control.</summary>
      <param name="index">The index of the navigator item in the NavBar control. The first navigator item is at an index of 0.</param>
      <param name="label">The new label text for the navigator item.</param>
    </member>
    <member name="P:mx.controls.NavBar.dataProvider">
      <summary>Data used to populate the navigator control.</summary>
    </member>
    <member name="P:mx.controls.NavBar.iconField">
      <summary>Name of the field in the <code>dataProvider</code> object to display as the icon for each navigation item.</summary>
    </member>
    <member name="P:mx.controls.NavBar.labelField">
      <summary>Name of the field in the <code>dataProvider</code> object to display as the label for each navigation item.</summary>
    </member>
    <member name="P:mx.controls.NavBar.labelFunction">
      <summary>A user-supplied function to run on each item to determine its label.</summary>
    </member>
    <member name="P:mx.controls.NavBar.selectedIndex">
      <summary>Index of the active navigation item, where the first item is at an index of 0.</summary>
    </member>
    <member name="P:mx.controls.NavBar.toolTipField">
      <summary>Name of the the field in the <code>dataProvider</code> object to display as the tooltip label.</summary>
    </member>
    <member name="T:mx.controls.NumericStepper">
      <summary>The NumericStepper control lets the user select a number from an ordered set.</summary>
    </member>
    <member name="E:mx.controls.NumericStepper.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="E:mx.controls.NumericStepper.change">
      <summary>Dispatched when the value of the NumericStepper control changes as a result of user interaction.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.data">
      <summary>The <code>data</code> property lets you pass a value to the component when you use it in an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.downArrowStyleFilters">
      <summary>Set of styles to pass from the NumericStepper to the down arrow.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.imeMode">
      <summary>Specifies the IME (Input Method Editor) mode.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.inputFieldStyleFilters">
      <summary>Set of styles to pass from the NumericStepper to the input field.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the List control.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.maxChars">
      <summary>The maximum number of characters that can be entered in the field.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.maximum">
      <summary>Maximum value of the NumericStepper.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.minimum">
      <summary>Minimum value of the NumericStepper.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.nextValue">
      <summary>The value that is one step larger than the current <code>value</code> property and not greater than the <code>maximum</code> property value.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.previousValue">
      <summary>The value that is one step smaller than the current <code>value</code> property and not smaller than the <code>maximum</code> property value.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.stepSize">
      <summary>Non-zero unit of change between values.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.upArrowStyleFilters">
      <summary>Set of styles to pass from the NumericStepper to the up arrow.</summary>
    </member>
    <member name="P:mx.controls.NumericStepper.value">
      <summary>Current value displayed in the text area of the NumericStepper control.</summary>
    </member>
    <member name="T:mx.controls.PopUpButton">
      <summary>The PopUpButton control adds a flexible pop-up control interface  to a Button control.</summary>
    </member>
    <member name="E:mx.controls.PopUpButton.open">
      <summary>Dispatched when the specified UIComponent opens.</summary>
    </member>
    <member name="E:mx.controls.PopUpButton.close">
      <summary>Dispatched when the specified UIComponent closes.</summary>
    </member>
    <member name="M:mx.controls.PopUpButton.close">
      <summary>Closes the UIComponent object opened by the PopUpButton control.</summary>
    </member>
    <member name="M:mx.controls.PopUpButton.open">
      <summary>Opens the UIComponent object specified by the <code>popUp</code> property.</summary>
    </member>
    <member name="P:mx.controls.PopUpButton.openAlways">
      <summary>If <code>true</code>, specifies to pop up the <code>popUp</code> when you click the main button.</summary>
    </member>
    <member name="P:mx.controls.PopUpButton.popUp">
      <summary>Specifies the UIComponent object, or object defined by a subclass of UIComponent, to pop up.</summary>
    </member>
    <member name="T:mx.controls.PopUpMenuButton">
      <summary>The PopUpMenuButton control creates a PopUpButton control with a main sub-button and a secondary sub-button.</summary>
    </member>
    <member name="E:mx.controls.PopUpMenuButton.itemClick">
      <summary>Dispatched when a user selects an item from the pop-up menu.</summary>
    </member>
    <member name="P:mx.controls.PopUpMenuButton.dataDescriptor">
      <summary>The data descriptor accesses and manipulates data in the data provider.</summary>
    </member>
    <member name="P:mx.controls.PopUpMenuButton.dataProvider">
      <summary>DataProvider for popUpMenu.</summary>
    </member>
    <member name="P:mx.controls.PopUpMenuButton.labelField">
      <summary>Name of the field in the <code>dataProvider</code> Array that contains the text to show for each menu item.</summary>
    </member>
    <member name="P:mx.controls.PopUpMenuButton.labelFunction">
      <summary>A function that determines the text to display for each menu item.</summary>
    </member>
    <member name="P:mx.controls.PopUpMenuButton.showRoot">
      <summary>Specifies whether to display the top-level node or nodes of the data provider.</summary>
    </member>
    <member name="P:mx.controls.PopUpMenuButton.popUp">
      <summary>A reference to the pop-up Menu object.</summary>
    </member>
    <member name="T:mx.controls.ProgressBar">
      <summary>The ProgressBar control provides a visual representation of the progress of a task over time.</summary>
    </member>
    <member name="E:mx.controls.ProgressBar.show">
      <summary>Dispatched when the component becomes visible.</summary>
    </member>
    <member name="E:mx.controls.ProgressBar.progress">
      <summary>Dispatched as content loads in event or polled mode.</summary>
    </member>
    <member name="E:mx.controls.ProgressBar.hide">
      <summary>Dispatched when an object's state changes from visible to invisible.</summary>
    </member>
    <member name="E:mx.controls.ProgressBar.complete">
      <summary>Dispatched when the load completes.</summary>
    </member>
    <member name="M:mx.controls.ProgressBar.setProgress(System.Double,System.Double)">
      <summary>Sets the state of the bar to reflect the amount of progress made when using manual mode.</summary>
      <param name="value">Current value.</param>
      <param name="total">Total or target value.</param>
    </member>
    <member name="P:mx.controls.ProgressBar.conversion">
      <summary>Number used to convert incoming current bytes loaded value and the total bytes loaded values.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.direction">
      <summary>Direction in which the fill of the ProgressBar expands toward completion.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.indeterminate">
      <summary>Whether the ProgressBar control has a determinate or indeterminate appearance.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.label">
      <summary>Text that accompanies the progress bar.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.labelPlacement">
      <summary>Placement of the label.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.maximum">
      <summary>Largest progress value for the ProgressBar.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.minimum">
      <summary>Smallest progress value for the ProgressBar.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.mode">
      <summary>Specifies the method used to update the bar.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.percentComplete">
      <summary>Percentage of process that is completed.The range is 0 to 100.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.source">
      <summary>Refers to the control that the ProgressBar is measuring the progress of.</summary>
    </member>
    <member name="P:mx.controls.ProgressBar.value">
      <summary>Read-only property that contains the amount of progress that has been made - between the minimum and maximum values.</summary>
    </member>
    <member name="T:mx.controls.ProgressBarDirection">
      <summary>The ProgressBarDirection class defines the values for the <code>direction</code> property of the ProgressBar class.</summary>
    </member>
    <member name="F:mx.controls.ProgressBarDirection.RIGHT">
      <summary>Specifies to fill the progress bar from the left to the right.</summary>
    </member>
    <member name="T:mx.controls.ProgressBarLabelPlacement">
      <summary>The ProgressBarLabelPlacement class defines the values for the <code>labelPlacement</code> property of the ProgressBar class.</summary>
    </member>
    <member name="F:mx.controls.ProgressBarLabelPlacement.CENTER">
      <summary>Specifies to place at the center inside the progress bar.</summary>
    </member>
    <member name="F:mx.controls.ProgressBarLabelPlacement.LEFT">
      <summary>Specifies to place the label to the left of the progress bar.</summary>
    </member>
    <member name="F:mx.controls.ProgressBarLabelPlacement.RIGHT">
      <summary>Specifies to place the label to the right of the progress bar.</summary>
    </member>
    <member name="F:mx.controls.ProgressBarLabelPlacement.TOP">
      <summary>Specifies to place the label above the progress bar.</summary>
    </member>
    <member name="T:mx.controls.ProgressBarMode">
      <summary>The ProgressBarMode class defines the values for the <code>mode</code> property of the ProgressBar class.</summary>
    </member>
    <member name="F:mx.controls.ProgressBarMode.MANUAL">
      <summary>You manually update the ProgressBar status.</summary>
    </member>
    <member name="F:mx.controls.ProgressBarMode.POLLED">
      <summary>The <code>source</code> property must specify an object that exposes the <code>getBytesLoaded()</code> and <code>getBytesTotal()</code> methods.</summary>
    </member>
    <member name="T:mx.controls.RadioButton">
      <summary>The RadioButton control lets the user make a single choice within a set of mutually exclusive choices.</summary>
    </member>
    <member name="M:mx.controls.RadioButton.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:mx.controls.RadioButton.group">
      <summary>The RadioButtonGroup object to which this RadioButton belongs.</summary>
    </member>
    <member name="P:mx.controls.RadioButton.groupName">
      <summary>Specifies the name of the group to which this RadioButton control belongs, or specifies the value of the <code>id</code> property of a RadioButtonGroup control if this RadioButton is part of a group defined by a RadioButtonGroup control.</summary>
    </member>
    <member name="P:mx.controls.RadioButton.labelPlacement">
      <summary>Position of the label relative to the RadioButton icon.</summary>
    </member>
    <member name="P:mx.controls.RadioButton.value">
      <summary>Optional user-defined value that is associated with a RadioButton control.</summary>
    </member>
    <member name="T:mx.controls.RadioButtonGroup">
      <summary>The RadioButtonGroup control defines a group of RadioButton controls that act as a single mutually exclusive control; therefore, a user can select only one RadioButton control at a time.</summary>
    </member>
    <member name="E:mx.controls.RadioButtonGroup.itemClick">
      <summary>Dispatched when a user selects a RadioButton control in the group.</summary>
    </member>
    <member name="E:mx.controls.RadioButtonGroup.change">
      <summary>Dispatched when the value of the selected RadioButton control in this group changes.</summary>
    </member>
    <member name="M:mx.controls.RadioButtonGroup.getRadioButtonAt(System.Int32)">
      <summary>Returns the RadioButton control at the specified index.</summary>
      <param name="index">The index of the RadioButton control in the RadioButtonGroup control, where the index of the first control is 0.</param>
    </member>
    <member name="M:mx.controls.RadioButtonGroup.initialized(System.Object,Avm.String)">
      <summary>Implementation of the <code>IMXMLObject.initialized()</code> method to support deferred instantiation.</summary>
      <param name="document">The MXML document that created this object.</param>
      <param name="id">The identifier used by document to refer to this object. If the object is a deep property on document, <code>id</code> is null.</param>
    </member>
    <member name="P:mx.controls.RadioButtonGroup.enabled">
      <summary>Determines whether selection is allowed.</summary>
    </member>
    <member name="P:mx.controls.RadioButtonGroup.labelPlacement">
      <summary>Position of the RadioButton label relative to the RadioButton icon for each control in the group.</summary>
    </member>
    <member name="P:mx.controls.RadioButtonGroup.numRadioButtons">
      <summary>The number of RadioButtons that belong to this RadioButtonGroup.</summary>
    </member>
    <member name="P:mx.controls.RadioButtonGroup.selectedValue">
      <summary>The value of the <code>value</code> property of the selected RadioButton control in the group, if this has been set to be something other than <code>null</code> (the default value).</summary>
    </member>
    <member name="P:mx.controls.RadioButtonGroup.selection">
      <summary>Contains a reference to the currently selected RadioButton control in the group.</summary>
    </member>
    <member name="N:mx.controls.scrollClasses" />
    <member name="T:mx.controls.scrollClasses.ScrollBar">
      <summary>The ScrollBar class is the base class for the HScrollBar and VScrollBar controls.</summary>
    </member>
    <member name="M:mx.controls.scrollClasses.ScrollBar.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.scrollClasses.ScrollBar.setScrollProperties(System.Double,System.Double,System.Double,System.Double)">
      <summary>Sets the range and viewport size of the ScrollBar control.</summary>
      <param name="pageSize">Number which represents the size of one page.</param>
      <param name="minScrollPosition">Number which represents the bottom of the scrolling range.</param>
      <param name="maxScrollPosition">Number which represetns the top of the scrolling range.</param>
      <param name="pageScrollSize">Number which represents the increment to move when the scroll track is pressed.</param>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.direction">
      <summary>Specifies whether the ScrollBar is for horizontal or vertical scrolling.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.downArrowStyleFilters">
      <summary>Set of styles to pass from the ScrollBar to the down arrow.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.lineScrollSize">
      <summary>Amount to scroll when an arrow button is pressed, in pixels.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.maxScrollPosition">
      <summary>Number which represents the maximum scroll position.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.minScrollPosition">
      <summary>Number that represents the minimum scroll position.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.pageScrollSize">
      <summary>Amount to move the scroll thumb when the scroll bar track is pressed, in pixels.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.pageSize">
      <summary>The number of lines equivalent to one page.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.scrollPosition">
      <summary>Number that represents the current scroll position.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.thumbStyleFilters">
      <summary>Set of styles to pass from the ScrollBar to the thumb.</summary>
    </member>
    <member name="P:mx.controls.scrollClasses.ScrollBar.upArrowStyleFilters">
      <summary>Set of styles to pass from the ScrollBar to the up arrow.</summary>
    </member>
    <member name="T:mx.controls.scrollClasses.ScrollBarDirection">
      <summary>The ScrollBarDirection class defines the values for the <code>direction</code> property of the ScrollBar control.</summary>
    </member>
    <member name="F:mx.controls.scrollClasses.ScrollBarDirection.VERTICAL">
      <summary>Specifies that a ScrollBar control is for vertical scrolling.</summary>
    </member>
    <member name="T:mx.controls.scrollClasses.ScrollThumb">
      <summary>The ScrollThumb class defines the thumb of a ScrollBar control.</summary>
    </member>
    <member name="N:mx.controls.sliderClasses" />
    <member name="T:mx.controls.sliderClasses.Slider">
      <summary>The Slider class is the base class for the Flex slider controls.</summary>
    </member>
    <member name="E:mx.controls.sliderClasses.Slider.thumbRelease">
      <summary>Dispatched when the slider's thumb is released, meaning the user releases the mouse button after a <code>thumbPress</code> event.</summary>
    </member>
    <member name="E:mx.controls.sliderClasses.Slider.thumbPress">
      <summary>Dispatched when the slider's thumb is pressed, meaning the user presses the mouse button over the thumb.</summary>
    </member>
    <member name="E:mx.controls.sliderClasses.Slider.thumbDrag">
      <summary>Dispatched when the slider's thumb is pressed and then moved by the mouse.</summary>
    </member>
    <member name="E:mx.controls.sliderClasses.Slider.change">
      <summary>Dispatched when the slider changes value due to mouse or keyboard interaction.</summary>
    </member>
    <member name="M:mx.controls.sliderClasses.Slider.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.sliderClasses.Slider.getThumbAt(System.Int32)">
      <summary>Returns the thumb object at the given index.</summary>
      <param name="index">The zero-based index number of the thumb.</param>
    </member>
    <member name="M:mx.controls.sliderClasses.Slider.measure">
      <summary>Calculates the amount of space that the component takes up.</summary>
    </member>
    <member name="M:mx.controls.sliderClasses.Slider.setThumbValueAt(System.Int32,System.Double)">
      <summary>This method sets the value of a slider thumb, and updates the display.</summary>
      <param name="index">The zero-based index number of the thumb to set the value of, where a value of 0 corresponds to the first thumb.</param>
      <param name="value">The value to set the thumb to</param>
    </member>
    <member name="M:mx.controls.sliderClasses.Slider.updateDisplayList(System.Double,System.Double)">
      <summary>Positions the elements of the control.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="F:mx.controls.sliderClasses.Slider.allowThumbOverlap">
      <summary>If set to <code>false</code>, then each thumb can only be moved to the edge of the adjacent thumb.</summary>
    </member>
    <member name="F:mx.controls.sliderClasses.Slider.allowTrackClick">
      <summary>Specifies whether clicking on the track will move the slider thumb.</summary>
    </member>
    <member name="F:mx.controls.sliderClasses.Slider.liveDragging">
      <summary>Specifies whether live dragging is enabled for the slider.</summary>
    </member>
    <member name="F:mx.controls.sliderClasses.Slider.showDataTip">
      <summary>If set to <code>true</code>, show a data tip during user interaction containing the current value of the slider.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.dataTipFormatFunction">
      <summary>Callback function that formats the data tip text.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.direction">
      <summary>The orientation of the slider control.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.labels">
      <summary>An array of strings used for the slider labels.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.maximum">
      <summary>The maximum allowed value on the slider.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.minimum">
      <summary>The minimum allowed value on the slider control.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.sliderDataTipClass">
      <summary>A reference to the class to use for the data tip.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.sliderThumbClass">
      <summary>A reference to the class to use for each thumb.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.snapInterval">
      <summary>Specifies the increment value of the slider thumb as the user moves the thumb.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.thumbCount">
      <summary>The number of thumbs allowed on the slider.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.thumbStyleFilters">
      <summary>Set of styles to pass from the Slider to the thumbs.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.tickInterval">
      <summary>The spacing of the tick marks relative to the <code>maximum</code> value of the control.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.tickValues">
      <summary>The positions of the tick marks on the slider.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.value">
      <summary>Contains the position of the thumb, and is a number between the <code>minimum</code> and <code>maximum</code> properties.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.Slider.values">
      <summary>An array of values for each thumb when <code>thumbCount</code> is greater than 1.</summary>
    </member>
    <member name="T:mx.controls.sliderClasses.SliderDataTip">
      <summary>The SliderDataTip class defines the tooltip used in the mx.controls.Slider control.</summary>
    </member>
    <member name="T:mx.controls.sliderClasses.SliderDirection">
      <summary>The SliderDirection class defines the constant values for the <code>direction</code> property of the Slider class.</summary>
    </member>
    <member name="F:mx.controls.sliderClasses.SliderDirection.VERTICAL">
      <summary>Specifies to display a vertical slider.</summary>
    </member>
    <member name="T:mx.controls.sliderClasses.SliderLabel">
      <summary>The SliderLabel class defines the label used in the mx.controls.Slider component.</summary>
    </member>
    <member name="T:mx.controls.sliderClasses.SliderThumb">
      <summary>The SliderThumb class represents a thumb of a Slider control.</summary>
    </member>
    <member name="P:mx.controls.sliderClasses.SliderThumb.xPosition">
      <summary>Specifies the position of the center of the thumb on the x-axis.</summary>
    </member>
    <member name="T:mx.controls.Spacer">
      <summary>The Spacer control helps you lay out children within a parent container.</summary>
    </member>
    <member name="T:mx.controls.SWFLoader">
      <summary>The SWFLoader control loads and displays a specified SWF file.</summary>
    </member>
    <member name="E:mx.controls.SWFLoader.unload">
      <summary>Dispatched when a loaded object is removed, or when a second load is performed by the same SWFLoader control and the original content is removed prior to the new load beginning.</summary>
    </member>
    <member name="E:mx.controls.SWFLoader.securityError">
      <summary>Dispatched when a security error occurs while content is loading.</summary>
    </member>
    <member name="E:mx.controls.SWFLoader.progress">
      <summary>Dispatched when content is loading.</summary>
    </member>
    <member name="E:mx.controls.SWFLoader.open">
      <summary>Dispatched when a network operation starts.</summary>
    </member>
    <member name="E:mx.controls.SWFLoader.ioError">
      <summary>Dispatched when an input/output error occurs.</summary>
    </member>
    <member name="E:mx.controls.SWFLoader.init">
      <summary>Dispatched when the properties and methods of a loaded SWF file are accessible.</summary>
    </member>
    <member name="E:mx.controls.SWFLoader.httpStatus">
      <summary>Dispatched when a network request is made over HTTP and Flash Player or AIR can detect the HTTP status code.</summary>
    </member>
    <member name="E:mx.controls.SWFLoader.complete">
      <summary>Dispatched when content loading is complete.</summary>
    </member>
    <member name="M:mx.controls.SWFLoader.load(System.Object)">
      <summary>Loads an image or SWF file.</summary>
      <param name="url">Absolute or relative URL of the GIF, JPEG, PNG, or SWF file to load.</param>
    </member>
    <member name="P:mx.controls.SWFLoader.autoLoad">
      <summary>A flag that indictes whether content starts loading automatically or waits for a clal to the <code>load()</code> method.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.bytesLoaded">
      <summary>The number of bytes of the SWF or image file already loaded.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.bytesTotal">
      <summary>The total size of the SWF or image file.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.content">
      <summary>This property contains the object that represents the content that was loaded in the SWFLoader control.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.contentHeight">
      <summary>Height of the scaled content loaded by the control, in pixels.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.contentWidth">
      <summary>Width of the scaled content loaded by the control, in pixels.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.loaderContext">
      <summary>A LoaderContext object to use to control loading of the content.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.maintainAspectRatio">
      <summary>A flag that indicates whether to maintain the aspect ratio of the loaded content.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.percentLoaded">
      <summary>The percentage of the image or SWF file already loaded.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.scaleContent">
      <summary>A flag that indicates whether to scale the content to fit the size of the control or resize the control to the content's size.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.showBusyCursor">
      <summary>A flag that indicates whether to show a busy cursor while the content loads.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.source">
      <summary>The URL, object, class or string name of a class to load as the content.</summary>
    </member>
    <member name="P:mx.controls.SWFLoader.trustContent">
      <summary>If <code>true</code>, the content is loaded into your security domain.</summary>
    </member>
    <member name="T:mx.controls.TabBar">
      <summary>The TabBar control lets you create a horizontal or vertical group of tab navigation items by defining the labels and data associated with each tab.</summary>
    </member>
    <member name="E:mx.controls.TabBar.itemClick">
      <summary>Dispatched when a tab navigation item is selected.</summary>
    </member>
    <member name="M:mx.controls.TabBar.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.controls.Text">
      <summary>The Text control displays multiline, noneditable text.</summary>
    </member>
    <member name="M:mx.controls.Text.commitProperties" />
    <member name="T:mx.controls.TextArea">
      <summary>The TextArea control is a multiline text field with a border and optional scroll bars.</summary>
    </member>
    <member name="E:mx.controls.TextArea.textInput">
      <summary>Dispatched when the user types, deletes, or pastes text into the control.</summary>
    </member>
    <member name="E:mx.controls.TextArea.link">
      <summary>Dispatched when a user clicks a hyperlink in text defined by the <code>htmlText</code> property, where the URL begins with <code>"event:"</code>.</summary>
    </member>
    <member name="E:mx.controls.TextArea.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="E:mx.controls.TextArea.change">
      <summary>Dispatched when text in the TextArea control changes through user input.</summary>
    </member>
    <member name="M:mx.controls.TextArea.getLineMetrics(System.Int32)">
      <summary>Returns a TextLineMetrics object with information about the text position and measurements for a line of text in the control.</summary>
      <param name="lineIndex">The zero-based index of the line for which to get the metrics.</param>
    </member>
    <member name="M:mx.controls.TextArea.setSelection(System.Int32,System.Int32)">
      <summary>Selects the text in the range specified by the parameters.</summary>
      <param name="beginIndex">The zero-based index of the first character in the selection; that is, the first character is 0, the second character is 1, and so on.</param>
      <param name="endIndex">The zero-based index of the position <i>after</i> the last character in the selection (equivalent to the one-based index of the last character). If the parameter is 5, the last character in the selection, for example, is the fifth character. When the TextArea control gets the focus, the selection is visible if the <code>selectionBeginIndex</code> and <code>selectionEndIndex</code> properties are both set.</param>
    </member>
    <member name="F:mx.controls.TextArea.textField">
      <summary>The internal UITextField that renders the text of this TextArea.</summary>
    </member>
    <member name="P:mx.controls.TextArea.condenseWhite">
      <summary>Specifies whether extra white space (spaces, line breaks, and so on) should be removed in a TextArea control with HTML text.</summary>
    </member>
    <member name="P:mx.controls.TextArea.data">
      <summary>Lets you pass a value to the component when you use it in an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.TextArea.displayAsPassword">
      <summary>Indicates whether this control is used for entering passwords.</summary>
    </member>
    <member name="P:mx.controls.TextArea.editable">
      <summary>Indicates whether the user is allowed to edit the text in this control.</summary>
    </member>
    <member name="P:mx.controls.TextArea.horizontalScrollPolicy">
      <summary>Specifies whether the horizontal scroll bar is always on (<code>ScrollPolicy.ON</code>), always off (<code>ScrollPolicy.OFF</code>), or turns on when needed (<code>ScrollPolicy.AUTO</code>).</summary>
    </member>
    <member name="P:mx.controls.TextArea.htmlText">
      <summary>Specifies the text displayed by the TextArea control, including HTML markup that expresses the styles of that text.</summary>
    </member>
    <member name="P:mx.controls.TextArea.imeMode">
      <summary>Specifies the IME (input method editor) mode.</summary>
    </member>
    <member name="P:mx.controls.TextArea.length">
      <summary>The number of characters of text displayed in the TextArea.</summary>
    </member>
    <member name="P:mx.controls.TextArea.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the list control.</summary>
    </member>
    <member name="P:mx.controls.TextArea.maxChars">
      <summary>Maximum number of characters that users can enter in the text field.</summary>
    </member>
    <member name="P:mx.controls.TextArea.restrict">
      <summary>Indicates the set of characters that a user can enter into the control.</summary>
    </member>
    <member name="P:mx.controls.TextArea.selectable">
      <summary>Specifies whether the text can be selected.</summary>
    </member>
    <member name="P:mx.controls.TextArea.selectionBeginIndex">
      <summary>The zero-based character index value of the first character in the current selection.</summary>
    </member>
    <member name="P:mx.controls.TextArea.selectionEndIndex">
      <summary>The zero-based index of the position <i>after</i>the last character in the current selection (equivalent to the one-based index of the last character).</summary>
    </member>
    <member name="P:mx.controls.TextArea.styleSheet">
      <summary>A flash.text.StyleSheet object that can perform rendering on the TextArea control's text.</summary>
    </member>
    <member name="P:mx.controls.TextArea.text">
      <summary>Plain text that appears in the control.</summary>
    </member>
    <member name="P:mx.controls.TextArea.textHeight">
      <summary>The height of the text.</summary>
    </member>
    <member name="P:mx.controls.TextArea.textWidth">
      <summary>The width of the text.</summary>
    </member>
    <member name="P:mx.controls.TextArea.verticalScrollPolicy">
      <summary>Whether the vertical scroll bar is always on (<code>ScrollPolicy.ON</code>), always off (<code>ScrollPolicy.OFF</code>), or turns on when needed (<code>ScrollPolicy.AUTO</code>).</summary>
    </member>
    <member name="P:mx.controls.TextArea.wordWrap">
      <summary>Indicates whether the text automatically wraps at the end of a line.</summary>
    </member>
    <member name="P:mx.controls.TextArea.horizontalScrollPosition">
      <summary>Pixel position in the content area of the leftmost pixel that is currently displayed.</summary>
    </member>
    <member name="P:mx.controls.TextArea.verticalScrollPosition">
      <summary>Line number of the top row of characters that is currently displayed.</summary>
    </member>
    <member name="N:mx.controls.textClasses" />
    <member name="T:mx.controls.textClasses.TextRange">
      <summary>The TextRange class provides properties that select and format a range of text in the Label, Text, TextArea, TextEditor, and RichTextEditor controls.</summary>
    </member>
    <member name="M:mx.controls.textClasses.TextRange.#ctor(mx.core.UIComponent,System.Boolean,System.Int32,System.Int32)">
      <summary>Create a new TextRange Object that represents a subset of the contents of a text control, including the formatting information.</summary>
      <param name="owner">The control that contains the text. The control must have a <code>textField</code> property, or, as is the case of the RichTextEditor control, a <code>textArea</code> property.</param>
      <param name="modifiesSelection">Whether to select the text in the range. If you set this parameter to <code>true</code> and do not specify a begin or end index that corresponds to text in the control, Flex uses the begin or end index of the current text selection. If this parameter is <code>true</code>, you omit the <code>beginIndex</code> and <code>endIndex</code> parameters, and there is no selection, the TextRange object is empty.</param>
      <param name="beginIndex">Zero-based index of the first character in the range. If the <code>modifiesSelection</code> parameter is <code>false</code> and you omit this parameter or specify a negative value, the range starts with the first text character.</param>
      <param name="endIndex">Zero-based index of the position <i>after</i> the last character in the range. If the <code>modifiesSelection</code> parameter is <code>false</code> and you omit this parameter, specify a negative value, or specify a value past the end of the text, the range ends with the last text character.</param>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.beginIndex">
      <summary>Zero-based index in the control's text field of the first character in the range.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.bullet">
      <summary>Whether the text in the range is in a bulleted list.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.color">
      <summary>Color of the text in the range.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.endIndex">
      <summary>Zero-based index in the control's text field of the point immediately after the last character in the range; equivalent to the One-based index of the last character.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.fontFamily">
      <summary>Name of the font for text in the range.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.fontSize">
      <summary>Point size of the text in the range.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.fontStyle">
      <summary>Style of the font in the range, as "italic" or "normal".</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.fontWeight">
      <summary>Weight of the font in the range, as "bold" or "normal".</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.htmlText">
      <summary>Contents of the range in the form of HTML text.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.kerning">
      <summary>A Boolean value that indicates whether kerning is enabled (<code>true</code>) or disabled (<code>false</code>).</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.letterSpacing">
      <summary>The number of additional pixels to appear between each character.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.modifiesSelection">
      <summary>Whether the TextRange modifies the currenly selected text.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.owner">
      <summary>The control that contains the text.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.text">
      <summary>Plain-text contents of the range.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.textAlign">
      <summary>Alignment of the text in the range.</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.textDecoration">
      <summary>Decoration of the font in the range, as "underline" or "normal".</summary>
    </member>
    <member name="P:mx.controls.textClasses.TextRange.url">
      <summary>URL for a hypertext link in the range.</summary>
    </member>
    <member name="T:mx.controls.TextInput">
      <summary>The TextInput control is a single-line text field that is optionally editable.</summary>
    </member>
    <member name="E:mx.controls.TextInput.textInput">
      <summary>Dispatched when the user types, deletes, or pastes text into the control.</summary>
    </member>
    <member name="E:mx.controls.TextInput.enter">
      <summary>Dispatched when the user presses the Enter key.</summary>
    </member>
    <member name="E:mx.controls.TextInput.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="E:mx.controls.TextInput.change">
      <summary>Dispatched when text in the TextInput control changes through user input.</summary>
    </member>
    <member name="M:mx.controls.TextInput.createBorder">
      <summary>Creates the border for this component.</summary>
    </member>
    <member name="M:mx.controls.TextInput.getLineMetrics(System.Int32)">
      <summary>Returns a TextLineMetrics object with information about the text position and measurements for a line of text in the control.</summary>
      <param name="lineIndex">The zero-based index of the line for which to get the metrics.</param>
    </member>
    <member name="M:mx.controls.TextInput.setSelection(System.Int32,System.Int32)">
      <summary>Selects the text in the range specified by the parameters.</summary>
      <param name="beginIndex">The zero-based index of the first character in the selection; that is, the first character is 0, the second character is 1, and so on.</param>
      <param name="endIndex">The zero-based index of the position <i>after</i> the last character in the selection (equivalent to the one-based index of the last character). If the parameter is 5, the last character in the selection, for example, is the fifth character. When the TextInput control gets the focus, the selection is visible if the <code>selectionBeginIndex</code> and <code>selectionEndIndex</code> properties are both set.</param>
    </member>
    <member name="F:mx.controls.TextInput.textField">
      <summary>The internal UITextField that renders the text of this TextInput.</summary>
    </member>
    <member name="P:mx.controls.TextInput.condenseWhite">
      <summary>Specifies whether extra white space (spaces, line breaks, and so on) should be removed in a TextInput control with HTML text.</summary>
    </member>
    <member name="P:mx.controls.TextInput.data">
      <summary>Lets you pass a value to the component when you use it in an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.controls.TextInput.displayAsPassword">
      <summary>Indicates whether this control is used for entering passwords.</summary>
    </member>
    <member name="P:mx.controls.TextInput.editable">
      <summary>Indicates whether the user is allowed to edit the text in this control.</summary>
    </member>
    <member name="P:mx.controls.TextInput.fontContext">
      <summary>The module factory that provides the font context for this component.</summary>
    </member>
    <member name="P:mx.controls.TextInput.horizontalScrollPosition">
      <summary>Pixel position in the content area of the leftmost pixel that is currently displayed.</summary>
    </member>
    <member name="P:mx.controls.TextInput.htmlText">
      <summary>Specifies the text displayed by the TextInput control, including HTML markup that expresses the styles of that text.</summary>
    </member>
    <member name="P:mx.controls.TextInput.imeMode">
      <summary>Specifies the IME (input method editor) mode.</summary>
    </member>
    <member name="P:mx.controls.TextInput.length">
      <summary>The number of characters of text displayed in the TextArea.</summary>
    </member>
    <member name="P:mx.controls.TextInput.listData">
      <summary>When a component is used as a drop-in item renderer or drop-in item editor, Flex initializes the <code>listData</code> property of the component with the appropriate data from the list control.</summary>
    </member>
    <member name="P:mx.controls.TextInput.maxChars">
      <summary>Maximum number of characters that users can enter in the text field.</summary>
    </member>
    <member name="P:mx.controls.TextInput.restrict">
      <summary>Indicates the set of characters that a user can enter into the control.</summary>
    </member>
    <member name="P:mx.controls.TextInput.selectionBeginIndex">
      <summary>The zero-based character index value of the first character in the current selection.</summary>
    </member>
    <member name="P:mx.controls.TextInput.selectionEndIndex">
      <summary>The zero-based index of the position <i>after</i> the last character in the current selection (equivalent to the one-based index of the last character).</summary>
    </member>
    <member name="P:mx.controls.TextInput.text">
      <summary>Plain text that appears in the control.</summary>
    </member>
    <member name="P:mx.controls.TextInput.textHeight">
      <summary>The height of the text.</summary>
    </member>
    <member name="P:mx.controls.TextInput.textWidth">
      <summary>The width of the text.</summary>
    </member>
    <member name="T:mx.controls.TileList">
      <summary>The TileList control displays a number of items laid out in tiles.</summary>
    </member>
    <member name="T:mx.controls.ToggleButtonBar">
      <summary>The ToggleButtonBar control defines a horizontal or vertical group of buttons that maintain their selected or deselected state.</summary>
    </member>
    <member name="P:mx.controls.ToggleButtonBar.selectedIndex">
      <summary>Index of the selected button.</summary>
    </member>
    <member name="P:mx.controls.ToggleButtonBar.toggleOnClick">
      <summary>Specifies whether the currently selected button can be deselected by the user.</summary>
    </member>
    <member name="T:mx.controls.ToolTip">
      <summary>The ToolTip control lets you provide helpful information to your users.</summary>
    </member>
    <member name="M:mx.controls.ToolTip.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="F:mx.controls.ToolTip.textField">
      <summary>The internal UITextField that renders the text of this ToolTip.</summary>
    </member>
    <member name="P:mx.controls.ToolTip.text">
      <summary>The text displayed by the ToolTip.</summary>
    </member>
    <member name="T:mx.controls.Tree">
      <summary>The Tree control lets a user view hierarchical data arranged as an expandable tree.</summary>
    </member>
    <member name="E:mx.controls.Tree.itemOpening">
      <summary>Dispatched when a branch open or close is initiated.</summary>
    </member>
    <member name="E:mx.controls.Tree.itemOpen">
      <summary>Dispatched when a branch is opened or expanded.</summary>
    </member>
    <member name="E:mx.controls.Tree.itemClose">
      <summary>Dispatched when a branch is closed or collapsed.</summary>
    </member>
    <member name="M:mx.controls.Tree.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.Tree.dragCompleteHandler(mx.events.DragEvent)">
      <summary>Handles <code>DragEvent.DRAG_COMPLETE</code> events.</summary>
      <param name="event">The DragEvent object.</param>
    </member>
    <member name="M:mx.controls.Tree.dragDropHandler(mx.events.DragEvent)">
      <summary>Handles <code>DragEvent.DRAG_DROP events</code>.</summary>
      <param name="event">The DragEvent object.</param>
    </member>
    <member name="M:mx.controls.Tree.expandChildrenOf(System.Object,System.Boolean)">
      <summary>Opens or closes all the tree items below the specified item.</summary>
      <param name="item">The starting item.</param>
      <param name="open">Toggles an open or close operation. Specify <code>true</code> to open the items, and <code>false</code> to close them.</param>
    </member>
    <member name="M:mx.controls.Tree.expandItem(System.Object,System.Boolean,System.Boolean,System.Boolean,flash.events.Event)">
      <summary>Opens or closes a branch item.</summary>
      <param name="item">Item to affect.</param>
      <param name="open">Specify <code>true</code> to open, <code>false</code> to close.</param>
      <param name="animate">Specify <code>true</code> to animate the transition. (Note: If a branch has over 20 children, it does not animate the first time it opens, for performance reasons.)</param>
      <param name="dispatchEvent">Controls whether the tree fires an <code>open</code> event after the open animation is complete.</param>
      <param name="cause">The event, if any, that initiated the item open action.</param>
    </member>
    <member name="M:mx.controls.Tree.getParentItem(System.Object)">
      <summary>Returns the known parent of a child item.</summary>
      <param name="item">item for which to get the parent.</param>
    </member>
    <member name="M:mx.controls.Tree.initListData(System.Object,mx.controls.treeClasses.TreeListData)">
      <summary>Initializes a TreeListData object that is used by the tree item renderer.</summary>
      <param name="item">The item to be rendered.</param>
      <param name="treeListData">The TreeListDataItem to use in rendering the item.</param>
    </member>
    <member name="M:mx.controls.Tree.isItemOpen(System.Object)">
      <summary>Returns <code>true</code> if the specified item branch is open (is showing its children).</summary>
      <param name="item">Item to inspect.</param>
    </member>
    <member name="M:mx.controls.Tree.makeListData(System.Object,Avm.String,System.Int32)">
      <summary>Creates a new TreeListData instance and populates the fields based on the input data provider item.</summary>
      <param name="data">The data provider item used to populate the ListData.</param>
      <param name="uid">The UID for the item.</param>
      <param name="rowNum">The index of the item in the data provider.</param>
    </member>
    <member name="M:mx.controls.Tree.setItemIcon(System.Object,Avm.Class,Avm.Class)">
      <summary>Sets the associated icon for the item.</summary>
      <param name="item">Item to affect.</param>
      <param name="iconID">Linkage ID for the closed (or leaf) icon.</param>
      <param name="iconID2">Linkage ID for the open icon.</param>
    </member>
    <member name="F:mx.controls.Tree.itemIcons">
      <summary>An object that specifies the icons for the items.</summary>
    </member>
    <member name="P:mx.controls.Tree.dataDescriptor">
      <summary>Returns the current ITreeDataDescriptor.</summary>
    </member>
    <member name="P:mx.controls.Tree.dragMoveEnabled">
      <summary>Indicates that items can be moved instead of just copied from the Tree control as part of a drag-and-drop operation.</summary>
    </member>
    <member name="P:mx.controls.Tree.firstVisibleItem">
      <summary>The item that is currently displayed in the top row of the tree.</summary>
    </member>
    <member name="P:mx.controls.Tree.hasRoot">
      <summary>Indicates that the current dataProvider has a root item; for example, a single top node in a hierarchical structure.</summary>
    </member>
    <member name="P:mx.controls.Tree.maxHorizontalScrollPosition">
      <summary>The maximum value for the <code>maxHorizontalScrollPosition</code> property for the Tree control.</summary>
    </member>
    <member name="P:mx.controls.Tree.openItems">
      <summary>The items that have been opened or set opened.</summary>
    </member>
    <member name="P:mx.controls.Tree.showRoot">
      <summary>Sets the visibility of the root item.</summary>
    </member>
    <member name="P:mx.controls.Tree.dataProvider">
      <summary>An object that contains the data to be displayed.</summary>
    </member>
    <member name="N:mx.controls.treeClasses" />
    <member name="T:mx.controls.treeClasses.DefaultDataDescriptor">
      <summary>The DefaultDataDescriptor class provides a default implementation for accessing and manipulating data for use in controls such as Tree and Menu.</summary>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.addChildAt(System.Object,System.Object,System.Int32,System.Object)">
      <summary>Add a child node to a node at the specified index.</summary>
      <param name="parent">The node object that will parent the child</param>
      <param name="newChild">The node object that will be parented by the node</param>
      <param name="index">The 0-based index of where to put the child node relative to the parent</param>
      <param name="model">The entire collection that this node is a part of</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.getChildren(System.Object,System.Object)">
      <summary>Provides access to a node's children.</summary>
      <param name="node">The node object currently being evaluated.</param>
      <param name="model">The collection that contains the node; ignored by this class.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.getData(System.Object,System.Object)">
      <summary>Returns a node's data.</summary>
      <param name="node">The node object currently being evaluated.</param>
      <param name="model">The collection that contains the node; ignored by this class.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.getGroupName(System.Object)">
      <summary>Returns the name of the radio button group to which the node belongs, if any.</summary>
      <param name="node">The node for which to get the group name.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.getHierarchicalCollectionAdaptor(mx.collections.ICollectionView,Avm.Function,System.Object,System.Object)">
      <summary>Returns an ICollectionView instance that makes the hierarchical data appear as if it was a linear ICollectionView instance.</summary>
      <param name="hierarchicalData">The hierarchical data.</param>
      <param name="uidFunction">A function that takes an Object and returns the UID, as a String. This parameter is usually the <code>Tree.itemToUID()</code> method.</param>
      <param name="openItems">The items that have been opened or set opened.</param>
      <param name="model">The collection to which this node belongs.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.getNodeDepth(System.Object,mx.collections.IViewCursor,System.Object)">
      <summary>Returns the depth of the node, meaning the number of ancestors it has.</summary>
      <param name="node">The Object that defines the node.</param>
      <param name="iterator">An IViewCursor instance that could be used to do the calculation.</param>
      <param name="model">The collection to which this node belongs.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.getParent(System.Object,mx.collections.ICollectionView,System.Object)">
      <summary>Returns the parent of the node The parent of a top-level node is <code>null</code>.</summary>
      <param name="node">The Object that defines the node.</param>
      <param name="collection">An ICollectionView instance that could be used to do the calculation.</param>
      <param name="model">The collection to which this node belongs.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.getType(System.Object)">
      <summary>Returns the type identifier of a node.</summary>
      <param name="node">The node object for which to get the type.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.hasChildren(System.Object,System.Object)">
      <summary>Returns true if the node actually has children.</summary>
      <param name="node">The node object currently being evaluated.</param>
      <param name="model">The collection that contains the node; ignored by this class.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.isBranch(System.Object,System.Object)">
      <summary>Tests a node for termination.</summary>
      <param name="node">The node object currently being evaluated.</param>
      <param name="model">The collection that contains the node; ignored by this class.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.isEnabled(System.Object)">
      <summary>Returns whether the node is enabled.</summary>
      <param name="node">The node for which to get the status.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.isToggled(System.Object)">
      <summary>Returns whether the node is toggled.</summary>
      <param name="node">The node for which to get the status.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.removeChildAt(System.Object,System.Object,System.Int32,System.Object)">
      <summary>Removes the child node from a node at the specified index.</summary>
      <param name="parent">The node object that currently parents the child node</param>
      <param name="child">The node that is being removed</param>
      <param name="index">The 0-based index of  the child node to remove relative to the parent</param>
      <param name="model">The entire collection that this node is a part of</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.setEnabled(System.Object,System.Boolean)">
      <summary>Sets the value of the field or attribute in the data provider that identifies whether the node is enabled.</summary>
      <param name="node">The node for which to set the status.</param>
      <param name="value">Whether the node is enabled.</param>
    </member>
    <member name="M:mx.controls.treeClasses.DefaultDataDescriptor.setToggled(System.Object,System.Boolean)">
      <summary>Sets the value of the field or attribute in the data provider that identifies whether the node is toggled.</summary>
      <param name="node">The node for which to set the status.</param>
      <param name="value">Whether the node is toggled.</param>
    </member>
    <member name="T:mx.controls.treeClasses.ITreeDataDescriptor">
      <summary>Interface providing methods for parsing and adding nodes to a collection of data that is displayed by a Tree control.</summary>
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor.addChildAt(System.Object,System.Object,System.Int32,System.Object)">
      <summary>Adds a child node to a node at the specified index.</summary>
      <param name="parent">The node object that will parent the child.</param>
      <param name="newChild">The node object that will be parented by the node.</param>
      <param name="index">The 0-based index of where to put the child node.</param>
      <param name="model">The entire collection that this node is a part of</param>
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor.getChildren(System.Object,System.Object)">
      <summary>Provides access to a node's children, returning a collection view of children if they exist.</summary>
      <param name="node">The node object currently being evaluated.</param>
      <param name="model">The entire collection that this node is a part of.</param>
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor.getData(System.Object,System.Object)">
      <summary>Gets the data from a node.</summary>
      <param name="node">The node object from which to get the data.</param>
      <param name="model">The collection that contains the node.</param>
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor.hasChildren(System.Object,System.Object)">
      <summary>Tests for the existence of children in a non-terminating node.</summary>
      <param name="node" />
      <param name="model" />
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor.isBranch(System.Object,System.Object)">
      <summary>Tests a node for termination.</summary>
      <param name="node">The node object currently being evaluated.</param>
      <param name="model">The entire collection that this node is a part of.</param>
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor.removeChildAt(System.Object,System.Object,System.Int32,System.Object)">
      <summary>Removes a child node to a node at the specified index.</summary>
      <param name="parent">The node object that is the parent of the child.</param>
      <param name="child">The node object that will be removed.</param>
      <param name="index">The 0-based index of the soon to be deleted node.</param>
      <param name="model">The entire collection that this node is a part of</param>
    </member>
    <member name="T:mx.controls.treeClasses.ITreeDataDescriptor2">
      <summary>The ITreeDataDescriptor2 Interface defines methods for parsing and adding nodes to a collection of data that is displayed by a Tree control.</summary>
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor2.getHierarchicalCollectionAdaptor(mx.collections.ICollectionView,Avm.Function,System.Object,System.Object)">
      <summary>Returns an ICollectionView instance that makes the hierarchical data appear as if it was a linear ICollectionView instance.</summary>
      <param name="hierarchicalData">The hierarchical data.</param>
      <param name="uidFunction">A function that takes an Object and returns the UID, as a String. This parameter is usually the <code>Tree.itemToUID()</code> method.</param>
      <param name="openItems">The items that have been opened or set opened.</param>
      <param name="model">The collection to which this node belongs.</param>
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor2.getNodeDepth(System.Object,mx.collections.IViewCursor,System.Object)">
      <summary>Returns the depth of the node, meaning the number of ancestors it has.</summary>
      <param name="node">The Object that defines the node.</param>
      <param name="iterator">An IViewCursor instance that could be used to do the calculation.</param>
      <param name="model">The collection to which this node belongs.</param>
    </member>
    <member name="M:mx.controls.treeClasses.ITreeDataDescriptor2.getParent(System.Object,mx.collections.ICollectionView,System.Object)">
      <summary>Returns the parent of the node The parent of a top-level node is <code>null</code>.</summary>
      <param name="node">The Object that defines the node.</param>
      <param name="collection">An ICollectionView instance that could be used to do the calculation.</param>
      <param name="model">The collection to which this node belongs.</param>
    </member>
    <member name="T:mx.controls.treeClasses.TreeItemRenderer">
      <summary>The TreeItemRenderer class defines the default item renderer for a Tree control.</summary>
    </member>
    <member name="E:mx.controls.treeClasses.TreeItemRenderer.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeItemRenderer.disclosureIcon">
      <summary>The internal IFlexDisplayObject that displays the disclosure icon in this renderer.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeItemRenderer.icon">
      <summary>The internal IFlexDisplayObject that displays the icon in this renderer.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeItemRenderer.label">
      <summary>The internal UITextField that displays the text in this renderer.</summary>
    </member>
    <member name="P:mx.controls.treeClasses.TreeItemRenderer.data">
      <summary>The implementation of the <code>data</code> property as defined by the IDataRenderer interface.</summary>
    </member>
    <member name="P:mx.controls.treeClasses.TreeItemRenderer.listData">
      <summary>The implementation of the <code>listData</code> property as defined by the IDropInListItemRenderer interface.</summary>
    </member>
    <member name="T:mx.controls.treeClasses.TreeListData">
      <summary>The TreeListData class defines the data type of the <code>listData</code> property implemented by drop-in item renderers or drop-in item editors for the Tree control.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeListData.depth">
      <summary>The level of the item in the tree.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeListData.disclosureIcon">
      <summary>A Class representing the disclosure icon for the item in the Tree control.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeListData.hasChildren">
      <summary>Contains <code>true</code> if the node has children.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeListData.icon">
      <summary>A Class representing the icon for the item in the Tree control.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeListData.indent">
      <summary>The default indentation for this row of the Tree control.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeListData.item">
      <summary>The data for this item in the Tree control.</summary>
    </member>
    <member name="F:mx.controls.treeClasses.TreeListData.open">
      <summary>Contains <code>true</code> if the node is open.</summary>
    </member>
    <member name="N:mx.controls.videoClasses" />
    <member name="T:mx.controls.videoClasses.CuePointManager">
      <summary>The CuePointManager class lets you use ActionScript code to manage the cue points associated with the VideoDisplay control.</summary>
    </member>
    <member name="M:mx.controls.videoClasses.CuePointManager.#ctor(mx.controls.videoClasses.VideoPlayer,System.UInt32)">
      <summary>Constructor.</summary>
      <param name="owner" />
      <param name="id" />
    </member>
    <member name="M:mx.controls.videoClasses.CuePointManager.addCuePoint(System.Object)">
      <summary>Adds a cue point.</summary>
      <param name="cuePoint">The Object describes the cue point.  It must contain the properties <code>name:String</code> and <code>time:Number</code> (in seconds). If the Object does not conform to these conventions, it throws a <code>VideoError</code> error.</param>
    </member>
    <member name="M:mx.controls.videoClasses.CuePointManager.getCuePointByName(Avm.String)">
      <summary>Search for a cue point with specified name.</summary>
      <param name="name">The name of the cue point.</param>
    </member>
    <member name="M:mx.controls.videoClasses.CuePointManager.getCuePoints">
      <summary>Returns an Array of all cue points.</summary>
    </member>
    <member name="M:mx.controls.videoClasses.CuePointManager.removeAllCuePoints">
      <summary>Removes all cue points.</summary>
    </member>
    <member name="M:mx.controls.videoClasses.CuePointManager.removeCuePoint(System.Object)">
      <summary>Removes a cue point from the currently loaded FLV file.</summary>
      <param name="cuePoint">The Object must contain at least one of <code>name:String</code> and <code>time:Number</code> properties, and removes the cue point that matches the specified properties.</param>
    </member>
    <member name="M:mx.controls.videoClasses.CuePointManager.setCuePoints(Avm.Array)">
      <summary>Set the array of cue points.</summary>
      <param name="cuePointArray">An Array of cue point objects. Each cue point object describes the cue point. It must contain the properties <code>name:String</code> and <code>time:Number</code> (in seconds).</param>
    </member>
    <member name="T:mx.controls.videoClasses.VideoError">
      <summary>The VideoError class represents the error codes for errors thrown by the VideoDisplay control.</summary>
    </member>
    <member name="M:mx.controls.videoClasses.VideoError.#ctor(System.UInt32,Avm.String)">
      <summary>Constructor</summary>
      <param name="errCode">error code.</param>
      <param name="msg">The error message.</param>
    </member>
    <member name="F:mx.controls.videoClasses.VideoError.DELETE_DEFAULT_PLAYER">
      <summary>Cannot delete default VideoPlayer</summary>
    </member>
    <member name="F:mx.controls.videoClasses.VideoError.ILLEGAL_CUE_POINT">
      <summary>Illegal cue point.</summary>
    </member>
    <member name="F:mx.controls.videoClasses.VideoError.INVALID_CONTENT_PATH">
      <summary>Invalid content path.</summary>
    </member>
    <member name="F:mx.controls.videoClasses.VideoError.INVALID_SEEK">
      <summary>Invalid seek.</summary>
    </member>
    <member name="F:mx.controls.videoClasses.VideoError.INVALID_XML">
      <summary>Invalid XML.</summary>
    </member>
    <member name="F:mx.controls.videoClasses.VideoError.NO_BITRATE_MATCH">
      <summary>No bitrate match.</summary>
    </member>
    <member name="F:mx.controls.videoClasses.VideoError.NO_CONNECTION">
      <summary>Unable to make connection to server or to find FLV on server.</summary>
    </member>
    <member name="F:mx.controls.videoClasses.VideoError.NO_CUE_POINT_MATCH">
      <summary>No matching cue point found.</summary>
    </member>
    <member name="P:mx.controls.videoClasses.VideoError.code">
      <summary>Contains the error code.</summary>
    </member>
    <member name="T:mx.controls.VideoDisplay">
      <summary>The VideoDisplay control lets you play an FLV file in a Flex application.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.stateChange">
      <summary>Dispatched when the state of the control changes.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.rewind">
      <summary>Dispatched when the control autorewinds.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.ready">
      <summary>Dispatched when the FLV file is loaded and ready to play.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.progress">
      <summary>Dispatched continuously until the FLV file has downloaded completely.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.playheadUpdate">
      <summary>Dispatched continuosly while the video is playing.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.metadataReceived">
      <summary>Dispatched the first time metadata in the FLV file is reached.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.cuePoint">
      <summary>Dispatched when the value of a cue point's <code>time</code> property is equal to the current playhead location.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.complete">
      <summary>Dispatched when the playhead reaches the end of the FLV file.</summary>
    </member>
    <member name="E:mx.controls.VideoDisplay.close">
      <summary>Dispatched when the NetConnection object is closed, whether by timing out or by calling the <code>close()</code> method.</summary>
    </member>
    <member name="M:mx.controls.VideoDisplay.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.controls.VideoDisplay.attachCamera(flash.media.Camera)">
      <summary>Specifies whether to play a video stream from a camera.</summary>
      <param name="camera">A Camera object that is capturing video data.</param>
    </member>
    <member name="M:mx.controls.VideoDisplay.close">
      <summary>Forces the close of an input stream and connection to Flash Media Server.</summary>
    </member>
    <member name="M:mx.controls.VideoDisplay.createBorder">
      <summary>Creates the border for this component.</summary>
    </member>
    <member name="M:mx.controls.VideoDisplay.layoutChrome(System.Double,System.Double)">
      <summary>Responds to size changes by setting the positions and sizes of the borders.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="M:mx.controls.VideoDisplay.load">
      <summary>Loads the media file without playing it.</summary>
    </member>
    <member name="M:mx.controls.VideoDisplay.pause">
      <summary>Pauses playback without moving the playhead.</summary>
    </member>
    <member name="M:mx.controls.VideoDisplay.play">
      <summary>Plays the media file.</summary>
    </member>
    <member name="M:mx.controls.VideoDisplay.stop">
      <summary>Stops playback.</summary>
    </member>
    <member name="F:mx.controls.VideoDisplay.border">
      <summary>The border object for the control.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.autoBandWidthDetection">
      <summary>Specifies whether the VideoDisplay control should use the built-in automatic bandwidth detection feature.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.autoPlay">
      <summary>Specifies whether the video should start playing immediately when the <code>source</code> property is set.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.autoRewind">
      <summary>Specifies whether the FLV file should be rewound to the first frame when play stops, either by calling the <code>stop()</code> method or by reaching the end of the stream.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.borderMetrics">
      <summary>Returns an EdgeMetrics object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.bufferTime">
      <summary>Number of seconds of video to buffer in memory before starting to play the video file.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.bytesLoaded">
      <summary>Number of bytes already loaded that are available for playing.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.bytesTotal">
      <summary>Total number of bytes to load.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.cuePointManager">
      <summary>The instance of the CuePointManager class associated with the VideoPlayer control.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.cuePointManagerClass">
      <summary>Cue point manager to use.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.cuePoints">
      <summary>The Array of cue points associated with the control.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.idleTimeout">
      <summary>Specifies the amount of time, in milliseconds, that the connection is idle (playing is paused or stopped) before the connection to the Flash Media Server is stopped.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.live">
      <summary>Specifies whether the control is streaming a live feed.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.maintainAspectRatio">
      <summary>Specifies whether the control should maintain the original aspect ratio while resizing the video.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.metadata">
      <summary>An object that contains a metadata information packet that is received from a call to the <code>NetSteam.onMetaData()</code> callback method, if available.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.playheadTime">
      <summary>Playhead position, measured in seconds, since the video starting playing.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.playheadUpdateInterval">
      <summary>Specifies the amount of time, in milliseconds, between each <code>playheadUpdate</code> event.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.playing">
      <summary>If <code>true</code>, the media is currently playing.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.progressInterval">
      <summary>Specifies the amount of time, in milliseconds, between each <code>progress</code> event.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.source">
      <summary>Relative path and filename of the FLV file to stream.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.state">
      <summary>The current state of the VideoDisplay control.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.stateResponsive">
      <summary>Specifies whether the VideoDisplay control is in a responsive state, <code>true</code>, or in the unresponsive state, <code>false</code>.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.totalTime">
      <summary>Total length of the media, in seconds.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.videoHeight">
      <summary>Height of the loaded FLV file.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.videoWidth">
      <summary>Width of the loaded FLV file.</summary>
    </member>
    <member name="P:mx.controls.VideoDisplay.volume">
      <summary>The volume level, specified as an value between 0 and 1.</summary>
    </member>
    <member name="T:mx.controls.VRule">
      <summary>The VRule control creates a single vertical line.</summary>
    </member>
    <member name="M:mx.controls.VRule.#ctor">
      <summary>Constructor</summary>
    </member>
    <member name="T:mx.controls.VScrollBar">
      <summary>The VScrollBar (vertical ScrollBar) control  lets you control the portion of data that is displayed when there is too much data to fit in a display area.</summary>
    </member>
    <member name="E:mx.controls.VScrollBar.scroll">
      <summary>Dispatched when the ScrollBar control scrolls through user initiated action or programmatically.</summary>
    </member>
    <member name="T:mx.controls.VSlider">
      <summary>The VSlider control lets users select a value by moving a slider thumb between the end points of the slider track.</summary>
    </member>
    <member name="N:mx.core" />
    <member name="T:mx.core.Application">
      <summary>Flex defines a default, or Application, container that lets you start adding content to your application without explicitly defining another container.</summary>
    </member>
    <member name="E:mx.core.Application.error">
      <summary>Dispatched when an error occurs anywhere in the application, such as an HTTPService, WebService, or RemoteObject fails.</summary>
    </member>
    <member name="E:mx.core.Application.applicationComplete">
      <summary>Dispatched after the Application has been initialized, processed by the LayoutManager, and attached to the display list.</summary>
    </member>
    <member name="M:mx.core.Application.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.core.Application.addToCreationQueue(System.Object,System.Int32,Avm.Function,mx.core.IFlexDisplayObject)">
      <summary>Add a container to the Application's creation queue.</summary>
      <param name="id">The id of the container to add to the queue or a pointer to the container itself</param>
      <param name="preferredIndex">(optional) A positive integer that determines the container's position in the queue relative to the other containers presently in the queue.</param>
      <param name="callbackFunc">This parameter is ignored.</param>
      <param name="parent">This parameter is ignored.</param>
    </member>
    <member name="F:mx.core.Application.controlBar">
      <summary>The ApplicationControlBar for this Application.</summary>
    </member>
    <member name="F:mx.core.Application.frameRate">
      <summary>Specifies the frame rate of the application.</summary>
    </member>
    <member name="F:mx.core.Application.historyManagementEnabled">
      <summary>If <code>false</code>, the history manager will be disabled.</summary>
    </member>
    <member name="F:mx.core.Application.pageTitle">
      <summary>Specifies a string that appears in the title bar of the browser.</summary>
    </member>
    <member name="F:mx.core.Application.preloader">
      <summary>Specifies the path of a SWC component class or ActionScript component class that defines a custom progress bar.</summary>
    </member>
    <member name="F:mx.core.Application.resetHistory">
      <summary>If <code>true</code>, the application's history state is reset to its initial state whenever the application is reloaded.</summary>
    </member>
    <member name="F:mx.core.Application.scriptRecursionLimit">
      <summary>Specifies the maximum depth of Flash Player or AIR call stack before the player stops.</summary>
    </member>
    <member name="F:mx.core.Application.scriptTimeLimit">
      <summary>Specifies the maximum duration, in seconds, that an ActionScript event handler can execute before Flash Player or AIR assumes that it is hung, and aborts it.</summary>
    </member>
    <member name="F:mx.core.Application.usePreloader">
      <summary>If <code>true</code>, specifies to display the application preloader.</summary>
    </member>
    <member name="P:mx.core.Application.application">
      <summary>A reference to the top-level application.</summary>
    </member>
    <member name="P:mx.core.Application.parameters">
      <summary>The parameters property returns an Object containing name-value pairs representing the parameters provided to this Application.</summary>
    </member>
    <member name="P:mx.core.Application.url">
      <summary>The URL from which this Application's SWF file was loaded.</summary>
    </member>
    <member name="P:mx.core.Application.viewSourceURL">
      <summary>URL where the application's source can be viewed.</summary>
    </member>
    <member name="T:mx.core.BitmapAsset">
      <summary>BitmapAsset is a subclass of the flash.display.Bitmap class which represents bitmap images that you embed in a Flex application.</summary>
    </member>
    <member name="M:mx.core.BitmapAsset.move(System.Double,System.Double)">
      <summary>Moves this object to the specified x and y coordinates.</summary>
      <param name="x">The new x-position for this object.</param>
      <param name="y">The new y-position for this object.</param>
    </member>
    <member name="M:mx.core.BitmapAsset.setActualSize(System.Double,System.Double)">
      <summary>Sets the actual size of this object.</summary>
      <param name="newWidth">The new width for this object.</param>
      <param name="newHeight">The new height for this object.</param>
    </member>
    <member name="P:mx.core.BitmapAsset.measuredHeight">
      <summary>The measured height of this object.</summary>
    </member>
    <member name="P:mx.core.BitmapAsset.measuredWidth">
      <summary>The measured width of this object.</summary>
    </member>
    <member name="T:mx.core.ButtonAsset">
      <summary>ButtonAsset is a subclass of the flash.display.SimpleButton class which represents button symbols that you embed in a Flex application from a SWF file produced by Flash.</summary>
    </member>
    <member name="M:mx.core.ButtonAsset.move(System.Double,System.Double)">
      <summary>Moves this object to the specified x and y coordinates.</summary>
      <param name="x">The new x-position for this object.</param>
      <param name="y">The new y-position for this object.</param>
    </member>
    <member name="M:mx.core.ButtonAsset.setActualSize(System.Double,System.Double)">
      <summary>Sets the actual size of this object.</summary>
      <param name="newWidth">The new width for this object.</param>
      <param name="newHeight">The new height for this object.</param>
    </member>
    <member name="P:mx.core.ButtonAsset.measuredHeight">
      <summary>The measured height of this object.</summary>
    </member>
    <member name="P:mx.core.ButtonAsset.measuredWidth">
      <summary>The measured width of this object.</summary>
    </member>
    <member name="T:mx.core.ByteArrayAsset">
      <summary>ByteArrayAsset is a subclass of the flash.utils.ByteArray class which represents an arbitrary sequence of byte data that you embed in a Flex application.</summary>
    </member>
    <member name="T:mx.core.ClassFactory">
      <summary>A ClassFactory instance is a "factory object" which Flex uses to generate instances of another class, each with identical properties.</summary>
    </member>
    <member name="M:mx.core.ClassFactory.newInstance">
      <summary>Creates a new instance of the <code>generator</code> class, with the properties specified by <code>properties</code>.</summary>
    </member>
    <member name="F:mx.core.ClassFactory.generator">
      <summary>The Class that the <code>newInstance()</code> method uses to generate objects from this factory object.</summary>
    </member>
    <member name="F:mx.core.ClassFactory.properties">
      <summary>An Object whose name/value pairs specify the properties to be set on each object generated by the <code>newInstance()</code> method.</summary>
    </member>
    <member name="T:mx.core.ComponentDescriptor">
      <summary>ComponentDescriptor is the base class for the UIComponentDescriptor class, which encapsulates the information that you specified in an MXML tag for an instance of a visual component.</summary>
    </member>
    <member name="M:mx.core.ComponentDescriptor.invalidateProperties">
      <summary>Invalidates the cached <code>properties</code> property.</summary>
    </member>
    <member name="M:mx.core.ComponentDescriptor.toString">
      <summary>Returns the string "ComponentDescriptor_" plus the value of the <code>id</code> property.</summary>
    </member>
    <member name="F:mx.core.ComponentDescriptor.document">
      <summary>A reference to the document Object in which the component is to be created.</summary>
    </member>
    <member name="F:mx.core.ComponentDescriptor.events">
      <summary>An Object containing name/value pairs for the component's event handlers, as specified in MXML.</summary>
    </member>
    <member name="F:mx.core.ComponentDescriptor.id">
      <summary>The identifier for the component, as specified in MXML.</summary>
    </member>
    <member name="F:mx.core.ComponentDescriptor.propertiesFactory">
      <summary>A Function that returns an Object containing name/value pairs for the component's properties, as specified in MXML.</summary>
    </member>
    <member name="F:mx.core.ComponentDescriptor.type">
      <summary>The Class of the component, as specified in MXML.</summary>
    </member>
    <member name="P:mx.core.ComponentDescriptor.properties">
      <summary>An Object containing name/value pairs for the component's properties, as specified in MXML.</summary>
    </member>
    <member name="T:mx.core.Container">
      <summary>The Container class is an abstract base class for components that controls the layout characteristics of child components.</summary>
    </member>
    <member name="E:mx.core.Container.scroll">
      <summary>Dispatched when the user manually scrolls the container.</summary>
    </member>
    <member name="E:mx.core.Container.dataChange">
      <summary>Dispatched when the <code>data</code> property changes.</summary>
    </member>
    <member name="E:mx.core.Container.childRemove">
      <summary>Dispatched before a child of a container is removed.</summary>
    </member>
    <member name="E:mx.core.Container.childIndexChange">
      <summary>Dispatched after the index (among the container children) of a container child changes.</summary>
    </member>
    <member name="E:mx.core.Container.childAdd">
      <summary>Dispatched after a child has been added to a container.</summary>
    </member>
    <member name="M:mx.core.Container.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.core.Container.addChild(flash.display.DisplayObject)">
      <summary>Adds a child DisplayObject to this Container.</summary>
      <param name="child">The DisplayObject to add as a child of this Container. It must implement the IUIComponent interface.</param>
    </member>
    <member name="M:mx.core.Container.addChildAt(flash.display.DisplayObject,System.Int32)">
      <summary>Adds a child DisplayObject to this Container.</summary>
      <param name="child">The DisplayObject to add as a child of this Container. It must implement the IUIComponent interface.</param>
      <param name="index">The index to add the child at.</param>
    </member>
    <member name="M:mx.core.Container.attachOverlay">
      <summary>Used internally by the Dissolve Effect to add the overlay to the chrome of a container.</summary>
    </member>
    <member name="M:mx.core.Container.contentToGlobal(flash.geom.Point)">
      <summary />
      <param name="point" />
    </member>
    <member name="M:mx.core.Container.contentToLocal(flash.geom.Point)">
      <summary />
      <param name="point" />
    </member>
    <member name="M:mx.core.Container.createBorder">
      <summary>Creates the container's border skin if it is needed and does not already exist.</summary>
    </member>
    <member name="M:mx.core.Container.createComponentFromDescriptor(mx.core.ComponentDescriptor,System.Boolean)">
      <summary>Given a single UIComponentDescriptor, create the corresponding component and add the component as a child of this Container.</summary>
      <param name="descriptor">The UIComponentDescriptor for the component to be created. This argument is either a UIComponentDescriptor object or the index of one of the container's children (an integer between 0 and n-1, where n is the total number of children of this container).</param>
      <param name="recurse">If <code>false</code>, create this component but none of its children. If <code>true</code>, after creating the component, Flex calls the <code>createComponentsFromDescriptors()</code> method to create all or some of its children, based on the value of the component's <code>creationPolicy</code> property.</param>
    </member>
    <member name="M:mx.core.Container.createComponentsFromDescriptors(System.Boolean)">
      <summary>Iterate through the Array of <code>childDescriptors</code>, and call the <code>createComponentFromDescriptor()</code> method for each one.</summary>
      <param name="recurse">If <code>true</code>, recursively create components.</param>
    </member>
    <member name="M:mx.core.Container.executeBindings(System.Boolean)">
      <summary>Executes all the data bindings on this Container.</summary>
      <param name="recurse" />
    </member>
    <member name="M:mx.core.Container.executeChildBindings(System.Boolean)">
      <summary>Executes the bindings into this Container's child UIComponent objects.</summary>
      <param name="recurse">If <code>false</code>, then only execute the bindings on the immediate children of this Container. If <code>true</code>, then also execute the bindings on this container's grandchildren, great-grandchildren, and so on.</param>
    </member>
    <member name="M:mx.core.Container.getChildAt(System.Int32)">
      <summary>Gets the <i>n</i>th child component object.</summary>
      <param name="index">Number from 0 to (numChildren - 1).</param>
    </member>
    <member name="M:mx.core.Container.getChildByName(Avm.String)">
      <summary>Returns the child whose <code>name</code> property is the specified String.</summary>
      <param name="name">The identifier of the child.</param>
    </member>
    <member name="M:mx.core.Container.getChildIndex(flash.display.DisplayObject)">
      <summary>Gets the zero-based index of a specific child.</summary>
      <param name="child">Reference to child whose index to get.</param>
    </member>
    <member name="M:mx.core.Container.getChildren">
      <summary>Returns an Array of DisplayObject objects consisting of the content children of the container.</summary>
    </member>
    <member name="M:mx.core.Container.globalToContent(flash.geom.Point)">
      <summary />
      <param name="point" />
    </member>
    <member name="M:mx.core.Container.layoutChrome(System.Double,System.Double)">
      <summary>Respond to size changes by setting the positions and sizes of this container's borders.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="M:mx.core.Container.localToContent(flash.geom.Point)">
      <summary />
      <param name="point" />
    </member>
    <member name="M:mx.core.Container.removeAllChildren">
      <summary>Removes all children from the child list of this container.</summary>
    </member>
    <member name="M:mx.core.Container.removeChild(flash.display.DisplayObject)">
      <summary>Removes a child DisplayObject from the child list of this Container.</summary>
      <param name="child">The DisplayObject to remove.</param>
    </member>
    <member name="M:mx.core.Container.removeChildAt(System.Int32)">
      <summary>Removes a child DisplayObject from the child list of this Container at the specified index.</summary>
      <param name="index">The child index of the DisplayObject to remove.</param>
    </member>
    <member name="M:mx.core.Container.scrollChildren">
      <summary>Positions the container's content area relative to the viewable area based on the horizontalScrollPosition and verticalScrollPosition properties.</summary>
    </member>
    <member name="M:mx.core.Container.setChildIndex(flash.display.DisplayObject,System.Int32)">
      <summary>Sets the index of a particular child.</summary>
      <param name="child">Reference to child whose index to set.</param>
      <param name="newIndex">Number that indicates the new index. Must be an integer between 0 and (numChildren - 1).</param>
    </member>
    <member name="M:mx.core.Container.updateDisplayList(System.Double,System.Double)">
      <summary>Respond to size changes by setting the positions and sizes of this container's children.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="F:mx.core.Container.actualCreationPolicy">
      <summary>The creation policy of this container.</summary>
    </member>
    <member name="P:mx.core.Container.autoLayout">
      <summary>If <code>true</code>, measurement and layout are done when the position or size of a child is changed.</summary>
    </member>
    <member name="P:mx.core.Container.borderMetrics">
      <summary>Returns an EdgeMetrics object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="P:mx.core.Container.childDescriptors">
      <summary>Array of UIComponentDescriptor objects produced by the MXML compiler.</summary>
    </member>
    <member name="P:mx.core.Container.clipContent">
      <summary>Whether to apply a clip mask if the positions and/or sizes of this container's children extend outside the borders of this container.</summary>
    </member>
    <member name="P:mx.core.Container.contentMouseX">
      <summary />
    </member>
    <member name="P:mx.core.Container.contentMouseY">
      <summary />
    </member>
    <member name="P:mx.core.Container.creatingContentPane">
      <summary>Containers use an internal content pane to control scrolling.</summary>
    </member>
    <member name="P:mx.core.Container.creationIndex">
      <summary>Specifies the order to instantiate and draw the children of the container.</summary>
    </member>
    <member name="P:mx.core.Container.creationPolicy">
      <summary>The child creation policy for this Container.</summary>
    </member>
    <member name="P:mx.core.Container.data">
      <summary>The <code>data</code> property lets you pass a value to the component when you use it in an item renderer or item editor.</summary>
    </member>
    <member name="P:mx.core.Container.defaultButton">
      <summary>The Button control designated as the default button for the container.</summary>
    </member>
    <member name="P:mx.core.Container.horizontalLineScrollSize">
      <summary>Number of pixels to move when the left- or right-arrow button in the horizontal scroll bar is pressed.</summary>
    </member>
    <member name="P:mx.core.Container.horizontalPageScrollSize">
      <summary>Number of pixels to move when the track in the horizontal scroll bar is pressed.</summary>
    </member>
    <member name="P:mx.core.Container.horizontalScrollBar">
      <summary>The horizontal scrollbar used in this container.</summary>
    </member>
    <member name="P:mx.core.Container.horizontalScrollPolicy">
      <summary>Specifies whether the horizontal scroll bar is always present, always absent, or automatically added when needed.</summary>
    </member>
    <member name="P:mx.core.Container.horizontalScrollPosition">
      <summary>The current position of the horizontal scroll bar.</summary>
    </member>
    <member name="P:mx.core.Container.icon">
      <summary>The Class of the icon displayed by some navigator containers to represent this Container.</summary>
    </member>
    <member name="P:mx.core.Container.label">
      <summary>The text displayed by some navigator containers to represent this Container.</summary>
    </member>
    <member name="P:mx.core.Container.maxHorizontalScrollPosition">
      <summary>The largest possible value for the <code>horizontalScrollPosition</code> property.</summary>
    </member>
    <member name="P:mx.core.Container.maxVerticalScrollPosition">
      <summary>The largest possible value for the <code>verticalScrollPosition</code> property.</summary>
    </member>
    <member name="P:mx.core.Container.numChildren">
      <summary>Number of child components in this container.</summary>
    </member>
    <member name="P:mx.core.Container.rawChildren">
      <summary>A container typically contains child components, which can be enumerated using the <code>Container.getChildAt()</code> method and <code>Container.numChildren</code> property.</summary>
    </member>
    <member name="P:mx.core.Container.verticalLineScrollSize">
      <summary>Number of pixels to scroll when the up- or down-arrow button in the vertical scroll bar is pressed, or when you scroll by using the mouse wheel.</summary>
    </member>
    <member name="P:mx.core.Container.verticalPageScrollSize">
      <summary>Number of pixels to scroll when the track in the vertical scroll bar is pressed.</summary>
    </member>
    <member name="P:mx.core.Container.verticalScrollBar">
      <summary>The vertical scrollbar used in this container.</summary>
    </member>
    <member name="P:mx.core.Container.verticalScrollPolicy">
      <summary>Specifies whether the vertical scroll bar is always present, always absent, or automatically added when needed.</summary>
    </member>
    <member name="P:mx.core.Container.verticalScrollPosition">
      <summary>The current position of the vertical scroll bar.</summary>
    </member>
    <member name="P:mx.core.Container.viewMetrics">
      <summary>Returns an object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="P:mx.core.Container.viewMetricsAndPadding">
      <summary>Returns an object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="T:mx.core.ContainerCreationPolicy">
      <summary>The ContainerCreationPolicy class defines the constant values for the <code>creationPolicy</code> property of the Container class.</summary>
    </member>
    <member name="F:mx.core.ContainerCreationPolicy.ALL">
      <summary>Immediately create all descendants.</summary>
    </member>
    <member name="F:mx.core.ContainerCreationPolicy.NONE">
      <summary>Do not create any children.</summary>
    </member>
    <member name="F:mx.core.ContainerCreationPolicy.QUEUED">
      <summary>Add the container to a creation queue.</summary>
    </member>
    <member name="T:mx.core.ContainerGlobals" />
    <member name="T:mx.core.ContainerLayout">
      <summary>The ContainerLayout class defines the constant values for the <code>layout</code> property of container classes.</summary>
    </member>
    <member name="F:mx.core.ContainerLayout.HORIZONTAL">
      <summary>Use horizontal layout for the contents of this container.</summary>
    </member>
    <member name="F:mx.core.ContainerLayout.VERTICAL">
      <summary>Use vertical layout for the contents of this container.</summary>
    </member>
    <member name="T:mx.core.ContextualClassFactory">
      <summary>A class factory that provides a system manager as a context of where the class should be created.</summary>
    </member>
    <member name="M:mx.core.ContextualClassFactory.newInstance">
      <summary>Creates a new instance of the <code>generator</code> class, with the properties specified by <code>properties</code>.</summary>
    </member>
    <member name="F:mx.core.ContextualClassFactory.moduleFactory">
      <summary>The context in which an object should be created.</summary>
    </member>
    <member name="T:mx.core.DeferredInstanceFromClass">
      <summary>A deferred instance factory that creates and returns an instance of a specified class.</summary>
    </member>
    <member name="M:mx.core.DeferredInstanceFromClass.getInstance">
      <summary>Creates and returns an instance of the class specified in the DeferredInstanceFromClass constructor, if it does not yet exist; otherwise, returns the already-created class instance.</summary>
    </member>
    <member name="T:mx.core.DeferredInstanceFromFunction">
      <summary>A deferred instance factory that uses a generator function to create an instance of the required object.</summary>
    </member>
    <member name="M:mx.core.DeferredInstanceFromFunction.getInstance">
      <summary>Returns a reference to an instance of the desired object.</summary>
    </member>
    <member name="T:mx.core.DragSource">
      <summary>The DragSource class contains the data being dragged.</summary>
    </member>
    <member name="M:mx.core.DragSource.addData(System.Object,Avm.String)">
      <summary>Adds data and a corresponding format String to the drag source.</summary>
      <param name="data">Object that specifies the drag data. This can be any object, such as a String, a DataProvider, and so on.</param>
      <param name="format">String that specifies a label that describes the format for this data.</param>
    </member>
    <member name="M:mx.core.DragSource.addHandler(Avm.Function,Avm.String)">
      <summary>Adds a handler that is called when data for the specified format is requested.</summary>
      <param name="handler">Function that specifies the handler called to request the data. This function must return the data in the specified format.</param>
      <param name="format">String that specifies the format for this data.</param>
    </member>
    <member name="M:mx.core.DragSource.dataForFormat(Avm.String)">
      <summary>Retrieves the data for the specified format.</summary>
      <param name="format">String that specifies a label that describes the format for the data to return.</param>
    </member>
    <member name="M:mx.core.DragSource.hasFormat(Avm.String)">
      <summary>Returns <code>true</code> if the data source contains the requested format; otherwise, it returns <code>false</code>.</summary>
      <param name="format">String that specifies a label that describes the format for the data.</param>
    </member>
    <member name="P:mx.core.DragSource.formats">
      <summary>Contains the formats of the drag data, as an Array of Strings.</summary>
    </member>
    <member name="T:mx.core.EdgeMetrics">
      <summary>The EdgeMetrics class specifies the thickness, in pixels, of the four edge regions around a visual component.</summary>
    </member>
    <member name="M:mx.core.EdgeMetrics.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Constructor.</summary>
      <param name="left">The width, in pixels, of the left edge region.</param>
      <param name="top">The height, in pixels, of the top edge region.</param>
      <param name="right">The width, in pixels, of the right edge region.</param>
      <param name="bottom">The height, in pixels, of the bottom edge region.</param>
    </member>
    <member name="M:mx.core.EdgeMetrics.clone">
      <summary>Returns a copy of this EdgeMetrics object.</summary>
    </member>
    <member name="F:mx.core.EdgeMetrics.bottom">
      <summary>The height, in pixels, of the bottom edge region.</summary>
    </member>
    <member name="F:mx.core.EdgeMetrics.left">
      <summary>The width, in pixels, of the left edge region.</summary>
    </member>
    <member name="F:mx.core.EdgeMetrics.right">
      <summary>The width, in pixels, of the right edge region.</summary>
    </member>
    <member name="F:mx.core.EdgeMetrics.top">
      <summary>The height, in pixels, of the top edge region.</summary>
    </member>
    <member name="T:mx.core.EventPriority">
      <summary>The EventPriority class defines constant values for the <code>priority</code> argument of the <code>addEventListener()</code> method of EventDispatcher.</summary>
    </member>
    <member name="F:mx.core.EventPriority.BINDING">
      <summary>Autogenerated event handlers that evaluate data-binding expressions need to be executed before any others, so they have a higher priority than the default.</summary>
    </member>
    <member name="F:mx.core.EventPriority.DEFAULT">
      <summary>Event handlers on component instances are executed with the default priority, <code>0</code>.</summary>
    </member>
    <member name="F:mx.core.EventPriority.DEFAULT_HANDLER">
      <summary>Some components listen to events that they dispatch on themselves and let other listeners call the <code>preventDefault()</code> method to tell the component not to perform a default action.</summary>
    </member>
    <member name="F:mx.core.EventPriority.EFFECT">
      <summary>Autogenerated event handlers that trigger effects are executed after other event handlers on component instances, so they have a lower priority than the default.</summary>
    </member>
    <member name="T:mx.core.FlexBitmap">
      <summary>FlexBitmap is a subclass of the Player's Bitmap class.</summary>
    </member>
    <member name="M:mx.core.FlexBitmap.toString">
      <summary>Returns a string indicating the location of this object within the hierarchy of DisplayObjects in the Application.</summary>
    </member>
    <member name="T:mx.core.FlexLoader">
      <summary>FlexLoader is a subclass of the Player's Loader class.</summary>
    </member>
    <member name="M:mx.core.FlexLoader.toString">
      <summary>Returns a string indicating the location of this object within the hierarchy of DisplayObjects in the Application.</summary>
    </member>
    <member name="T:mx.core.FlexMovieClip">
      <summary>FlexMovieClip is a subclass of the Player's MovieClip class.</summary>
    </member>
    <member name="M:mx.core.FlexMovieClip.toString">
      <summary>Returns a string indicating the location of this object within the hierarchy of DisplayObjects in the Application.</summary>
    </member>
    <member name="T:mx.core.FlexShape">
      <summary>FlexShape is a subclass of the Player's Shape class.</summary>
    </member>
    <member name="M:mx.core.FlexShape.toString">
      <summary>Returns a string indicating the location of this object within the hierarchy of DisplayObjects in the Application.</summary>
    </member>
    <member name="T:mx.core.FlexSimpleButton">
      <summary>FlexSimpleButton is a subclass of the Player's SimpleButton class.</summary>
    </member>
    <member name="M:mx.core.FlexSimpleButton.toString">
      <summary>Returns a string indicating the location of this object within the hierarchy of DisplayObjects in the Application.</summary>
    </member>
    <member name="T:mx.core.FlexSprite">
      <summary>FlexSprite is a subclass of the Player's Sprite class and the superclass of UIComponent.</summary>
    </member>
    <member name="M:mx.core.FlexSprite.toString">
      <summary>Returns a string indicating the location of this object within the hierarchy of DisplayObjects in the Application.</summary>
    </member>
    <member name="T:mx.core.FlexTextField">
      <summary>FlexTextField is a subclass of the Player's TextField class and the superclass of UITextField.</summary>
    </member>
    <member name="M:mx.core.FlexTextField.toString">
      <summary>Returns a string indicating the location of this object within the hierarchy of DisplayObjects in the Application.</summary>
    </member>
    <member name="T:mx.core.FlexVersion">
      <summary>This class controls the backward-compatibility of the framework.</summary>
    </member>
    <member name="F:mx.core.FlexVersion.VERSION_2_0">
      <summary>The <code>compatibilityVersion</code> value of Flex 2.0, encoded numerically as a <code>uint</code>.</summary>
    </member>
    <member name="F:mx.core.FlexVersion.VERSION_2_0_1">
      <summary>The <code>compatibilityVersion</code> value of Flex 2.0.1, encoded numerically as a <code>uint</code>.</summary>
    </member>
    <member name="F:mx.core.FlexVersion.VERSION_3_0">
      <summary>The <code>compatibilityVersion</code> value of Flex 3.0, encoded numerically as a <code>uint</code>.</summary>
    </member>
    <member name="F:mx.core.FlexVersion.VERSION_ALREADY_READ">
      <summary>A String passed as a parameter to the <code>compatibilityErrorFunction()</code> method if the compatibility version has already been read.</summary>
    </member>
    <member name="F:mx.core.FlexVersion.VERSION_ALREADY_SET">
      <summary>A String passed as a parameter to the <code>compatibilityErrorFunction()</code> method if the compatibility version has already been set.</summary>
    </member>
    <member name="P:mx.core.FlexVersion.compatibilityErrorFunction">
      <summary>A function that gets called when the compatibility version is set more than once, or set after it has been read.</summary>
    </member>
    <member name="P:mx.core.FlexVersion.compatibilityVersion">
      <summary>The current version that the framework maintains compatibility for.</summary>
    </member>
    <member name="P:mx.core.FlexVersion.compatibilityVersionString">
      <summary>The compatibility version, as a string of the form "X.X.X".</summary>
    </member>
    <member name="T:mx.core.FontAsset">
      <summary>FontAsset is a subclass of the flash.text.Font class which represents fonts that you embed in a Flex application.</summary>
    </member>
    <member name="T:mx.core.IBorder">
      <summary>The IBorder interface defines the interface that all classes used for border skins should implement.</summary>
    </member>
    <member name="P:mx.core.IBorder.borderMetrics">
      <summary>Returns an EdgeMetrics object for the border that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="T:mx.core.IButton">
      <summary>The IButton interface is a marker interface that indicates that a component acts as a button.</summary>
    </member>
    <member name="M:mx.core.IButton.callLater(Avm.Function,Avm.Array)">
      <summary />
      <param name="method" />
      <param name="args" />
    </member>
    <member name="P:mx.core.IButton.emphasized">
      <summary />
    </member>
    <member name="T:mx.core.IChildList">
      <summary>The IChildList interface defines the properties and methods for accessing and manipulating child lists, which are subsets of a DisplayObjectContainer's children.</summary>
    </member>
    <member name="M:mx.core.IChildList.addChild(flash.display.DisplayObject)">
      <summary>Adds a child DisplayObject after the end of this child list.</summary>
      <param name="child">The DisplayObject to add as a child.</param>
    </member>
    <member name="M:mx.core.IChildList.addChildAt(flash.display.DisplayObject,System.Int32)">
      <summary>Adds a child DisplayObject to this child list at the index specified.</summary>
      <param name="child">The DisplayObject to add as a child.</param>
      <param name="index">The index to add the child at.</param>
    </member>
    <member name="M:mx.core.IChildList.contains(flash.display.DisplayObject)">
      <summary>Determines if a DisplayObject is in this child list, or is a descendant of an child in this child list.</summary>
      <param name="child">The DisplayObject to test.</param>
    </member>
    <member name="M:mx.core.IChildList.getChildAt(System.Int32)">
      <summary>Gets the child DisplayObject at the specified index in this child list.</summary>
      <param name="index">An integer from 0 to <code>(numChildren - 1)</code> that specifies the index of a child in this child list.</param>
    </member>
    <member name="M:mx.core.IChildList.getChildByName(Avm.String)">
      <summary>Gets the child DisplayObject with the specified name in this child list.</summary>
      <param name="name">The name of the child to return.</param>
    </member>
    <member name="M:mx.core.IChildList.getChildIndex(flash.display.DisplayObject)">
      <summary>Gets the index of a specific child in this child list.</summary>
      <param name="child">The child whose index to get.</param>
    </member>
    <member name="M:mx.core.IChildList.getObjectsUnderPoint(flash.geom.Point)">
      <summary>Returns an array of DisplayObjects that lie under the specified point and are in this child list.</summary>
      <param name="point">The point under which to look.</param>
    </member>
    <member name="M:mx.core.IChildList.removeChild(flash.display.DisplayObject)">
      <summary>Removes the specified child DisplayObject from this child list.</summary>
      <param name="child">The DisplayObject to remove.</param>
    </member>
    <member name="M:mx.core.IChildList.removeChildAt(System.Int32)">
      <summary>Removes the child DisplayObject at the specified index from this child list.</summary>
      <param name="index">The child index of the DisplayObject to remove.</param>
    </member>
    <member name="M:mx.core.IChildList.setChildIndex(flash.display.DisplayObject,System.Int32)">
      <summary>Changes the index of a particular child in this child list.</summary>
      <param name="child">The child whose index to set.</param>
      <param name="newIndex">The new index for the specified child. This must be an integer between zero and <code>(numChildren - 1)</code>.</param>
    </member>
    <member name="P:mx.core.IChildList.numChildren">
      <summary>The number of children in this child list.</summary>
    </member>
    <member name="T:mx.core.IConstraintClient">
      <summary>The IConstraintClient interface defines the interface for components that support layout constraints.</summary>
    </member>
    <member name="M:mx.core.IConstraintClient.getConstraintValue(Avm.String)">
      <summary>Returns the specified constraint value.</summary>
      <param name="constraintName">name of the constraint value. Constraint parameters are "<code>baseline</code>", "<code>bottom</code>", "<code>horizontalCenter</code>", "<code>left</code>", "<code>right</code>", "<code>top</code>", and "<code>verticalCenter</code>". <p>For more information about these parameters, see the Canvas and Panel containers and Styles Metadata AnchorStyles.</p></param>
    </member>
    <member name="M:mx.core.IConstraintClient.setConstraintValue(Avm.String,)">
      <summary>Sets the specified constraint value.</summary>
      <param name="constraintName">name of the constraint value. Constraint parameters are "<code>baseline</code>", "<code>bottom</code>", "<code>horizontalCenter</code>", "<code>left</code>", "<code>right</code>", "<code>top</code>", and "<code>verticalCenter</code>". <p>For more information about these parameters, see the Canvas and Panel containers and Styles Metadata AnchorStyles.</p></param>
      <param name="value">The new value for the constraint.</param>
    </member>
    <member name="T:mx.core.IContainer">
      <summary>IContainer is a interface that indicates a component extends or mimics mx.core.Container</summary>
    </member>
    <member name="M:mx.core.IContainer.addChild(flash.display.DisplayObject)">
      <summary />
      <param name="child" />
    </member>
    <member name="M:mx.core.IContainer.addChildAt(flash.display.DisplayObject,System.Int32)">
      <summary />
      <param name="child" />
      <param name="index" />
    </member>
    <member name="M:mx.core.IContainer.areInaccessibleObjectsUnderPoint(flash.geom.Point)">
      <summary />
      <param name="point" />
    </member>
    <member name="M:mx.core.IContainer.contains(flash.display.DisplayObject)">
      <summary />
      <param name="child" />
    </member>
    <member name="M:mx.core.IContainer.getChildAt(System.Int32)">
      <summary />
      <param name="index" />
    </member>
    <member name="M:mx.core.IContainer.getChildByName(Avm.String)">
      <summary />
      <param name="name" />
    </member>
    <member name="M:mx.core.IContainer.getChildIndex(flash.display.DisplayObject)">
      <summary />
      <param name="child" />
    </member>
    <member name="M:mx.core.IContainer.getObjectsUnderPoint(flash.geom.Point)">
      <summary />
      <param name="point" />
    </member>
    <member name="M:mx.core.IContainer.removeChild(flash.display.DisplayObject)">
      <summary />
      <param name="child" />
    </member>
    <member name="M:mx.core.IContainer.removeChildAt(System.Int32)">
      <summary />
      <param name="index" />
    </member>
    <member name="M:mx.core.IContainer.setChildIndex(flash.display.DisplayObject,System.Int32)">
      <summary />
      <param name="child" />
      <param name="index" />
    </member>
    <member name="M:mx.core.IContainer.startDrag(System.Boolean,flash.geom.Rectangle)">
      <summary />
      <param name="lockCenter" />
      <param name="bounds" />
    </member>
    <member name="M:mx.core.IContainer.stopDrag">
      <summary />
    </member>
    <member name="M:mx.core.IContainer.swapChildren(flash.display.DisplayObject,flash.display.DisplayObject)">
      <summary />
      <param name="child1" />
      <param name="child2" />
    </member>
    <member name="M:mx.core.IContainer.swapChildrenAt(System.Int32,System.Int32)">
      <summary />
      <param name="index1" />
      <param name="index2" />
    </member>
    <member name="P:mx.core.IContainer.buttonMode">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.creatingContentPane">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.doubleClickEnabled">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.dropTarget">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.focusManager">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.focusRect">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.graphics">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.hitArea">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.horizontalScrollPosition">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.mouseChildren">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.mouseEnabled">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.numChildren">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.soundTransform">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.tabChildren">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.tabEnabled">
      <summary>The methods here would normally just be in IInteractiveObject, but for backward compatibility, their ancestor methods have to be included directly into IFlexDisplayObject, so these also have to be kept in this separate include file so it can be used in ITextField</summary>
    </member>
    <member name="P:mx.core.IContainer.tabIndex">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.textSnapshot">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.useHandCursor">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.verticalScrollPosition">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.viewMetrics">
      <summary />
    </member>
    <member name="P:mx.core.IContainer.defaultButton" />
    <member name="T:mx.core.IDataRenderer">
      <summary>The IDataRenderer interface defines the interface for components that have a <code>data</code> property.</summary>
    </member>
    <member name="P:mx.core.IDataRenderer.data">
      <summary>The data to render or edit.</summary>
    </member>
    <member name="T:mx.core.IDeferredInstance">
      <summary>The IDeferredInstance interface defines the Flex deferred instance factory interface.</summary>
    </member>
    <member name="M:mx.core.IDeferredInstance.getInstance">
      <summary>Creates an instance Object from a class or function, if the instance does not yet exist.</summary>
    </member>
    <member name="T:mx.core.IDeferredInstantiationUIComponent">
      <summary>The IDeferredInstantiationUIComponent interface defines the interface for a component or object that defers instantiation.</summary>
    </member>
    <member name="M:mx.core.IDeferredInstantiationUIComponent.createReferenceOnParentDocument(mx.core.IFlexDisplayObject)">
      <summary>Creates an <code>id</code> reference to this IUIComponent object on its parent document object.</summary>
      <param name="parentDocument">The parent of this IUIComponent object.</param>
    </member>
    <member name="M:mx.core.IDeferredInstantiationUIComponent.deleteReferenceOnParentDocument(mx.core.IFlexDisplayObject)">
      <summary>Deletes the <code>id</code> reference to this IUIComponent object on its parent document object.</summary>
      <param name="parentDocument">The parent of this IUIComponent object.</param>
    </member>
    <member name="M:mx.core.IDeferredInstantiationUIComponent.executeBindings(System.Boolean)">
      <summary />
      <param name="recurse" />
    </member>
    <member name="M:mx.core.IDeferredInstantiationUIComponent.registerEffects(Avm.Array)">
      <summary>For each effect event, register the EffectManager as one of the event listeners.</summary>
      <param name="effects">An Array of strings of effect names.</param>
    </member>
    <member name="P:mx.core.IDeferredInstantiationUIComponent.cachePolicy">
      <summary />
    </member>
    <member name="P:mx.core.IDeferredInstantiationUIComponent.descriptor">
      <summary />
    </member>
    <member name="P:mx.core.IDeferredInstantiationUIComponent.id">
      <summary />
    </member>
    <member name="P:mx.core.IDeferredInstantiationUIComponent.cacheHeuristic">
      <summary />
    </member>
    <member name="T:mx.core.IFactory">
      <summary>The IFactory interface defines the interface that factory classes such as ClassFactory must implement.</summary>
    </member>
    <member name="M:mx.core.IFactory.newInstance">
      <summary>Creates an instance of some class (determined by the class that implements IFactory).</summary>
    </member>
    <member name="T:mx.core.IFlexAsset">
      <summary>IFlexAsset is a marker interface with the following meaning: if a class declares that it implements IFlexAsset, then that class represents an asset -- such as a bitmap, a font, or a sound -- that has been embedded in a Flex application.</summary>
    </member>
    <member name="T:mx.core.IFlexDisplayObject">
      <summary>The IFlexDisplayObject interface defines the interface for skin elements.</summary>
    </member>
    <member name="M:mx.core.IFlexDisplayObject.getBounds(flash.display.DisplayObject)">
      <summary />
      <param name="targetCoordinateSpace" />
    </member>
    <member name="M:mx.core.IFlexDisplayObject.getRect(flash.display.DisplayObject)">
      <summary />
      <param name="targetCoordinateSpace" />
    </member>
    <member name="M:mx.core.IFlexDisplayObject.globalToLocal(flash.geom.Point)">
      <summary />
      <param name="point" />
    </member>
    <member name="M:mx.core.IFlexDisplayObject.hitTestObject(flash.display.DisplayObject)">
      <summary />
      <param name="obj" />
    </member>
    <member name="M:mx.core.IFlexDisplayObject.hitTestPoint(System.Double,System.Double,System.Boolean)">
      <summary />
      <param name="x" />
      <param name="y" />
      <param name="shapeFlag" />
    </member>
    <member name="M:mx.core.IFlexDisplayObject.localToGlobal(flash.geom.Point)">
      <summary />
      <param name="point" />
    </member>
    <member name="M:mx.core.IFlexDisplayObject.move(System.Double,System.Double)">
      <summary>Moves this object to the specified x and y coordinates.</summary>
      <param name="x">The new x-position for this object.</param>
      <param name="y">The new y-position for this object.</param>
    </member>
    <member name="M:mx.core.IFlexDisplayObject.setActualSize(System.Double,System.Double)">
      <summary>Sets the actual size of this object.</summary>
      <param name="newWidth">The new width for this object.</param>
      <param name="newHeight">The new height for this object.</param>
    </member>
    <member name="P:mx.core.IFlexDisplayObject.accessibilityProperties">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.alpha">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.blendMode">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.cacheAsBitmap">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.filters">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.height">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.loaderInfo">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.mask">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.measuredHeight">
      <summary>The measured height of this object.</summary>
    </member>
    <member name="P:mx.core.IFlexDisplayObject.measuredWidth">
      <summary>The measured width of this object.</summary>
    </member>
    <member name="P:mx.core.IFlexDisplayObject.mouseX">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.mouseY">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.name">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.opaqueBackground">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.parent">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.root">
      <summary>The methods here would normally just be in IDisplayObject, but for backward compatibility, they have to be included directly into IFlexDisplayObject, so they are kept in this separate include file.</summary>
    </member>
    <member name="P:mx.core.IFlexDisplayObject.rotation">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.scale9Grid">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.scaleX">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.scaleY">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.scrollRect">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.stage">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.transform">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.visible">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.width">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.x">
      <summary />
    </member>
    <member name="P:mx.core.IFlexDisplayObject.y">
      <summary />
    </member>
    <member name="T:mx.core.IFlexModule">
      <summary>The IFlexModule interface is used as an optional contract with IFlexModuleFactory.</summary>
    </member>
    <member name="T:mx.core.IFlexModuleFactory">
      <summary>The IFlexModuleFactory interface represents the contract expected for bootstrapping Flex applications and dynamically loaded modules.</summary>
    </member>
    <member name="M:mx.core.IFlexModuleFactory.create(System.Object)">
      <summary>A factory method that requests an instance of a definition known to the module.</summary>
      <param name="parameters">An optional list of arguments. You can pass any number of arguments, which are then stored in an Array called <code>parameters</code>.</param>
    </member>
    <member name="M:mx.core.IFlexModuleFactory.info">
      <summary>Returns a block of key/value pairs that hold static data known to the module.</summary>
    </member>
    <member name="T:mx.core.IFontContextComponent">
      <summary>Allows a component to support a font context property.</summary>
    </member>
    <member name="P:mx.core.IFontContextComponent.fontContext">
      <summary>The module factory that provides the font context for this component.</summary>
    </member>
    <member name="T:mx.core.IIMESupport">
      <summary>The IIMESupport interface defines the interface for any component that supports IME (input method editor).</summary>
    </member>
    <member name="P:mx.core.IIMESupport.imeMode">
      <summary>The IME mode of the component.</summary>
    </member>
    <member name="T:mx.core.IInvalidating">
      <summary>The IInvalidating interface defines the interface for components that use invalidation to do delayed -- rather than immediate -- property commitment, measurement, drawing, and layout.</summary>
    </member>
    <member name="M:mx.core.IInvalidating.invalidateDisplayList">
      <summary>Calling this method results in a call to the component's <code>validateDisplayList()</code> method before the display list is rendered.</summary>
    </member>
    <member name="M:mx.core.IInvalidating.invalidateProperties">
      <summary>Calling this method results in a call to the component's <code>validateProperties()</code> method before the display list is rendered.</summary>
    </member>
    <member name="M:mx.core.IInvalidating.invalidateSize">
      <summary>Calling this method results in a call to the component's <code>validateSize()</code> method before the display list is rendered.</summary>
    </member>
    <member name="M:mx.core.IInvalidating.validateNow">
      <summary>Validates and updates the properties and layout of this object by immediately calling <code>validateProperties()</code>, <code>validateSize()</code>, and <code>validateDisplayList()</code>, if necessary.</summary>
    </member>
    <member name="T:mx.core.IMXMLObject">
      <summary>The IMXMLObject interface defines the APIs that a non-visual component must implement in order to work properly with the MXML compiler.</summary>
    </member>
    <member name="M:mx.core.IMXMLObject.initialized(System.Object,Avm.String)">
      <summary>Called after the implementing object has been created and all component properties specified on the MXML tag have been initialized.</summary>
      <param name="document">The MXML document that created this object.</param>
      <param name="id">The identifier used by <code>document</code> to refer to this object. If the object is a deep property on <code>document</code>, <code>id</code> is null.</param>
    </member>
    <member name="T:mx.core.IProgrammaticSkin">
      <summary>The IProgrammaticSkin interface defines the interface that skin classes must implement if they use the <code>name</code> property skin interface.</summary>
    </member>
    <member name="M:mx.core.IProgrammaticSkin.validateDisplayList">
      <summary />
    </member>
    <member name="M:mx.core.IProgrammaticSkin.validateNow">
      <summary />
    </member>
    <member name="T:mx.core.IPropertyChangeNotifier">
      <summary>The <code>IPropertyChangeNotifier</code> interface defines a marker interface.</summary>
    </member>
    <member name="T:mx.core.IRawChildrenContainer">
      <summary>The IRawChildrenContainer interface defines the APIs for containers that can return an IChildList that represents all their children.</summary>
    </member>
    <member name="P:mx.core.IRawChildrenContainer.rawChildren">
      <summary>Returns an IChildList representing all children.</summary>
    </member>
    <member name="T:mx.core.IRectangularBorder">
      <summary>The IRectangularBorder interface defines the interface that all classes used for rectangular border skins should implement.</summary>
    </member>
    <member name="M:mx.core.IRectangularBorder.layoutBackgroundImage">
      <summary />
    </member>
    <member name="P:mx.core.IRectangularBorder.backgroundImageBounds">
      <summary />
    </member>
    <member name="P:mx.core.IRectangularBorder.hasBackgroundImage">
      <summary />
    </member>
    <member name="T:mx.core.IRepeater">
      <summary>The IRepeater interface defines the APIs for Repeater public APIs of the Repeater object.</summary>
    </member>
    <member name="M:mx.core.IRepeater.executeChildBindings">
      <summary>Executes the bindings into all the UIComponents created by this Repeater.</summary>
    </member>
    <member name="M:mx.core.IRepeater.initializeRepeater(mx.core.IContainer,System.Boolean)">
      <summary>Initializes a new Repeater object.</summary>
      <param name="container">The Container that contains this Repeater, and in which this Repeater will create its children.</param>
      <param name="recurse">A Boolean flag indicating whether this Repeater should create all descendants of its children.</param>
    </member>
    <member name="P:mx.core.IRepeater.container">
      <summary>The container that contains this Repeater, and in which it will create its children.</summary>
    </member>
    <member name="P:mx.core.IRepeater.count">
      <summary>The number of times this Repeater should execute.</summary>
    </member>
    <member name="P:mx.core.IRepeater.currentIndex">
      <summary>The index of the item in the <code>dataProvider</code> currently being processed while this Repeater is executing.</summary>
    </member>
    <member name="P:mx.core.IRepeater.currentItem">
      <summary>The item in the <code>dataProvider</code> currently being processed while this Repeater is executing.</summary>
    </member>
    <member name="P:mx.core.IRepeater.dataProvider">
      <summary>The data provider used by this Repeater to create repeated instances of its children.</summary>
    </member>
    <member name="P:mx.core.IRepeater.recycleChildren">
      <summary>A Boolean flag indicating whether this Repeater should re-use previously created children, or create new ones.</summary>
    </member>
    <member name="P:mx.core.IRepeater.startingIndex">
      <summary>The index into the <code>dataProvider</code> at which this Repeater starts creating children.</summary>
    </member>
    <member name="T:mx.core.IRepeaterClient">
      <summary>The IRepeaterClient interface defines the APIs for components that can have multiple instances created by a Repeater.</summary>
    </member>
    <member name="M:mx.core.IRepeaterClient.initializeRepeaterArrays(mx.core.IRepeaterClient)">
      <summary>Initializes the <code>instanceIndices</code>, <code>repeaterIndices</code>, and <code>repeaters</code> properties.</summary>
      <param name="parent" />
    </member>
    <member name="P:mx.core.IRepeaterClient.instanceIndices">
      <summary>An Array that contains the indices required to reference the repeated component instance from its document.</summary>
    </member>
    <member name="P:mx.core.IRepeaterClient.isDocument">
      <summary />
    </member>
    <member name="P:mx.core.IRepeaterClient.repeaterIndices">
      <summary>An Array that contains the indices of the items in the data providers of the Repeaters that produced the component.</summary>
    </member>
    <member name="P:mx.core.IRepeaterClient.repeaters">
      <summary>An Array that contains any enclosing Repeaters of the component.</summary>
    </member>
    <member name="T:mx.core.IStateClient">
      <summary>The IStateClient interface defines the interface that components must implement to support view states.</summary>
    </member>
    <member name="P:mx.core.IStateClient.currentState">
      <summary>The current view state.</summary>
    </member>
    <member name="T:mx.core.IToolTip">
      <summary>The IToolTip interface defines the API that tooltip-like components must implement in order to work with the ToolTipManager.</summary>
    </member>
    <member name="P:mx.core.IToolTip.screen">
      <summary>A Rectangle that specifies the size and position of the base drawing surface for this tooltip.</summary>
    </member>
    <member name="P:mx.core.IToolTip.text">
      <summary>The text that appears in the tooltip.</summary>
    </member>
    <member name="T:mx.core.IUIComponent">
      <summary>The IUIComponent interface defines the basic set of APIs that you must implement to create a child of a Flex container or list.</summary>
    </member>
    <member name="M:mx.core.IUIComponent.getExplicitOrMeasuredHeight">
      <summary />
    </member>
    <member name="M:mx.core.IUIComponent.getExplicitOrMeasuredWidth">
      <summary />
    </member>
    <member name="M:mx.core.IUIComponent.initialize">
      <summary>Initialize the object.</summary>
    </member>
    <member name="M:mx.core.IUIComponent.owns(flash.display.DisplayObject)">
      <summary />
      <param name="displayObject" />
    </member>
    <member name="M:mx.core.IUIComponent.parentChanged(flash.display.DisplayObjectContainer)">
      <summary />
      <param name="p" />
    </member>
    <member name="M:mx.core.IUIComponent.setVisible(System.Boolean,System.Boolean)">
      <summary />
      <param name="value" />
      <param name="noEvent" />
    </member>
    <member name="P:mx.core.IUIComponent.baselinePosition">
      <summary>The y-coordinate of the baseline of the first line of text of the component.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.document">
      <summary>A reference to the document object associated with this component.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.enabled">
      <summary>Whether the component can accept user interaction.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.explicitHeight">
      <summary>The explicitly specified height for the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.explicitMaxHeight">
      <summary>Number that specifies the maximum height of the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.explicitMaxWidth">
      <summary>Number that specifies the maximum width of the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.explicitMinHeight">
      <summary>Number that specifies the minimum height of the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.explicitMinWidth">
      <summary>Number that specifies the minimum width of the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.explicitWidth">
      <summary>The explicitly specified width for the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.focusPane">
      <summary>A single Sprite object that is shared among components and used as an overlay for drawing focus.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.includeInLayout">
      <summary />
    </member>
    <member name="P:mx.core.IUIComponent.isPopUp">
      <summary />
    </member>
    <member name="P:mx.core.IUIComponent.maxHeight">
      <summary>Number that specifies the maximum height of the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.maxWidth">
      <summary>Number that specifies the maximum width of the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.measuredMinHeight">
      <summary />
    </member>
    <member name="P:mx.core.IUIComponent.measuredMinWidth">
      <summary />
    </member>
    <member name="P:mx.core.IUIComponent.minHeight">
      <summary>Number that specifies the minimum height of the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.minWidth">
      <summary>Number that specifies the minimum width of the component, in pixels, as the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.owner">
      <summary>Typically the parent container of this component.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.percentHeight">
      <summary>Number that specifies the height of a component as a percentage of its parent's size.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.percentWidth">
      <summary>Number that specifies the width of a component as a percentage of its parent's size.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.systemManager">
      <summary>A reference to the SystemManager object for this component.</summary>
    </member>
    <member name="P:mx.core.IUIComponent.tweeningProperties">
      <summary>Used by EffectManager.</summary>
    </member>
    <member name="T:mx.core.IUID">
      <summary>The IUID interface defines the interface for objects that must have Unique Identifiers (UIDs) to uniquely identify the object.</summary>
    </member>
    <member name="P:mx.core.IUID.uid">
      <summary>The unique identifier for this object.</summary>
    </member>
    <member name="T:mx.core.IUITextField">
      <summary>The IUITextField interface defines the basic set of APIs for UITextField instances.</summary>
    </member>
    <member name="M:mx.core.IUITextField.appendText(Avm.String)">
      <summary />
      <param name="newText" />
    </member>
    <member name="M:mx.core.IUITextField.getCharBoundaries(System.Int32)">
      <summary />
      <param name="charIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getCharIndexAtPoint(System.Double,System.Double)">
      <summary />
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:mx.core.IUITextField.getFirstCharInParagraph(System.Int32)">
      <summary />
      <param name="charIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getImageReference(Avm.String)">
      <summary />
      <param name="id" />
    </member>
    <member name="M:mx.core.IUITextField.getLineIndexAtPoint(System.Double,System.Double)">
      <summary />
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:mx.core.IUITextField.getLineIndexOfChar(System.Int32)">
      <summary />
      <param name="charIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getLineLength(System.Int32)">
      <summary />
      <param name="lineIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getLineMetrics(System.Int32)">
      <summary />
      <param name="lineIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getLineOffset(System.Int32)">
      <summary />
      <param name="lineIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getLineText(System.Int32)">
      <summary />
      <param name="lineIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getParagraphLength(System.Int32)">
      <summary />
      <param name="charIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getStyle(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="M:mx.core.IUITextField.getTextFormat(System.Int32,System.Int32)">
      <summary />
      <param name="beginIndex" />
      <param name="endIndex" />
    </member>
    <member name="M:mx.core.IUITextField.getUITextFormat">
      <summary />
    </member>
    <member name="M:mx.core.IUITextField.replaceSelectedText(Avm.String)">
      <summary />
      <param name="value" />
    </member>
    <member name="M:mx.core.IUITextField.replaceText(System.Int32,System.Int32,Avm.String)">
      <summary />
      <param name="beginIndex" />
      <param name="endIndex" />
      <param name="newText" />
    </member>
    <member name="M:mx.core.IUITextField.setColor(System.UInt32)">
      <summary />
      <param name="color" />
    </member>
    <member name="M:mx.core.IUITextField.setFocus">
      <summary />
    </member>
    <member name="M:mx.core.IUITextField.setSelection(System.Int32,System.Int32)">
      <summary />
      <param name="beginIndex" />
      <param name="endIndex" />
    </member>
    <member name="M:mx.core.IUITextField.setTextFormat(flash.text.TextFormat,System.Int32,System.Int32)">
      <summary />
      <param name="format" />
      <param name="beginIndex" />
      <param name="endIndex" />
    </member>
    <member name="M:mx.core.IUITextField.truncateToFit(Avm.String)">
      <summary />
      <param name="truncationIndicator" />
    </member>
    <member name="P:mx.core.IUITextField.alwaysShowSelection">
      <summary>The ITextField interface defines the basic set of APIs for flash.display.TextField</summary>
    </member>
    <member name="P:mx.core.IUITextField.antiAliasType">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.autoSize">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.background">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.backgroundColor">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.border">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.borderColor">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.bottomScrollV">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.caretIndex">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.condenseWhite">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.defaultTextFormat">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.displayAsPassword">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.doubleClickEnabled">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.embedFonts">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.focusRect">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.gridFitType">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.htmlText">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.inheritingStyles">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.length">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.maxChars">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.maxScrollH">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.maxScrollV">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.mouseEnabled">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.mouseWheelEnabled">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.multiline">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.nestLevel">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.nonInheritingStyles">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.nonZeroTextHeight">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.numLines">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.restrict">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.scrollH">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.scrollV">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.selectable">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.selectionBeginIndex">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.selectionEndIndex">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.sharpness">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.styleSheet">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.tabEnabled">
      <summary>The methods here would normally just be in IInteractiveObject, but for backward compatibility, their ancestor methods have to be included directly into IFlexDisplayObject, so these also have to be kept in this separate include file so it can be used in ITextField</summary>
    </member>
    <member name="P:mx.core.IUITextField.tabIndex">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.text">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.textColor">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.textHeight">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.textWidth">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.thickness">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.type">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.useRichTextClipboard" />
    <member name="P:mx.core.IUITextField.wordWrap">
      <summary />
    </member>
    <member name="P:mx.core.IUITextField.ignorePadding" />
    <member name="T:mx.core.LayoutContainer">
      <summary>Flex defines a default, or Application, container that lets you start adding content to your module or Application without explicitly defining another container.</summary>
    </member>
    <member name="M:mx.core.LayoutContainer.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="F:mx.core.LayoutContainer.boxLayoutClass">
      <summary>The mx.containers.utilityClasses.Layout subclass that is doing the layout</summary>
    </member>
    <member name="F:mx.core.LayoutContainer.canvasLayoutClass">
      <summary>The mx.containers.utilityClasses.Layout subclass that is doing the layout</summary>
    </member>
    <member name="P:mx.core.LayoutContainer.constraintColumns">
      <summary />
    </member>
    <member name="P:mx.core.LayoutContainer.constraintRows">
      <summary />
    </member>
    <member name="P:mx.core.LayoutContainer.layout">
      <summary>Specifies the layout mechanism used for this application.</summary>
    </member>
    <member name="T:mx.core.MovieClipAsset">
      <summary>MovieClipAsset is a subclass of the flash.display.MovieClip class which represents movieclip symbols that you embed in a Flex application from a SWF file produced by Flash.</summary>
    </member>
    <member name="M:mx.core.MovieClipAsset.move(System.Double,System.Double)">
      <summary>Moves this object to the specified x and y coordinates.</summary>
      <param name="x">The new x-position for this object.</param>
      <param name="y">The new y-position for this object.</param>
    </member>
    <member name="M:mx.core.MovieClipAsset.setActualSize(System.Double,System.Double)">
      <summary>Sets the actual size of this object.</summary>
      <param name="newWidth">The new width for this object.</param>
      <param name="newHeight">The new height for this object.</param>
    </member>
    <member name="P:mx.core.MovieClipAsset.borderMetrics">
      <summary>Returns an EdgeMetrics object for the border that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="P:mx.core.MovieClipAsset.measuredHeight">
      <summary>The measured height of this object.</summary>
    </member>
    <member name="P:mx.core.MovieClipAsset.measuredWidth">
      <summary>The measured width of this object.</summary>
    </member>
    <member name="T:mx.core.MovieClipLoaderAsset">
      <summary>MovieClipLoaderAsset is a subclass of the MovieClipAsset class which represents SWF files that you embed in a Flex application.</summary>
    </member>
    <member name="E:mx.core.MovieClipLoaderAsset.complete">
      <summary>Dispatched after the SWF asset has been fully loaded.</summary>
    </member>
    <member name="F:mx.core.MovieClipLoaderAsset.initialHeight">
      <summary>Backing storage for the <code>measuredHeight</code> property.</summary>
    </member>
    <member name="F:mx.core.MovieClipLoaderAsset.initialWidth">
      <summary>Backing storage for the <code>measuredWidth</code> property.</summary>
    </member>
    <member name="P:mx.core.MovieClipLoaderAsset.movieClipData">
      <summary>A ByteArray containing the inner content.</summary>
    </member>
    <member name="T:mx.core.MXMLObjectAdapter">
      <summary>The MXMLObjectAdapter class is a stub implementation of the IMXMLObject interface, so that you can implement the interface without defining all of the methods.</summary>
    </member>
    <member name="M:mx.core.MXMLObjectAdapter.initialized(System.Object,Avm.String)">
      <summary>Called after the implementing object has been created and all component properties specified on the MXML tag have been initialized.</summary>
      <param name="document">The MXML document that created this object.</param>
      <param name="id">The identifier used by <code>document</code> to refer to this object. If the object is a deep property on <code>document</code>, <code>id</code> is null.</param>
    </member>
    <member name="T:mx.core.Repeater">
      <summary>The Repeater class is the runtime object that corresponds to the <code>&lt;mx:Repeater&gt;</code> tag.</summary>
    </member>
    <member name="E:mx.core.Repeater.repeatStart">
      <summary>Dispatched when Flex begins processing the <code>dataProvider</code> property and begins creating the specified subcomponents.</summary>
    </member>
    <member name="E:mx.core.Repeater.repeatEnd">
      <summary>Dispatched after all the subcomponents of a repeater are created.</summary>
    </member>
    <member name="E:mx.core.Repeater.repeat">
      <summary>Dispatched each time an item is processed and the <code>currentIndex</code> and <code>currentItem</code> properties are updated.</summary>
    </member>
    <member name="M:mx.core.Repeater.executeChildBindings">
      <summary>Executes the bindings into all the UIComponents created by this Repeater.</summary>
    </member>
    <member name="M:mx.core.Repeater.initializeRepeater(mx.core.IContainer,System.Boolean)">
      <summary>Initializes a new Repeater object.</summary>
      <param name="container">The Container that contains this Repeater, and in which this Repeater will create its children.</param>
      <param name="recurse">A Boolean flag indicating whether this Repeater should create all descendants of its children.</param>
    </member>
    <member name="F:mx.core.Repeater.childDescriptors">
      <summary>An Array of UIComponentDescriptor objects for this Repeater's children.</summary>
    </member>
    <member name="P:mx.core.Repeater.container">
      <summary>The container that contains this Repeater.</summary>
    </member>
    <member name="P:mx.core.Repeater.count">
      <summary>The number of times this Repeater should execute.</summary>
    </member>
    <member name="P:mx.core.Repeater.currentIndex">
      <summary>The index of the item in the <code>dataProvider</code> currently being processed while this Repeater is executing.</summary>
    </member>
    <member name="P:mx.core.Repeater.currentItem">
      <summary>The item in the <code>dataProvider</code> currently being processed while this Repeater is executing.</summary>
    </member>
    <member name="P:mx.core.Repeater.dataProvider">
      <summary>The data provider used by this Repeater to create repeated instances of its children.</summary>
    </member>
    <member name="P:mx.core.Repeater.recycleChildren">
      <summary>A Boolean flag indicating whether this Repeater should re-use previously created children, or create new ones.</summary>
    </member>
    <member name="P:mx.core.Repeater.startingIndex">
      <summary>The index into the <code>dataProvider</code> at which this Repeater starts creating children.</summary>
    </member>
    <member name="T:mx.core.ScrollControlBase">
      <summary>The ScrollControlBase class is the base class for controls with scroll bars.</summary>
    </member>
    <member name="E:mx.core.ScrollControlBase.scroll">
      <summary>Dispatched when the content is scrolled.</summary>
    </member>
    <member name="M:mx.core.ScrollControlBase.createBorder">
      <summary>Creates the border for this component.</summary>
    </member>
    <member name="M:mx.core.ScrollControlBase.createChildren">
      <summary>Creates objects that are children of this ScrollControlBase, which in this case are the border and mask.</summary>
    </member>
    <member name="M:mx.core.ScrollControlBase.layoutChrome(System.Double,System.Double)">
      <summary>Responds to size changes by setting the positions and sizes of this control's borders.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="M:mx.core.ScrollControlBase.mouseWheelHandler(flash.events.MouseEvent)">
      <summary>Event handler for the mouse wheel scroll event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.core.ScrollControlBase.roomForScrollBar(mx.controls.scrollClasses.ScrollBar,System.Double,System.Double)">
      <param name="bar" />
      <param name="unscaledWidth" />
      <param name="unscaledHeight" />
    </member>
    <member name="M:mx.core.ScrollControlBase.scrollHandler(flash.events.Event)">
      <summary>Default event handler for the <code>scroll</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.core.ScrollControlBase.setScrollBarProperties(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Causes the ScrollControlBase to show or hide scrollbars based on the parameters passed in.</summary>
      <param name="totalColumns">The number of horizontal units that need to be displayed.</param>
      <param name="visibleColumns">The number of horizontal units that can be displayed at one time.</param>
      <param name="totalRows">The number of vertical units that need to be displayed.</param>
      <param name="visibleRows">The number of vertical units that can be displayed at one time</param>
    </member>
    <member name="F:mx.core.ScrollControlBase.border">
      <summary>The border object.</summary>
    </member>
    <member name="F:mx.core.ScrollControlBase.horizontalScrollBar">
      <summary>The horizontal scroll bar.</summary>
    </member>
    <member name="F:mx.core.ScrollControlBase.liveScrolling">
      <summary>A flag that indicates whether scrolling is live as the scrollbar thumb is moved or the view is not updated until the thumb is released.</summary>
    </member>
    <member name="F:mx.core.ScrollControlBase.maskShape">
      <summary>The mask.</summary>
    </member>
    <member name="F:mx.core.ScrollControlBase.scrollAreaChanged">
      <summary>A flag that the scrolling area changed due to the appearance or disappearance of scrollbars.</summary>
    </member>
    <member name="F:mx.core.ScrollControlBase.showScrollTips">
      <summary>A flag that indicates whether a tooltip should appear near the scroll thumb when it is being dragged.</summary>
    </member>
    <member name="F:mx.core.ScrollControlBase.verticalScrollBar">
      <summary>The vertical scroll bar.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.borderMetrics">
      <summary>Returns an EdgeMetrics object that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.horizontalScrollPolicy">
      <summary>A property that indicates whether the horizontal scroll bar is always on, always off, or automatically changes based on the parameters passed to the <code>setScrollBarProperties()</code> method.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.horizontalScrollPosition">
      <summary>The offset into the content from the left edge.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.maxHorizontalScrollPosition">
      <summary>The maximum value for the <code>horizontalScrollPosition</code> property.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.maxVerticalScrollPosition">
      <summary>The maximum value for the <code>verticalScrollPosition</code> property.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.scrollTipFunction">
      <summary>A function that computes the string to be displayed as the ScrollTip.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.verticalScrollPolicy">
      <summary>A property that indicates whether the vertical scroll bar is always on, always off, or automatically changes based on the parameters passed to the <code>setScrollBarProperties()</code> method.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.verticalScrollPosition">
      <summary>The offset into the content from the top edge.</summary>
    </member>
    <member name="P:mx.core.ScrollControlBase.viewMetrics">
      <summary>An EdgeMetrics object taking into account the scroll bars, if visible.</summary>
    </member>
    <member name="T:mx.core.ScrollPolicy">
      <summary>Values for the <code>horizontalScrollPolicy</code> and <code>verticalScrollPolicy</code> properties of the Container and ScrollControlBase classes.</summary>
    </member>
    <member name="F:mx.core.ScrollPolicy.OFF">
      <summary>Never show the scrollbar.</summary>
    </member>
    <member name="F:mx.core.ScrollPolicy.ON">
      <summary>Always show the scrollbar.</summary>
    </member>
    <member name="T:mx.core.SoundAsset">
      <summary>SoundAsset is a subclass of the flash.media.Sound class which represents sounds that you embed in a Flex application.</summary>
    </member>
    <member name="T:mx.core.SpriteAsset">
      <summary>SpriteAsset is a subclass of the flash.display.Sprite class which represents vector graphic images that you embed in a Flex application.</summary>
    </member>
    <member name="M:mx.core.SpriteAsset.move(System.Double,System.Double)">
      <summary>Moves this object to the specified x and y coordinates.</summary>
      <param name="x">The new x-position for this object.</param>
      <param name="y">The new y-position for this object.</param>
    </member>
    <member name="M:mx.core.SpriteAsset.setActualSize(System.Double,System.Double)">
      <summary>Sets the actual size of this object.</summary>
      <param name="newWidth">The new width for this object.</param>
      <param name="newHeight">The new height for this object.</param>
    </member>
    <member name="P:mx.core.SpriteAsset.borderMetrics">
      <summary>Returns an EdgeMetrics object for the border that has four properties: <code>left</code>, <code>top</code>, <code>right</code>, and <code>bottom</code>.</summary>
    </member>
    <member name="P:mx.core.SpriteAsset.measuredHeight">
      <summary>The measured height of this object.</summary>
    </member>
    <member name="P:mx.core.SpriteAsset.measuredWidth">
      <summary>The measured width of this object.</summary>
    </member>
    <member name="T:mx.core.TextFieldAsset">
      <summary>TextFieldAsset is a subclass of the flash.text.TextField class which represents TextField symbols that you embed in a Flex application from a SWF file produced by Flash.</summary>
    </member>
    <member name="M:mx.core.TextFieldAsset.move(System.Double,System.Double)">
      <summary>Moves this object to the specified x and y coordinates.</summary>
      <param name="x">The new x-position for this object.</param>
      <param name="y">The new y-position for this object.</param>
    </member>
    <member name="M:mx.core.TextFieldAsset.setActualSize(System.Double,System.Double)">
      <summary>Sets the actual size of this object.</summary>
      <param name="newWidth">The new width for this object.</param>
      <param name="newHeight">The new height for this object.</param>
    </member>
    <member name="P:mx.core.TextFieldAsset.measuredHeight">
      <summary>The measured height of this object.</summary>
    </member>
    <member name="P:mx.core.TextFieldAsset.measuredWidth">
      <summary>The measured width of this object.</summary>
    </member>
    <member name="T:mx.core.UIComponent">
      <summary>The UIComponent class is the base class for all visual components, both interactive and noninteractive.</summary>
    </member>
    <member name="E:mx.core.UIComponent.toolTipStart">
      <summary>Dispatched by a component whose <code>toolTip</code> property is set, as soon as the user moves the mouse over it.</summary>
    </member>
    <member name="E:mx.core.UIComponent.toolTipShown">
      <summary>Dispatched by the component when its ToolTip has been shown.</summary>
    </member>
    <member name="E:mx.core.UIComponent.toolTipShow">
      <summary>Dispatched by the component when its ToolTip is about to be shown.</summary>
    </member>
    <member name="E:mx.core.UIComponent.toolTipHide">
      <summary>Dispatched by the component when its ToolTip is about to be hidden.</summary>
    </member>
    <member name="E:mx.core.UIComponent.toolTipEnd">
      <summary>Dispatched by the component when its ToolTip has been hidden and will be discarded soon.</summary>
    </member>
    <member name="E:mx.core.UIComponent.toolTipCreate">
      <summary>Dispatched by the component when it is time to create a ToolTip.</summary>
    </member>
    <member name="E:mx.core.UIComponent.exitState">
      <summary>Dispatched before the component exits from the root view state.</summary>
    </member>
    <member name="E:mx.core.UIComponent.enterState">
      <summary>Dispatched after the component has returned to the root view state.</summary>
    </member>
    <member name="E:mx.core.UIComponent.currentStateChange">
      <summary>Dispatched after the view state has changed.</summary>
    </member>
    <member name="E:mx.core.UIComponent.currentStateChanging">
      <summary>Dispatched after the <code>currentState</code> property changes, but before the view state changes.</summary>
    </member>
    <member name="E:mx.core.UIComponent.effectEnd">
      <summary>Dispatched after an effect ends.</summary>
    </member>
    <member name="E:mx.core.UIComponent.effectStart">
      <summary>Dispatched just before an effect starts.</summary>
    </member>
    <member name="E:mx.core.UIComponent.dragStart">
      <summary>Dispatched by the drag initiator when starting a drag operation.</summary>
    </member>
    <member name="E:mx.core.UIComponent.dragComplete">
      <summary>Dispatched by the drag initiator (the component that is the source of the data being dragged) when the drag operation completes, either when you drop the dragged data onto a drop target or when you end the drag-and-drop operation without performing a drop.</summary>
    </member>
    <member name="E:mx.core.UIComponent.dragDrop">
      <summary>Dispatched by the drop target when the user releases the mouse over it.</summary>
    </member>
    <member name="E:mx.core.UIComponent.dragExit">
      <summary>Dispatched by the component when the user drags outside the component, but does not drop the data onto the target.</summary>
    </member>
    <member name="E:mx.core.UIComponent.dragOver">
      <summary>Dispatched by a component when the user moves the mouse while over the component during a drag operation.</summary>
    </member>
    <member name="E:mx.core.UIComponent.dragEnter">
      <summary>Dispatched by a component when the user moves the mouse over the component during a drag operation.</summary>
    </member>
    <member name="E:mx.core.UIComponent.valid">
      <summary>Dispatched when a component is monitored by a Validator and the validation succeeded.</summary>
    </member>
    <member name="E:mx.core.UIComponent.invalid">
      <summary>Dispatched when a component is monitored by a Validator and the validation failed.</summary>
    </member>
    <member name="E:mx.core.UIComponent.valueCommit">
      <summary>Dispatched when values are changed programmatically or by user interaction.</summary>
    </member>
    <member name="E:mx.core.UIComponent.mouseWheelOutside">
      <summary>Dispatched from a component opened using the PopUpManager when the user scrolls the mouse wheel outside it.</summary>
    </member>
    <member name="E:mx.core.UIComponent.mouseDownOutside">
      <summary>Dispatched from a component opened using the PopUpManager when the user clicks outside it.</summary>
    </member>
    <member name="E:mx.core.UIComponent.show">
      <summary>Dispatched when an object's state changes from invisible to visible.</summary>
    </member>
    <member name="E:mx.core.UIComponent.resize">
      <summary>Dispatched when the component is resized.</summary>
    </member>
    <member name="E:mx.core.UIComponent.remove">
      <summary>Dispatched when the component is removed from a container as a content child by using the <code>removeChild()</code> or <code>removeChildAt()</code> method.</summary>
    </member>
    <member name="E:mx.core.UIComponent.preinitialize">
      <summary>Dispatched at the beginning of the component initialization sequence.</summary>
    </member>
    <member name="E:mx.core.UIComponent.move">
      <summary>Dispatched when the object has moved.</summary>
    </member>
    <member name="E:mx.core.UIComponent.initialize">
      <summary>Dispatched when the component has finished its construction and has all initialization properties set.</summary>
    </member>
    <member name="E:mx.core.UIComponent.hide">
      <summary>Dispatched when an object's state changes from visible to invisible.</summary>
    </member>
    <member name="E:mx.core.UIComponent.updateComplete">
      <summary>Dispatched when an object has had its <code>commitProperties()</code>, <code>measure()</code>, and <code>updateDisplayList()</code> methods called (if needed).</summary>
    </member>
    <member name="E:mx.core.UIComponent.creationComplete">
      <summary>Dispatched when the component has finished its construction, property processing, measuring, layout, and drawing.</summary>
    </member>
    <member name="E:mx.core.UIComponent.add">
      <summary>Dispatched when the component is added to a container as a content child by using the <code>addChild()</code> or <code>addChildAt()</code> method.</summary>
    </member>
    <member name="M:mx.core.UIComponent.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.core.UIComponent.adjustFocusRect(flash.display.DisplayObject)">
      <summary>Adjust the focus rectangle.</summary>
      <param name="obj">component whose focus rectangle to modify. If omitted, the default value is this UIComponent object.</param>
    </member>
    <member name="M:mx.core.UIComponent.attachOverlay">
      <summary>This is an internal method used by the Flex framework to support the Dissolve effect.</summary>
    </member>
    <member name="M:mx.core.UIComponent.callLater(Avm.Function,Avm.Array)">
      <summary>Queues a function to be called later.</summary>
      <param name="method">Reference to a method to be executed later.</param>
      <param name="args">Array of Objects that represent the arguments to pass to the method.</param>
    </member>
    <member name="M:mx.core.UIComponent.childrenCreated">
      <summary>Performs any final processing after child objects are created.</summary>
    </member>
    <member name="M:mx.core.UIComponent.clearStyle(Avm.String)">
      <summary>Deletes a style property from this component instance.</summary>
      <param name="styleProp">The name of the style property.</param>
    </member>
    <member name="M:mx.core.UIComponent.commitProperties">
      <summary>Processes the properties set on the component.</summary>
    </member>
    <member name="M:mx.core.UIComponent.contentToGlobal(flash.geom.Point)">
      <summary>Converts a <code>Point</code> object from content coordinates to global coordinates.</summary>
      <param name="point">A Point object that specifies the <i>x</i> and <i>y</i> coordinates in the content coordinate system as properties.</param>
    </member>
    <member name="M:mx.core.UIComponent.contentToLocal(flash.geom.Point)">
      <summary>Converts a <code>Point</code> object from content to local coordinates.</summary>
      <param name="point">A Point object that specifies the <i>x</i> and <i>y</i> coordinates in the content coordinate system as properties.</param>
    </member>
    <member name="M:mx.core.UIComponent.createAutomationIDPart(mx.automation.IAutomationObject)">
      <summary>Returns a set of properties that identify the child within this container.</summary>
      <param name="child">Child for which to provide the id.</param>
    </member>
    <member name="M:mx.core.UIComponent.createChildren">
      <summary>Create child objects of the component.</summary>
    </member>
    <member name="M:mx.core.UIComponent.createInFontContext(Avm.Class)">
      <summary>Creates a new object using a context based on the embedded font being used.</summary>
      <param name="classObj">The class to create.</param>
    </member>
    <member name="M:mx.core.UIComponent.createInModuleContext(mx.core.IFlexModuleFactory,Avm.String)">
      <summary>Creates the object using a given moduleFactory.</summary>
      <param name="moduleFactory">The moduleFactory to create the class in; may be null.</param>
      <param name="className">The name of the class to create.</param>
    </member>
    <member name="M:mx.core.UIComponent.createReferenceOnParentDocument(mx.core.IFlexDisplayObject)">
      <summary>Creates an <code>id</code> reference to this IUIComponent object on its parent document object.</summary>
      <param name="parentDocument">The parent of this IUIComponent object.</param>
    </member>
    <member name="M:mx.core.UIComponent.deleteReferenceOnParentDocument(mx.core.IFlexDisplayObject)">
      <summary>Deletes the <code>id</code> reference to this IUIComponent object on its parent document object.</summary>
      <param name="parentDocument">The parent of this IUIComponent object.</param>
    </member>
    <member name="M:mx.core.UIComponent.determineTextFormatFromStyles">
      <summary>Returns a UITextFormat object corresponding to the text styles for this UIComponent.</summary>
    </member>
    <member name="M:mx.core.UIComponent.dispatchEvent(flash.events.Event)">
      <summary>Dispatches an event into the event flow.</summary>
      <param name="event">The Event object that is dispatched into the event flow. If the event is being redispatched, a clone of the event is created automatically. After an event is dispatched, its <code>target</code> property cannot be changed, so you must create a new copy of the event for redispatching to work.</param>
    </member>
    <member name="M:mx.core.UIComponent.drawFocus(System.Boolean)">
      <summary>Shows or hides the focus indicator around this component.</summary>
      <param name="isFocused">Determines if the focus indicator should be displayed. Set to <code>true</code> to display the focus indicator. Set to <code>false</code> to hide it.</param>
    </member>
    <member name="M:mx.core.UIComponent.drawRoundRect(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object,System.Object,System.Object,Avm.String,Avm.Array,System.Object)">
      <summary />
      <param name="x" />
      <param name="y" />
      <param name="w" />
      <param name="h" />
      <param name="r" />
      <param name="c" />
      <param name="alpha" />
      <param name="rot" />
      <param name="gradient" />
      <param name="ratios" />
      <param name="hole" />
    </member>
    <member name="M:mx.core.UIComponent.effectFinished(mx.effects.IEffectInstance)">
      <summary>Called by the effect instance when it stops playing on the component.</summary>
      <param name="effectInst">The effect instance object playing on the component.</param>
    </member>
    <member name="M:mx.core.UIComponent.effectStarted(mx.effects.IEffectInstance)">
      <summary>Called by the effect instance when it starts playing on the component.</summary>
      <param name="effectInst">The effect instance object playing on the component.</param>
    </member>
    <member name="M:mx.core.UIComponent.endEffectsStarted">
      <summary>Ends all currently playing effects on the component.</summary>
    </member>
    <member name="M:mx.core.UIComponent.executeBindings(System.Boolean)">
      <summary>Executes the data bindings into this UIComponent object.</summary>
      <param name="recurse">Recursively execute bindings for children of this component.</param>
    </member>
    <member name="M:mx.core.UIComponent.finishPrint(System.Object,mx.core.IFlexDisplayObject)">
      <summary>Called after printing is complete.</summary>
      <param name="obj">Contains the properties of the component that restore it to its state before printing.</param>
      <param name="target">The component that just finished printing. It may be the current component or one of its children.</param>
    </member>
    <member name="M:mx.core.UIComponent.focusInHandler(flash.events.FocusEvent)">
      <summary>The event handler called when a UIComponent object gets focus.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.core.UIComponent.focusOutHandler(flash.events.FocusEvent)">
      <summary>The event handler called when a UIComponent object loses focus.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.core.UIComponent.getAutomationChildAt(System.Int32)">
      <summary>Provides the automation object at the specified index.</summary>
      <param name="index">The index of the child to return</param>
    </member>
    <member name="M:mx.core.UIComponent.getClassStyleDeclarations">
      <summary>Finds the type selectors for this UIComponent instance.</summary>
    </member>
    <member name="M:mx.core.UIComponent.getConstraintValue(Avm.String)">
      <summary>Returns a layout constraint value, which is the same as getting the constraint style for this component.</summary>
      <param name="constraintName" />
    </member>
    <member name="M:mx.core.UIComponent.getExplicitOrMeasuredHeight">
      <summary>A convenience method for determining whether to use the explicit or measured height</summary>
    </member>
    <member name="M:mx.core.UIComponent.getExplicitOrMeasuredWidth">
      <summary>A convenience method for determining whether to use the explicit or measured width</summary>
    </member>
    <member name="M:mx.core.UIComponent.getFocus">
      <summary>Gets the object that currently has focus.</summary>
    </member>
    <member name="M:mx.core.UIComponent.getRepeaterItem(System.Int32)">
      <summary>Returns the item in the <code>dataProvider</code> that was used by the specified Repeater to produce this Repeater, or <code>null</code> if this Repeater isn't repeated.</summary>
      <param name="whichRepeater">Number of the Repeater, counting from the outermost one, starting at 0.</param>
    </member>
    <member name="M:mx.core.UIComponent.getStyle(Avm.String)">
      <summary>Gets a style property that has been set anywhere in this component's style lookup chain.</summary>
      <param name="styleProp">Name of the style property.</param>
    </member>
    <member name="M:mx.core.UIComponent.globalToContent(flash.geom.Point)">
      <summary>Converts a <code>Point</code> object from global to content coordinates.</summary>
      <param name="point">A Point object that specifies the <i>x</i> and <i>y</i> coordinates in the global (Stage) coordinate system as properties.</param>
    </member>
    <member name="M:mx.core.UIComponent.horizontalGradientMatrix(System.Double,System.Double,System.Double,System.Double)">
      <summary>Returns a box Matrix which can be passed to the <code>drawRoundRect()</code> method as the <code>rot</code> parameter when drawing a horizontal gradient.</summary>
      <param name="x">The left coordinate of the gradient, in pixels.</param>
      <param name="y">The top coordinate of the gradient, in pixels.</param>
      <param name="width">The width of the gradient, in pixels.</param>
      <param name="height">The height of the gradient, in pixels.</param>
    </member>
    <member name="M:mx.core.UIComponent.initializationComplete">
      <summary>Finalizes the initialization of this component.</summary>
    </member>
    <member name="M:mx.core.UIComponent.initialize">
      <summary>Initializes the internal structure of this component.</summary>
    </member>
    <member name="M:mx.core.UIComponent.initializeAccessibility">
      <summary>Initializes this component's accessibility code.</summary>
    </member>
    <member name="M:mx.core.UIComponent.initializeRepeaterArrays(mx.core.IRepeaterClient)">
      <summary>Initializes various properties which keep track of repeated instances of this component.</summary>
      <param name="parent">The parent object containing the Repeater that created this component.</param>
    </member>
    <member name="M:mx.core.UIComponent.invalidateDisplayList">
      <summary>Marks a component so that its <code>updateDisplayList()</code> method gets called during a later screen update.</summary>
    </member>
    <member name="M:mx.core.UIComponent.invalidateProperties">
      <summary>Marks a component so that its <code>commitProperties()</code> method gets called during a later screen update.</summary>
    </member>
    <member name="M:mx.core.UIComponent.invalidateSize">
      <summary>Marks a component so that its <code>measure()</code> method gets called during a later screen update.</summary>
    </member>
    <member name="M:mx.core.UIComponent.isOurFocus(flash.display.DisplayObject)">
      <summary>Typically overridden by components containing UITextField objects, where the UITextField object gets focus.</summary>
      <param name="target">A UIComponent object containing a UITextField object that can receive focus.</param>
    </member>
    <member name="M:mx.core.UIComponent.keyDownHandler(flash.events.KeyboardEvent)">
      <summary>The event handler called for a <code>keyDown</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.core.UIComponent.keyUpHandler(flash.events.KeyboardEvent)">
      <summary>The event handler called for a <code>keyUp</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.core.UIComponent.localToContent(flash.geom.Point)">
      <summary>Converts a <code>Point</code> object from local to content coordinates.</summary>
      <param name="point">A Point object that specifies the <i>x</i> and <i>y</i> coordinates in the local coordinate system as properties.</param>
    </member>
    <member name="M:mx.core.UIComponent.measure">
      <summary>Calculates the default size, and optionally the default minimum size, of the component.</summary>
    </member>
    <member name="M:mx.core.UIComponent.measureHTMLText(Avm.String)">
      <summary>Measures the specified HTML text, which may contain HTML tags such as <code>&lt;font&gt;</code> and <code>&lt;b&gt;</code>, assuming that it is displayed in a single-line UITextField using a UITextFormat determined by the styles of this UIComponent.</summary>
      <param name="htmlText">A String specifying the HTML text to measure.</param>
    </member>
    <member name="M:mx.core.UIComponent.measureText(Avm.String)">
      <summary>Measures the specified text, assuming that it is displayed in a single-line UITextField using a UITextFormat determined by the styles of this UIComponent.</summary>
      <param name="text">A String specifying the text to measure.</param>
    </member>
    <member name="M:mx.core.UIComponent.move(System.Double,System.Double)">
      <summary>Moves the component to a specified position within its parent.</summary>
      <param name="x">Left position of the component within its parent.</param>
      <param name="y">Top position of the component within its parent.</param>
    </member>
    <member name="M:mx.core.UIComponent.notifyStyleChangeInChildren(Avm.String,System.Boolean)">
      <summary>Propagates style changes to the children.</summary>
      <param name="styleProp">String specifying the name of the style property.</param>
      <param name="recursive">Recursivly notify all children of this component.</param>
    </member>
    <member name="M:mx.core.UIComponent.owns(flash.display.DisplayObject)">
      <summary>Returns <code>true</code> if the chain of <code>owner</code> properties points from <code>child</code> to this UIComponent.</summary>
      <param name="child">A UIComponent.</param>
    </member>
    <member name="M:mx.core.UIComponent.parentChanged(flash.display.DisplayObjectContainer)">
      <summary>Called by Flex when a UIComponent object is added to or removed from a parent.</summary>
      <param name="p">The parent of this UIComponent object.</param>
    </member>
    <member name="M:mx.core.UIComponent.prepareToPrint(mx.core.IFlexDisplayObject)">
      <summary>Prepares an IFlexDisplayObject for printing.</summary>
      <param name="target">The component to be printed. It may be the current component or one of its children.</param>
    </member>
    <member name="M:mx.core.UIComponent.regenerateStyleCache(System.Boolean)">
      <summary>Builds or rebuilds the CSS style cache for this component and, if the <code>recursive</code> parameter is <code>true</code>, for all descendants of this component as well.</summary>
      <param name="recursive">Recursivly regenerates the style cache for all children of this component.</param>
    </member>
    <member name="M:mx.core.UIComponent.registerEffects(Avm.Array)">
      <summary>For each effect event, registers the EffectManager as one of the event listeners.</summary>
      <param name="effects">The names of the effect events.</param>
    </member>
    <member name="M:mx.core.UIComponent.replayAutomatableEvent(flash.events.Event)">
      <summary>Replays the specified event.</summary>
      <param name="event">The event to replay.</param>
    </member>
    <member name="M:mx.core.UIComponent.resolveAutomationIDPart(System.Object)">
      <summary>Resolves a child by using the id provided.</summary>
      <param name="criteria">Set of properties describing the child. The criteria can contain regular expression values resulting in multiple children being matched.</param>
    </member>
    <member name="M:mx.core.UIComponent.resourcesChanged">
      <summary>This method is called when a UIComponent is constructed, and again whenever the ResourceManager dispatches a <code>"change"</code> Event to indicate that the localized resources have changed in some way.</summary>
    </member>
    <member name="M:mx.core.UIComponent.resumeBackgroundProcessing">
      <summary>Resumes the background processing of methods queued by <code>callLater()</code>, after a call to <code>suspendBackgroundProcessing()</code>.</summary>
    </member>
    <member name="M:mx.core.UIComponent.setActualSize(System.Double,System.Double)">
      <summary>Sizes the object.</summary>
      <param name="w">Width of the object.</param>
      <param name="h">Height of the object.</param>
    </member>
    <member name="M:mx.core.UIComponent.setConstraintValue(Avm.String,)">
      <summary>Sets a layout constraint value, which is the same as setting the constraint style for this component.</summary>
      <param name="constraintName" />
      <param name="value" />
    </member>
    <member name="M:mx.core.UIComponent.setCurrentState(Avm.String,System.Boolean)">
      <summary>Set the current state.</summary>
      <param name="stateName">The name of the new view state.</param>
      <param name="playTransition">If <code>true</code>, play the appropriate transition when the view state changes.</param>
    </member>
    <member name="M:mx.core.UIComponent.setFocus">
      <summary>Sets the focus to this component.</summary>
    </member>
    <member name="M:mx.core.UIComponent.setStyle(Avm.String,)">
      <summary>Sets a style property on this component instance.</summary>
      <param name="styleProp">Name of the style property.</param>
      <param name="newValue">New value for the style.</param>
    </member>
    <member name="M:mx.core.UIComponent.setVisible(System.Boolean,System.Boolean)">
      <summary>Called when the <code>visible</code> property changes.</summary>
      <param name="value">The new value of the <code>visible</code> property. Specify <code>true</code> to show the component, and <code>false</code> to hide it.</param>
      <param name="noEvent">If <code>true</code>, do not dispatch an event. If <code>false</code>, dispatch a <code>show</code> event when the component becomes visible, and a <code>hide</code> event when the component becomes invisible.</param>
    </member>
    <member name="M:mx.core.UIComponent.styleChanged(Avm.String)">
      <summary>Detects changes to style properties.</summary>
      <param name="styleProp">The name of the style property, or null if all styles for this component have changed.</param>
    </member>
    <member name="M:mx.core.UIComponent.stylesInitialized">
      <summary>Flex calls the <code>stylesInitialized()</code> method when the styles for a component are first initialized.</summary>
    </member>
    <member name="M:mx.core.UIComponent.suspendBackgroundProcessing">
      <summary>Blocks the background processing of methods queued by <code>callLater()</code>, until <code>resumeBackgroundProcessing()</code> is called.</summary>
    </member>
    <member name="M:mx.core.UIComponent.updateDisplayList(System.Double,System.Double)">
      <summary>Draws the object and/or sizes and positions its children.</summary>
      <param name="unscaledWidth">Specifies the width of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleX</code> property of the component.</param>
      <param name="unscaledHeight">Specifies the height of the component, in pixels, in the component's coordinates, regardless of the value of the <code>scaleY</code> property of the component.</param>
    </member>
    <member name="M:mx.core.UIComponent.validateDisplayList">
      <summary>Validates the position and size of children and draws other visuals.</summary>
    </member>
    <member name="M:mx.core.UIComponent.validateNow">
      <summary>Validate and update the properties and layout of this object and redraw it, if necessary.</summary>
    </member>
    <member name="M:mx.core.UIComponent.validateProperties">
      <summary>Used by layout logic to validate the properties of a component by calling the <code>commitProperties()</code> method.</summary>
    </member>
    <member name="M:mx.core.UIComponent.validateSize(System.Boolean)">
      <summary>Validates the measured size of the component If the <code>LayoutManager.invalidateSize()</code> method is called with this ILayoutManagerClient, then the <code>validateSize()</code> method is called when it's time to do measurements.</summary>
      <param name="recursive">If <code>true</code>, call this method on the objects children.</param>
    </member>
    <member name="M:mx.core.UIComponent.validationResultHandler(mx.events.ValidationResultEvent)">
      <summary>Handles both the <code>valid</code> and <code>invalid</code> events from a validator assigned to this component.</summary>
      <param name="event">The event object for the validation.</param>
    </member>
    <member name="M:mx.core.UIComponent.verticalGradientMatrix(System.Double,System.Double,System.Double,System.Double)">
      <summary>Returns a box Matrix which can be passed to <code>drawRoundRect()</code> as the <code>rot</code> parameter when drawing a vertical gradient.</summary>
      <param name="x">The left coordinate of the gradient, in pixels.</param>
      <param name="y">The top coordinate of the gradient, in pixels.</param>
      <param name="width">The width of the gradient, in pixels.</param>
      <param name="height">The height of the gradient, in pixels.</param>
    </member>
    <member name="F:mx.core.UIComponent.DEFAULT_MAX_HEIGHT">
      <summary>The default value for the <code>maxHeight</code> property.</summary>
    </member>
    <member name="F:mx.core.UIComponent.DEFAULT_MAX_WIDTH">
      <summary>The default value for the <code>maxWidth</code> property.</summary>
    </member>
    <member name="F:mx.core.UIComponent.DEFAULT_MEASURED_HEIGHT">
      <summary>The default value for the <code>measuredHeight</code> property.</summary>
    </member>
    <member name="F:mx.core.UIComponent.DEFAULT_MEASURED_MIN_HEIGHT">
      <summary>The default value for the <code>measuredMinHeight</code> property.</summary>
    </member>
    <member name="F:mx.core.UIComponent.DEFAULT_MEASURED_MIN_WIDTH">
      <summary>The default value for the <code>measuredMinWidth</code> property.</summary>
    </member>
    <member name="F:mx.core.UIComponent.states">
      <summary>The view states that are defined for this component.</summary>
    </member>
    <member name="F:mx.core.UIComponent.transitions">
      <summary>An Array of Transition objects, where each Transition object defines a set of effects to play when a view state change occurs.</summary>
    </member>
    <member name="P:mx.core.UIComponent.activeEffects">
      <summary>The list of effects that are currently playing on the component, as an Array of EffectInstance instances.</summary>
    </member>
    <member name="P:mx.core.UIComponent.automationDelegate">
      <summary>The delegate object that handles the automation-related functionality.</summary>
    </member>
    <member name="P:mx.core.UIComponent.automationName">
      <summary>Name that can be used as an identifier for this object.</summary>
    </member>
    <member name="P:mx.core.UIComponent.automationTabularData">
      <summary>An implementation of the <code>IAutomationTabularData</code> interface, which can be used to retrieve the data.</summary>
    </member>
    <member name="P:mx.core.UIComponent.automationValue">
      <summary />
    </member>
    <member name="P:mx.core.UIComponent.baselinePosition">
      <summary>The y-coordinate of the baseline of the first line of text of the component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.cachePolicy">
      <summary>Specifies the bitmap caching policy for this object.</summary>
    </member>
    <member name="P:mx.core.UIComponent.className">
      <summary>The name of this instance's class, such as <code>"Button"</code>.</summary>
    </member>
    <member name="P:mx.core.UIComponent.contentMouseX">
      <summary>Returns the <i>x</i> position of the mouse, in the content coordinate system.</summary>
    </member>
    <member name="P:mx.core.UIComponent.contentMouseY">
      <summary>Returns the <i>y</i> position of the mouse, in the content coordinate system.</summary>
    </member>
    <member name="P:mx.core.UIComponent.currentState">
      <summary>The current view state of the component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.cursorManager">
      <summary>Gets the CursorManager that controls the cursor for this component and its peers.</summary>
    </member>
    <member name="P:mx.core.UIComponent.descriptor">
      <summary>Reference to the UIComponentDescriptor, if any, that was used by the <code>createComponentFromDescriptor()</code> method to create this UIComponent instance.</summary>
    </member>
    <member name="P:mx.core.UIComponent.document">
      <summary>A reference to the document object associated with this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.doubleClickEnabled">
      <summary>Specifies whether the UIComponent object receives <code>doubleClick</code> events.</summary>
    </member>
    <member name="P:mx.core.UIComponent.enabled">
      <summary />
    </member>
    <member name="P:mx.core.UIComponent.errorString">
      <summary>The text that will be displayed by a component's error tip when a component is monitored by a Validator and validation fails.</summary>
    </member>
    <member name="P:mx.core.UIComponent.explicitHeight">
      <summary>Number that specifies the explicit height of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.explicitMaxHeight">
      <summary>Number that specifies the maximum height of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.explicitMaxWidth">
      <summary>Number that specifies the maximum width of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.explicitMinHeight">
      <summary>Number that specifies the minimum height of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.explicitMinWidth">
      <summary>Number that specifies the minimum width of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.explicitWidth">
      <summary>Number that specifies the explicit width of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.flexContextMenu">
      <summary>The context menu for this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.focusEnabled">
      <summary>Indicates whether the component can receive focus when tabbed to.</summary>
    </member>
    <member name="P:mx.core.UIComponent.focusManager">
      <summary>Gets the FocusManager that controls focus for this component and its peers.</summary>
    </member>
    <member name="P:mx.core.UIComponent.focusPane">
      <summary>The focus pane associated with this object.</summary>
    </member>
    <member name="P:mx.core.UIComponent.height">
      <summary>Number that specifies the height of the component, in pixels, in the parent's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.id">
      <summary>ID of the component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.includeInLayout">
      <summary>Specifies whether this component is included in the layout of the parent container.</summary>
    </member>
    <member name="P:mx.core.UIComponent.inheritingStyles">
      <summary>The beginning of this component's chain of inheriting styles.</summary>
    </member>
    <member name="P:mx.core.UIComponent.initialized">
      <summary>A flag that determines if an object has been through all three phases of layout: commitment, measurement, and layout (provided that any were required).</summary>
    </member>
    <member name="P:mx.core.UIComponent.instanceIndex">
      <summary>The index of a repeated component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.instanceIndices">
      <summary>An Array containing the indices required to reference this UIComponent object from its parent document.</summary>
    </member>
    <member name="P:mx.core.UIComponent.isDocument">
      <summary>Determines whether this UIComponent instance is a document object, that is, whether it is at the top of the hierarchy of a Flex application, MXML component, or ActionScript component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.isPopUp">
      <summary>Set to <code>true</code> by the PopUpManager to indicate that component has been popped up.</summary>
    </member>
    <member name="P:mx.core.UIComponent.maxHeight">
      <summary>Number that specifies the maximum height of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.maxWidth">
      <summary>Number that specifies the maximum width of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.measuredHeight">
      <summary>The default height of the component, in pixels.</summary>
    </member>
    <member name="P:mx.core.UIComponent.measuredMinHeight">
      <summary>The default minimum height of the component, in pixels.</summary>
    </member>
    <member name="P:mx.core.UIComponent.measuredMinWidth">
      <summary>The default minimum width of the component, in pixels.</summary>
    </member>
    <member name="P:mx.core.UIComponent.measuredWidth">
      <summary>The default width of the component, in pixels.</summary>
    </member>
    <member name="P:mx.core.UIComponent.minHeight">
      <summary>Number that specifies the minimum height of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.minWidth">
      <summary>Number that specifies the minimum width of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.moduleFactory">
      <summary>The moduleFactory that is used to create TextFields in the correct SWF context.</summary>
    </member>
    <member name="P:mx.core.UIComponent.mouseFocusEnabled">
      <summary>Whether you can receive focus when clicked on.</summary>
    </member>
    <member name="P:mx.core.UIComponent.nestLevel">
      <summary>Depth of this object in the containment hierarchy.</summary>
    </member>
    <member name="P:mx.core.UIComponent.nonInheritingStyles">
      <summary>The beginning of this component's chain of non-inheriting styles.</summary>
    </member>
    <member name="P:mx.core.UIComponent.numAutomationChildren">
      <summary>The number of automation children this container has.</summary>
    </member>
    <member name="P:mx.core.UIComponent.owner">
      <summary>The owner of this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.parent">
      <summary>The parent container or component for this component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.parentApplication">
      <summary>A reference to the Application object that contains this UIComponent instance.</summary>
    </member>
    <member name="P:mx.core.UIComponent.parentDocument">
      <summary>A reference to the parent document object for this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.percentHeight">
      <summary>Number that specifies the height of a component as a percentage of its parent's size.</summary>
    </member>
    <member name="P:mx.core.UIComponent.percentWidth">
      <summary>Number that specifies the width of a component as a percentage of its parent's size.</summary>
    </member>
    <member name="P:mx.core.UIComponent.processedDescriptors">
      <summary>Set to <code>true</code> after immediate or deferred child creation, depending on which one happens.</summary>
    </member>
    <member name="P:mx.core.UIComponent.repeater">
      <summary>A reference to the Repeater object in the parent document that produced this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.repeaterIndex">
      <summary>The index of the item in the data provider of the Repeater that produced this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.repeaterIndices">
      <summary>An Array containing the indices of the items in the data provider of the Repeaters in the parent document that produced this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.repeaters">
      <summary>An Array containing references to the Repeater objects in the parent document that produced this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.scaleX">
      <summary>Number that specifies the horizontal scaling factor.</summary>
    </member>
    <member name="P:mx.core.UIComponent.scaleY">
      <summary>Number that specifies the vertical scaling factor.</summary>
    </member>
    <member name="P:mx.core.UIComponent.screen">
      <summary>Returns an object that contains the size and position of the base drawing surface for this object.</summary>
    </member>
    <member name="P:mx.core.UIComponent.showInAutomationHierarchy">
      <summary>A flag that determines if an automation object shows in the automation hierarchy.</summary>
    </member>
    <member name="P:mx.core.UIComponent.styleDeclaration">
      <summary>Storage for the inline inheriting styles on this object.</summary>
    </member>
    <member name="P:mx.core.UIComponent.styleName">
      <summary>The class style used by this component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.systemManager">
      <summary>Returns the SystemManager object used by this component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.toolTip">
      <summary>Text to display in the ToolTip.</summary>
    </member>
    <member name="P:mx.core.UIComponent.tweeningProperties">
      <summary>Array of properties that are currently being tweened on this object.</summary>
    </member>
    <member name="P:mx.core.UIComponent.uid">
      <summary>A unique identifier for the object.</summary>
    </member>
    <member name="P:mx.core.UIComponent.unscaledHeight">
      <summary>A convenience method for determining the unscaled height of the component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.unscaledWidth">
      <summary>A convenience method for determining the unscaled width of the component All of a component's drawing and child layout should be done within a bounding rectangle of this width, which is also passed as an argument to <code>updateDisplayList()</code>.</summary>
    </member>
    <member name="P:mx.core.UIComponent.updateCompletePendingFlag">
      <summary>A flag that determines if an object has been through all three phases of layout validation (provided that any were required).</summary>
    </member>
    <member name="P:mx.core.UIComponent.validationSubField">
      <summary>Used by a validator to associate a subfield with this component.</summary>
    </member>
    <member name="P:mx.core.UIComponent.visible">
      <summary>Controls the visibility of this UIComponent.</summary>
    </member>
    <member name="P:mx.core.UIComponent.width">
      <summary>Number that specifies the width of the component, in pixels, in the parent's coordinates.</summary>
    </member>
    <member name="P:mx.core.UIComponent.x">
      <summary>Number that specifies the component's horizontal position, in pixels, within its parent container.</summary>
    </member>
    <member name="P:mx.core.UIComponent.y">
      <summary>Number that specifies the component's vertical position, in pixels, within its parent container.</summary>
    </member>
    <member name="P:mx.core.UIComponent.cacheHeuristic">
      <summary>Used by Flex to suggest bitmap caching for the object.</summary>
    </member>
    <member name="T:mx.core.UIComponentCachePolicy">
      <summary>The ContainerCreationPolicy class defines the constant values for the <code>cachePolicy</code> property of the UIComponent class.</summary>
    </member>
    <member name="F:mx.core.UIComponentCachePolicy.OFF">
      <summary>Specifies that the Flex framework should never attempt to cache the object as a bitmap.</summary>
    </member>
    <member name="F:mx.core.UIComponentCachePolicy.ON">
      <summary>Specifies that the Flex framework should always cache the object as a bitmap.</summary>
    </member>
    <member name="T:mx.core.UIComponentDescriptor">
      <summary>A UIComponentDescriptor instance encapsulates the information that you specified in an MXML tag for an instance of a visual component.</summary>
    </member>
    <member name="F:mx.core.UIComponentDescriptor.effects">
      <summary>An Array containing the effects for the component, as specified in MXML.</summary>
    </member>
    <member name="F:mx.core.UIComponentDescriptor.stylesFactory">
      <summary>A Function that constructs an Object containing name/value pairs for the instance styles for the component, as specified in MXML.</summary>
    </member>
    <member name="T:mx.core.UIComponentGlobals" />
    <member name="P:mx.core.UIComponentGlobals.catchCallLaterExceptions">
      <summary>A global flag that can is used to catch unhandled exceptions during execution of methods executed via callLater</summary>
    </member>
    <member name="P:mx.core.UIComponentGlobals.designMode">
      <summary>A global flag that can be read by any component to determine whether it is currently executing in the context of a design tool such as Flex Builder's design view.</summary>
    </member>
    <member name="T:mx.core.UITextField">
      <summary>The UITextField class defines the component used by many Flex components to display text.</summary>
    </member>
    <member name="M:mx.core.UITextField.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.core.UITextField.getExplicitOrMeasuredHeight">
      <summary />
    </member>
    <member name="M:mx.core.UITextField.getExplicitOrMeasuredWidth">
      <summary />
    </member>
    <member name="M:mx.core.UITextField.getStyle(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="M:mx.core.UITextField.getTextStyles">
      <summary>Returns the TextFormat object that represents character formatting information for this UITextField object.</summary>
    </member>
    <member name="M:mx.core.UITextField.getUITextFormat">
      <summary>Returns a UITextFormat object that contains formatting information for this component.</summary>
    </member>
    <member name="M:mx.core.UITextField.initialize">
      <summary>Initializes this component.</summary>
    </member>
    <member name="M:mx.core.UITextField.invalidateDisplayList">
      <summary />
    </member>
    <member name="M:mx.core.UITextField.invalidateProperties">
      <summary />
    </member>
    <member name="M:mx.core.UITextField.invalidateSize">
      <summary />
    </member>
    <member name="M:mx.core.UITextField.move(System.Double,System.Double)">
      <summary />
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:mx.core.UITextField.owns(flash.display.DisplayObject)">
      <summary>Returns <code>true</code> if the child is parented or owned by this object.</summary>
      <param name="child">The child DisplayObject.</param>
    </member>
    <member name="M:mx.core.UITextField.parentChanged(flash.display.DisplayObjectContainer)">
      <summary>This function is called when a UITextField object is assigned a parent.</summary>
      <param name="p">The parent of this UITextField object.</param>
    </member>
    <member name="M:mx.core.UITextField.replayAutomatableEvent(flash.events.Event)">
      <summary>Replays the specified event.</summary>
      <param name="event">The event to replay.</param>
    </member>
    <member name="M:mx.core.UITextField.setActualSize(System.Double,System.Double)">
      <summary />
      <param name="w" />
      <param name="h" />
    </member>
    <member name="M:mx.core.UITextField.setColor(System.UInt32)">
      <summary>Sets the font color of the text.</summary>
      <param name="color">The new font color.</param>
    </member>
    <member name="M:mx.core.UITextField.setFocus">
      <summary />
    </member>
    <member name="M:mx.core.UITextField.setStyle(Avm.String,)">
      <summary>Does nothing.</summary>
      <param name="styleProp">Name of the style property.</param>
      <param name="value">New value for the style.</param>
    </member>
    <member name="M:mx.core.UITextField.setVisible(System.Boolean,System.Boolean)">
      <summary>Sets the <code>visible</code> property of this UITextField object.</summary>
      <param name="visible"><code>true</code> to make this UITextField visible, and <code>false</code> to make it invisible.</param>
      <param name="noEvent"><code>true</code> to suppress generating an event when you change visibility.</param>
    </member>
    <member name="M:mx.core.UITextField.styleChanged(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="M:mx.core.UITextField.truncateToFit(Avm.String)">
      <summary>Truncate text to make it fit horizontally in the area defined for the control, and append an ellipsis, three periods (...), to the text.</summary>
      <param name="truncationIndicator">The text to be appended after truncation. If you pass <code>null</code>, a localizable string such as <code>"..."</code> will be used.</param>
    </member>
    <member name="M:mx.core.UITextField.validateNow">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.automationDelegate">
      <summary>The delegate object which is handling the automation related functionality.</summary>
    </member>
    <member name="P:mx.core.UITextField.automationName">
      <summary>Name that can be used as an identifier for this object.</summary>
    </member>
    <member name="P:mx.core.UITextField.automationValue">
      <summary>This value generally corresponds to the rendered appearance of the object and should be usable for correlating the identifier with the object as it appears visually within the application.</summary>
    </member>
    <member name="P:mx.core.UITextField.baselinePosition">
      <summary>The y-coordinate of the baseline of the first line of text.</summary>
    </member>
    <member name="P:mx.core.UITextField.className">
      <summary>The name of this instance's class, such as <code>"DataGridItemRenderer"</code>.</summary>
    </member>
    <member name="P:mx.core.UITextField.document">
      <summary>A reference to the document object associated with this UITextField object.</summary>
    </member>
    <member name="P:mx.core.UITextField.enabled">
      <summary>A Boolean value that indicates whether the component is enabled.</summary>
    </member>
    <member name="P:mx.core.UITextField.explicitHeight">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.explicitMaxHeight">
      <summary>Number that specifies the maximum height of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UITextField.explicitMaxWidth">
      <summary>Number that specifies the maximum width of the component, in pixels, in the component's coordinates.</summary>
    </member>
    <member name="P:mx.core.UITextField.explicitMinHeight">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.explicitMinWidth">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.explicitWidth">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.focusPane">
      <summary>A single Sprite object that is shared among components and used as an overlay for drawing focus.</summary>
    </member>
    <member name="P:mx.core.UITextField.ignorePadding">
      <summary>If <code>true</code>, the <code>paddingLeft</code> and <code>paddingRight</code> styles will not add space around the text of the component.</summary>
    </member>
    <member name="P:mx.core.UITextField.imeMode">
      <summary>Specifies the IME (input method editor) mode.</summary>
    </member>
    <member name="P:mx.core.UITextField.includeInLayout">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.inheritingStyles">
      <summary>The beginning of this UITextField's chain of inheriting styles.</summary>
    </member>
    <member name="P:mx.core.UITextField.initialized">
      <summary>A flag that determines if an object has been through all three phases of layout validation (provided that any were required)</summary>
    </member>
    <member name="P:mx.core.UITextField.isPopUp">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.maxHeight">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.maxWidth">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.measuredHeight">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.measuredMinHeight">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.measuredMinWidth">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.measuredWidth">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.minHeight">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.minWidth">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.moduleFactory">
      <summary>The moduleFactory that is used to create TextFields in the correct SWF context.</summary>
    </member>
    <member name="P:mx.core.UITextField.nestLevel">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.nonInheritingStyles">
      <summary>The beginning of this UITextField's chain of non-inheriting styles.</summary>
    </member>
    <member name="P:mx.core.UITextField.nonZeroTextHeight">
      <summary>Unlike textHeight, this returns a non-zero value even when the text is empty.</summary>
    </member>
    <member name="P:mx.core.UITextField.owner">
      <summary>By default, set to the parent container of this object.</summary>
    </member>
    <member name="P:mx.core.UITextField.parent">
      <summary>The parent container or component for this component.</summary>
    </member>
    <member name="P:mx.core.UITextField.percentHeight">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.percentWidth">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.processedDescriptors">
      <summary>Set to <code>true</code> after the <code>createChildren()</code> method creates any internal component children.</summary>
    </member>
    <member name="P:mx.core.UITextField.styleName">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.systemManager">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.toolTip">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.tweeningProperties">
      <summary />
    </member>
    <member name="P:mx.core.UITextField.updateCompletePendingFlag">
      <summary>A flag that determines if an object has been through all three phases of layout validation (provided that any were required)</summary>
    </member>
    <member name="T:mx.core.UITextFormat">
      <summary>The UITextFormat class represents character formatting information for the UITextField class.</summary>
    </member>
    <member name="M:mx.core.UITextFormat.#ctor(mx.managers.ISystemManager,Avm.String,System.Object,System.Object,System.Object,System.Object,System.Object,Avm.String,Avm.String,Avm.String,System.Object,System.Object,System.Object,System.Object)">
      <summary>Constructor.</summary>
      <param name="systemManager">A SystemManager object. The SystemManager keeps track of which fonts are embedded. Typically this is the SystemManager obtained from the <code>systemManager</code> property of UIComponent.</param>
      <param name="font">A String specifying the name of a font, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="size">A Number specifying a font size in pixels, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="color">An unsigned integer specifying the RGB color of the text, such as 0xFF0000 for red, or <code>null</code> to indicate that is UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="bold">A Boolean flag specifying whether the text is bold, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="italic">A Boolean flag specifying whether the text is italic, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="underline">A Boolean flag specifying whether the text is underlined, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="url">A String specifying the URL to which the text is hyperlinked, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="target">A String specifying the target window where the hyperlinked URL is displayed. If the target window is <code>null</code> or an empty string, the hyperlinked page is displayed in the same browser window. If the <code>urlString</code> parameter is <code>null</code> or an empty string, this property has no effect. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="align">A String specifying the alignment of the paragraph, as a flash.text.TextFormatAlign value, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="leftMargin">A Number specifying the left margin of the paragraph, in pixels, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="rightMargin">A Number specifying the right margin of the paragraph, in pixels, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="indent">A Number specifying the indentation from the left margin to the first character in the paragraph, in pixels, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
      <param name="leading">A Number specifying the amount of additional vertical space between lines, or <code>null</code> to indicate that this UITextFormat doesn't specify this property. This parameter is optional, with a default value of <code>null</code>.</param>
    </member>
    <member name="M:mx.core.UITextFormat.measureHTMLText(Avm.String,System.Boolean)">
      <summary>Returns measurement information for the specified HTML text, which may contain HTML tags such as <code>&lt;font&gt;</code> and <code>&lt;b&gt;</code>, assuming that it is displayed in a single-line UITextField, and using this UITextFormat object to define the text format.</summary>
      <param name="htmlText">A String specifying the HTML text to measure.</param>
      <param name="roundUp">A Boolean flag specifying whether to round up the the measured width and height to the nearest integer. Rounding up is appropriate in most circumstances.</param>
    </member>
    <member name="M:mx.core.UITextFormat.measureText(Avm.String,System.Boolean)">
      <summary>Returns measurement information for the specified text, assuming that it is displayed in a single-line UITextField component, and using this UITextFormat object to define the text format.</summary>
      <param name="text">A String specifying the text to measure.</param>
      <param name="roundUp">A Boolean flag specifying whether to round up the the measured width and height to the nearest integer. Rounding up is appropriate in most circumstances.</param>
    </member>
    <member name="F:mx.core.UITextFormat.antiAliasType">
      <summary>Defines the anti-aliasing setting for the UITextField class.</summary>
    </member>
    <member name="F:mx.core.UITextFormat.gridFitType">
      <summary>Defines the grid-fitting setting for the UITextField class.</summary>
    </member>
    <member name="F:mx.core.UITextFormat.sharpness">
      <summary>Defines the sharpness setting for the UITextField class.</summary>
    </member>
    <member name="F:mx.core.UITextFormat.thickness">
      <summary>Defines the thickness setting for the UITextField class.</summary>
    </member>
    <member name="P:mx.core.UITextFormat.moduleFactory">
      <summary>The moduleFactory used to create TextFields for embedded fonts.</summary>
    </member>
    <member name="N:mx.effects" />
    <member name="T:mx.effects.AddChildAction">
      <summary>The AddChildAction class defines an action effect that corresponds to the <code>AddChild</code> property of a view state definition.</summary>
    </member>
    <member name="M:mx.effects.AddChildAction.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.AddChildAction.index">
      <summary>The index of the child within the parent.</summary>
    </member>
    <member name="F:mx.effects.AddChildAction.position">
      <summary>The position of the child in the display list, relative to the object specified by the <code>relativeTo</code> property.</summary>
    </member>
    <member name="F:mx.effects.AddChildAction.relativeTo">
      <summary>The location where the child component is added.</summary>
    </member>
    <member name="T:mx.effects.AddItemAction">
      <summary>The AddItemAction class defines an action effect that determines when the item renderer appears in the control for an item being added to a list-based control, such as List or TileList, or for an item that replaces an existing item in the control.</summary>
    </member>
    <member name="M:mx.effects.AddItemAction.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="T:mx.effects.AnimateProperty">
      <summary>The AnimateProperty effect animates a property or style of a component.</summary>
    </member>
    <member name="F:mx.effects.AnimateProperty.fromValue">
      <summary>The starting value of the property for the effect.</summary>
    </member>
    <member name="F:mx.effects.AnimateProperty.isStyle">
      <summary>If <code>true</code>, the property attribute is a style and you set it by using the <code>setStyle()</code> method.</summary>
    </member>
    <member name="F:mx.effects.AnimateProperty.property">
      <summary>The name of the property on the target to animate.</summary>
    </member>
    <member name="F:mx.effects.AnimateProperty.roundValue">
      <summary>If <code>true</code>, round off the interpolated tweened value to the nearest integer.</summary>
    </member>
    <member name="F:mx.effects.AnimateProperty.toValue">
      <summary>The ending value for the effect.</summary>
    </member>
    <member name="T:mx.effects.Blur">
      <summary>The Blur effect lets you apply a blur visual effect to a component.</summary>
    </member>
    <member name="M:mx.effects.Blur.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.Blur.blurXFrom">
      <summary>The starting amount of horizontal blur.</summary>
    </member>
    <member name="F:mx.effects.Blur.blurXTo">
      <summary>The ending amount of horizontal blur.</summary>
    </member>
    <member name="F:mx.effects.Blur.blurYFrom">
      <summary>The starting amount of vertical blur.</summary>
    </member>
    <member name="F:mx.effects.Blur.blurYTo">
      <summary>The ending amount of vertical blur.</summary>
    </member>
    <member name="T:mx.effects.CompositeEffect">
      <summary>The CompositeEffect class is the parent class for the Parallel and Sequence classes, which define the <code>&lt;mx:Parallel&gt;</code> and <code>&lt;mx:Sequence&gt;</code> MXML tags.</summary>
    </member>
    <member name="M:mx.effects.CompositeEffect.addChild(mx.effects.IEffect)">
      <summary>Adds a new child effect to this composite effect.</summary>
      <param name="childEffect">Child effect to be added to the composite effect.</param>
    </member>
    <member name="F:mx.effects.CompositeEffect.children">
      <summary>An Array containing the child effects of this CompositeEffect.</summary>
    </member>
    <member name="T:mx.effects.Dissolve">
      <summary>Animate the component from transparent to opaque, or from opaque to transparent.</summary>
    </member>
    <member name="M:mx.effects.Dissolve.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.Dissolve.alphaFrom">
      <summary>Initial transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="F:mx.effects.Dissolve.alphaTo">
      <summary>Final transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="F:mx.effects.Dissolve.color">
      <summary>Hex value that represents the color of the floating rectangle that the effect displays over the target object.</summary>
    </member>
    <member name="F:mx.effects.Dissolve.targetArea">
      <summary>The area of the target to play the effect upon.</summary>
    </member>
    <member name="N:mx.effects.easing" />
    <member name="T:mx.effects.easing.Back">
      <summary>The Back class defines three easing functions to implement motion with Flex effect classes.</summary>
    </member>
    <member name="M:mx.effects.easing.Back.easeInOut(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion by backtracking, then reversing direction and moving toward target, overshooting target slightly, reversing direction again, and then moving back toward the target.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
      <param name="s">Specifies the amount of overshoot, where the higher the value, the greater the overshoot.</param>
    </member>
    <member name="M:mx.effects.easing.Back.easeOut(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts the motion by moving towards the target, overshooting it slightly, and then reversing direction back toward the target.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
      <param name="s">Specifies the amount of overshoot, where the higher the value, the greater the overshoot.</param>
    </member>
    <member name="T:mx.effects.easing.Bounce">
      <summary>The Bounce class defines three easing functions to implement bounce motion with Flex effect classes.</summary>
    </member>
    <member name="M:mx.effects.easing.Bounce.easeIn(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeIn()</code> method starts the bounce motion slowly, and then accelerates motion as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Bounce.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the bounce motion slowly, accelerate motion, then decelerate.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.easing.Circular">
      <summary>The Circular class defines three easing functions to implement circular motion with Flex effect classes.</summary>
    </member>
    <member name="M:mx.effects.easing.Circular.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion slowly, accelerate motion, then decelerate.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Circular.easeOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.easing.Cubic">
      <summary>The Cubic class defines three easing functions to implement motion with Flex effect classes.</summary>
    </member>
    <member name="M:mx.effects.easing.Cubic.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion from zero velocity, accelerates motion, then decelerates back to a zero velocity.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Cubic.easeOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion to a zero velocity as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.easing.Elastic">
      <summary>The Elastc class defines three easing functions to implement motion with Flex effect classes, where the motion is defined by an exponentially decaying sine wave.</summary>
    </member>
    <member name="M:mx.effects.easing.Elastic.easeInOut(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion slowly, accelerate motion, then decelerate.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
      <param name="a">Specifies the amplitude of the sine wave.</param>
      <param name="p">Specifies the period of the sine wave.</param>
    </member>
    <member name="M:mx.effects.easing.Elastic.easeOut(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
      <param name="a">Specifies the amplitude of the sine wave.</param>
      <param name="p">Specifies the period of the sine wave.</param>
    </member>
    <member name="T:mx.effects.easing.Exponential">
      <summary>The Exponential class defines three easing functions to implement motion with Flex effect classes, where the motion is defined by an exponentially decaying sine wave.</summary>
    </member>
    <member name="M:mx.effects.easing.Exponential.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion slowly, accelerate motion, then decelerate.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Exponential.easeOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.easing.Linear">
      <summary>The Linear class defines easing functions to implement linear motion with Flex effect classes.</summary>
    </member>
    <member name="M:mx.effects.easing.Linear.easeIn(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeIn()</code> method starts motion from zero velocity, and then accelerates motion as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Linear.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion from zero velocity, accelerate motion, then decelerate back to zero velocity.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Linear.easeOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion to a zero velocity as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.easing.Quadratic">
      <summary>The Quadratic class defines three easing functions to implement quadratic motion with Flex effect classes.</summary>
    </member>
    <member name="M:mx.effects.easing.Quadratic.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion from a zero velocity, accelerate motion, then decelerate to a zero velocity.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Quadratic.easeOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion to a zero velocity as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.easing.Quartic">
      <summary>The Quartic class defines three easing functions to implement motion with Flex effect classes.</summary>
    </member>
    <member name="M:mx.effects.easing.Quartic.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion from a zero velocity, accelerate motion, then decelerate to a zero velocity.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Quartic.easeOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion to a zero velocity.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.easing.Quintic">
      <summary>The Quintic class defines three easing functions to implement motion with Flex effect classes.</summary>
    </member>
    <member name="M:mx.effects.easing.Quintic.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion from a zero velocity, accelerate motion, then decelerate to a zero velocity.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Quintic.easeOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion to a zero velocity as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.easing.Sine">
      <summary>The Sine class defines three easing functions to implement motion with Flex effect classes, where the motion is defined by a sine wave.</summary>
    </member>
    <member name="M:mx.effects.easing.Sine.easeInOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeInOut()</code> method combines the motion of the <code>easeIn()</code> and <code>easeOut()</code> methods to start the motion from a zero velocity, accelerate motion, then decelerate to a zero velocity.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="M:mx.effects.easing.Sine.easeOut(System.Double,System.Double,System.Double,System.Double)">
      <summary>The <code>easeOut()</code> method starts motion fast, and then decelerates motion to a zero velocity as it executes.</summary>
      <param name="t">Specifies time.</param>
      <param name="b">Specifies the initial position of a component.</param>
      <param name="c">Specifies the total change in position of the component.</param>
      <param name="d">Specifies the duration of the effect, in milliseconds.</param>
    </member>
    <member name="T:mx.effects.Effect">
      <summary>The Effect class is an abstract base class that defines the basic functionality of all Flex effects.</summary>
    </member>
    <member name="E:mx.effects.Effect.effectStart">
      <summary>Dispatched when the effect starts playing.</summary>
    </member>
    <member name="E:mx.effects.Effect.effectEnd">
      <summary>Dispatched when the effect finishes playing, either when the effect finishes playing or when the effect has been interrupted by a call to the <code>end()</code> method.</summary>
    </member>
    <member name="M:mx.effects.Effect.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="M:mx.effects.Effect.applyValueToTarget(System.Object,Avm.String,System.Object,)">
      <summary>Used internally by the Effect infrastructure.</summary>
      <param name="target">The effect target.</param>
      <param name="property">The target property.</param>
      <param name="value">The value of the property.</param>
      <param name="props">Array of Objects, where each Array element contains a <code>start</code> and <code>end</code> Object for the properties that the effect is monitoring.</param>
    </member>
    <member name="M:mx.effects.Effect.captureEndValues">
      <summary />
    </member>
    <member name="M:mx.effects.Effect.captureMoreStartValues(Avm.Array)">
      <summary />
      <param name="targets" />
    </member>
    <member name="M:mx.effects.Effect.captureStartValues">
      <summary />
    </member>
    <member name="M:mx.effects.Effect.createInstance(System.Object)">
      <summary />
      <param name="target" />
    </member>
    <member name="M:mx.effects.Effect.createInstances(Avm.Array)">
      <summary />
      <param name="targets" />
    </member>
    <member name="M:mx.effects.Effect.deleteInstance(mx.effects.IEffectInstance)">
      <summary />
      <param name="instance" />
    </member>
    <member name="M:mx.effects.Effect.effectEndHandler(mx.events.EffectEvent)">
      <summary>Called when an effect instance has finished playing.</summary>
      <param name="event">An event object of type EffectEvent.</param>
    </member>
    <member name="M:mx.effects.Effect.effectStartHandler(mx.events.EffectEvent)">
      <summary>This method is called when the effect instance starts playing.</summary>
      <param name="event">An event object of type EffectEvent.</param>
    </member>
    <member name="M:mx.effects.Effect.end(mx.effects.IEffectInstance)">
      <summary />
      <param name="effectInstance" />
    </member>
    <member name="M:mx.effects.Effect.filterInstance(Avm.Array,System.Object)">
      <summary>Determines the logic for filtering out an effect instance.</summary>
      <param name="propChanges">The properties modified by the effect.</param>
      <param name="target">The effect target.</param>
    </member>
    <member name="M:mx.effects.Effect.getAffectedProperties">
      <summary />
    </member>
    <member name="M:mx.effects.Effect.getValueFromTarget(System.Object,Avm.String)">
      <summary>Called by the <code>captureStartValues()</code> method to get the value of a property from the target.</summary>
      <param name="target">The effect target.</param>
      <param name="property">The target property.</param>
    </member>
    <member name="M:mx.effects.Effect.initInstance(mx.effects.IEffectInstance)">
      <summary>Copies properties of the effect to the effect instance.</summary>
      <param name="instance">The effect instance to initialize.</param>
    </member>
    <member name="M:mx.effects.Effect.pause">
      <summary />
    </member>
    <member name="M:mx.effects.Effect.play(Avm.Array,System.Boolean)">
      <summary />
      <param name="targets" />
      <param name="playReversedFromEnd" />
    </member>
    <member name="M:mx.effects.Effect.resume">
      <summary />
    </member>
    <member name="M:mx.effects.Effect.reverse">
      <summary />
    </member>
    <member name="M:mx.effects.Effect.stop">
      <summary />
    </member>
    <member name="F:mx.effects.Effect.endValuesCaptured">
      <summary>A flag containing <code>true</code> if the end values of an effect have already been determined, or <code>false</code> if they should be acquired from the current properties of the effect targets when the effect runs.</summary>
    </member>
    <member name="F:mx.effects.Effect.instanceClass">
      <summary>An object of type Class that specifies the effect instance class class for this effect class.</summary>
    </member>
    <member name="F:mx.effects.Effect.repeatCount">
      <summary>Number of times to repeat the effect.</summary>
    </member>
    <member name="F:mx.effects.Effect.repeatDelay">
      <summary>Amount of time, in milliseconds, to wait before repeating the effect.</summary>
    </member>
    <member name="F:mx.effects.Effect.startDelay">
      <summary>Amount of time, in milliseconds, to wait before starting the effect.</summary>
    </member>
    <member name="F:mx.effects.Effect.suspendBackgroundProcessing">
      <summary>If <code>true</code>, blocks all background processing while the effect is playing.</summary>
    </member>
    <member name="P:mx.effects.Effect.className">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.customFilter">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.duration">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.effectTargetHost">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.filter">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.hideFocusRing">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.isPlaying">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.perElementOffset">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.relevantProperties">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.relevantStyles">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.target">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.targets">
      <summary />
    </member>
    <member name="P:mx.effects.Effect.triggerEvent">
      <summary />
    </member>
    <member name="N:mx.effects.effectClasses" />
    <member name="T:mx.effects.effectClasses.ActionEffectInstance">
      <summary>The ActionEffectInstance class is the superclass for all action effect instance classes.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.ActionEffectInstance.getStartValue">
      <summary>Used internally to retrieve the values saved by the <code>saveStartValue()</code> method.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.ActionEffectInstance.saveStartValue">
      <summary>Subclasses implement this method to save the starting state before the effect plays.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ActionEffectInstance.playedAction">
      <summary>Indicates whether the effect has been played (<code>true</code>), or not (<code>false</code>).</summary>
    </member>
    <member name="T:mx.effects.effectClasses.AddChildActionInstance">
      <summary>The AddChildActionInstance class implements the instance class for the AddChildAction effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AddChildActionInstance.index">
      <summary>The index of the child within the parent.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AddChildActionInstance.position">
      <summary>The position of the child component, relative to relativeTo, where it is added.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AddChildActionInstance.relativeTo">
      <summary>The location where the child component is added.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.AddItemActionInstance">
      <summary>The AddItemActionInstance class implements the instance class for the AddItemAction effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.AddRemoveEffectTargetFilter">
      <summary>AddRemoveEffectTargetFilter is a subclass of EffectTargetFilter that handles the logic for filtering targets that have been added or removed as children to a container.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AddRemoveEffectTargetFilter.add">
      <summary>Determines if this is an add or remove filter.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.AnimatePropertyInstance">
      <summary>The AnimatePropertyInstance class implements the instance class for the AnimateProperty effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AnimatePropertyInstance.fromValue">
      <summary>The starting value of the property for the effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AnimatePropertyInstance.isStyle">
      <summary>If <code>true</code>, the property attribute is a style and you set it by using the <code>setStyle()</code> method.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AnimatePropertyInstance.property">
      <summary>The name of the property on the target to animate.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AnimatePropertyInstance.roundValue">
      <summary>If <code>true</code>, round off the interpolated tweened value to the nearest integer.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.AnimatePropertyInstance.toValue">
      <summary>The ending value for the effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.BlurInstance">
      <summary>The BlurInstance class implements the instance class for the Blur effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.BlurInstance.blurXFrom">
      <summary>The starting amount of horizontal blur.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.BlurInstance.blurXTo">
      <summary>The ending amount of horizontal blur.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.BlurInstance.blurYFrom">
      <summary>The starting amount of vertical blur.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.BlurInstance.blurYTo">
      <summary>The ending amount of vertical blur.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.CompositeEffectInstance">
      <summary>The CompositeEffectInstance class implements the instance class for the CompositeEffect class.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.CompositeEffectInstance.addChildSet(Avm.Array)">
      <summary>Adds a new set of child effects to this Composite effect.</summary>
      <param name="childSet">Array of child effects to be added to the CompositeEffect.</param>
    </member>
    <member name="M:mx.effects.effectClasses.CompositeEffectInstance.onEffectEnd(mx.effects.IEffectInstance)">
      <summary>Called each time one of the child effects has finished playing.</summary>
      <param name="childEffect">child effect.</param>
    </member>
    <member name="M:mx.effects.effectClasses.CompositeEffectInstance.onTweenEnd(System.Object)">
      <summary>Used internally to keep track of the value of the <code>playheadTime</code> property.</summary>
      <param name="value" />
    </member>
    <member name="M:mx.effects.effectClasses.CompositeEffectInstance.onTweenUpdate(System.Object)">
      <summary>Used internally to keep track of the value of the <code>playheadTime</code> property.</summary>
      <param name="value" />
    </member>
    <member name="T:mx.effects.effectClasses.DissolveInstance">
      <summary>The DissolveInstance class implements the instance class for the Dissolve effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.DissolveInstance.alphaFrom">
      <summary>Initial transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.DissolveInstance.alphaTo">
      <summary>Final transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.DissolveInstance.color">
      <summary>Hex value that represents the color of the floating rectangle that the effect displays over the target object.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.DissolveInstance.targetArea">
      <summary>The area of the target to play the effect upon.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.FadeInstance">
      <summary>The FadeInstance class implements the instance class for the Fade effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.FadeInstance.alphaFrom">
      <summary>Initial transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.FadeInstance.alphaTo">
      <summary>Final transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.GlowInstance">
      <summary>The GlowInstance class implements the instance class for the Glow effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.alphaFrom">
      <summary>Starting transparency level.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.alphaTo">
      <summary>Ending transparency level.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.blurXFrom">
      <summary>The starting amount of horizontal blur.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.blurXTo">
      <summary>The ending amount of horizontal blur.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.blurYFrom">
      <summary>The starting amount of vertical blur.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.blurYTo">
      <summary>The ending amount of vertical blur.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.color">
      <summary>The color of the glow.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.inner">
      <summary>The inner flag of the glow.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.knockout">
      <summary>The knockout flag of the glow.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.GlowInstance.strength">
      <summary>The strength of the glow.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.HideShowEffectTargetFilter">
      <summary>HideShowEffectTargetFilter is a subclass of EffectTargetFilter that handles the logic for filtering targets that have been shown or hidden by modifying their <code>visible</code> property.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.HideShowEffectTargetFilter.show">
      <summary>Determines if this is a show or hide filter.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.IrisInstance">
      <summary>The IrisInstance class implements the instance class for the Iris effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.MaskEffectInstance">
      <summary>The MaskEffectInstance class is an abstract base class that implements the instance class for the MaskEffect class.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.defaultCreateMask(System.Object,flash.geom.Rectangle)">
      <summary>Creates the default mask for the effect.</summary>
      <param name="targ">The effect target.</param>
      <param name="bounds">The actual visual bounds of the target which includes drop shadows</param>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.initMaskEffect">
      <summary>Initializes the <code>move</code> and <code>scale</code> properties of the effect.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.onMoveTweenEnd(System.Object)">
      <summary>Callback method that is called when the x and y position of the mask should be updated by the effect for the last time.</summary>
      <param name="value">Contains the final x and y value for the mask position, where <code>value[0]</code> contains the x position of the mask, and <code>value[1]</code> contains the y position.</param>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.onMoveTweenUpdate(System.Object)">
      <summary>Callback method that is called when the x and y position of the mask should be updated by the effect.</summary>
      <param name="value">Contains an interpolated x and y value for the mask position, where <code>value[0]</code> contains the new x position of the mask, and <code>value[1]</code> contains the new y position.</param>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.onScaleTweenEnd(System.Object)">
      <summary>Callback method that is called when the <code>scaleX</code> and <code>scaleY</code> properties of the mask should be updated by the effect for the last time.</summary>
      <param name="value">Contains the final <code>scaleX</code> and <code>scaleY</code> value for the mask, where <code>value[0]</code> contains the <code>scaleX</code> value of the mask, and <code>value[1]</code> contains the <code>scaleY</code> value.</param>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.onScaleTweenUpdate(System.Object)">
      <summary>Callback method that is called when the <code>scaleX</code> and <code>scaleY</code> properties of the mask should be updated by the effect.</summary>
      <param name="value">Contains an interpolated <code>scaleX</code> and <code>scaleY</code> value for the mask, where <code>value[0]</code> contains the new <code>scaleX</code> value of the mask, and <code>value[1]</code> contains the new <code>scaleY</code> value.</param>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.pause">
      <summary>Pauses the effect until you call the <code>resume()</code> method.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.resume">
      <summary>Resumes the effect after it has been paused by a call to the <code>pause()</code> method.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.MaskEffectInstance.reverse">
      <summary>Plays the effect in reverse, starting from the current position of the effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.effectMask">
      <summary>Contains the effect mask, either the default mask created by the <code>defaultCreateMask()</code> method, or the one specified by the function passed to the <code>createMaskFunction</code> property.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.moveEasingFunction">
      <summary>Easing function to use for moving the mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.scaleEasingFunction">
      <summary>Easing function to use for scaling the mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.scaleXFrom">
      <summary>Initial scaleX for mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.scaleXTo">
      <summary>Ending scaleX for mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.scaleYFrom">
      <summary>Initial scaleY for mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.scaleYTo">
      <summary>Ending scaleY for mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.targetArea">
      <summary>The area where the mask is applied on the target.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.targetVisualBounds">
      <summary>The actual size of the effect target, including any drop shadows.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.xFrom">
      <summary>Initial position's x coordinate for mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.xTo">
      <summary>Destination position's x coordinate for mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.yFrom">
      <summary>Initial position's y coordinate for mask.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MaskEffectInstance.yTo">
      <summary>Destination position's y coordinate for mask.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.MaskEffectInstance.createMaskFunction">
      <summary>Function called when the effect creates the mask.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.MaskEffectInstance.showTarget">
      <summary>Specifies that the target component is becoming visible, <code>false</code>, or invisible, <code>true</code>.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.MoveInstance">
      <summary>The MoveInstance class implements the instance class for the Move effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MoveInstance.xBy">
      <summary>Number of pixels to move the components along the x axis.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MoveInstance.xFrom">
      <summary>Initial position's x coordinate.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MoveInstance.xTo">
      <summary>Destination position's x coordinate.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MoveInstance.yBy">
      <summary>Number of pixels to move the components along the y axis.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MoveInstance.yFrom">
      <summary>Initial position's y coordinate.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.MoveInstance.yTo">
      <summary>Destination position's y coordinate.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.ParallelInstance">
      <summary>The ParallelInstance class implements the instance class for the Parallel effect.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.ParallelInstance.end">
      <summary>Interrupts any effects that are currently playing, skips over any effects that haven't started playing, and jumps immediately to the end of the composite effect.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.ParallelInstance.onEffectEnd(mx.effects.IEffectInstance)">
      <summary>Each time a child effect of SequenceInstance or ParallelInstance finishes, Flex calls the <code>onEffectEnd()</code> method.</summary>
      <param name="childEffect" />
    </member>
    <member name="T:mx.effects.effectClasses.PauseInstance">
      <summary>The PauseInstance class implements the instance class for the Pause effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.PropertyChanges">
      <summary>The PropertyChanges class defines the start and end values for a set of properties of a target component of a transition.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.PropertyChanges.end">
      <summary>An Object containing the ending properties of the <code>target</code> component modified by the change in view state.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.PropertyChanges.start">
      <summary>An Object containing the starting properties of the <code>target</code> component modified by the change in view state.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.PropertyChanges.target">
      <summary>A target component of a transition.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.RemoveChildActionInstance">
      <summary>The RemoveChildActionInstance class implements the instance class for the RemoveChildAction effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.RemoveItemActionInstance">
      <summary>The RemoveItemActionInstance class implements the instance class for the RemoveChildAction effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.ResizeInstance">
      <summary>The ResizeInstance class implements the instance class for the Resize effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ResizeInstance.heightFrom">
      <summary>Initial height.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ResizeInstance.hideChildrenTargets">
      <summary>An Array of Panels.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ResizeInstance.widthFrom">
      <summary>Initial width.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.ResizeInstance.heightBy">
      <summary>Number of pixels by which to modify the height of the component.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.ResizeInstance.heightTo">
      <summary>Final height, in pixels.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.ResizeInstance.widthBy">
      <summary>Number of pixels by which to modify the width of the component.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.ResizeInstance.widthTo">
      <summary>Final width, in pixels.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.RotateInstance">
      <summary>The RotateInstance class implements the instance class for the Rotate effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.RotateInstance.angleFrom">
      <summary>The starting angle of rotation of the target object, expressed in degrees.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.RotateInstance.angleTo">
      <summary>The ending angle of rotation of the target object, expressed in degrees.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.RotateInstance.originX">
      <summary>The x-position of the center point of rotation.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.RotateInstance.originY">
      <summary>The y-position of the center point of rotation.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.SequenceInstance">
      <summary>The SequenceInstance class implements the instance class for the Sequence effect.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.SequenceInstance.end">
      <summary>Interrupts any effects that are currently playing, skips over any effects that haven't started playing, and jumps immediately to the end of the composite effect.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.SequenceInstance.onEffectEnd(mx.effects.IEffectInstance)">
      <summary>Each time a child effect of SequenceInstance finishes, Flex calls the <code>onEffectEnd()</code> method.</summary>
      <param name="childEffect">The child effect.</param>
    </member>
    <member name="T:mx.effects.effectClasses.SetPropertyActionInstance">
      <summary>The SetPropertyActionInstance class implements the instance class for the SetPropertyAction effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SetPropertyActionInstance.name">
      <summary>The name of the property being changed.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.SetPropertyActionInstance.value">
      <summary>The new value for the property.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.SetStyleActionInstance">
      <summary>The SetStyleActionInstance class implements the instance class for the SetStyleAction effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SetStyleActionInstance.name">
      <summary>The name of the style property being changed.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.SetStyleActionInstance.value">
      <summary>The new value for the property.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.SoundEffectInstance">
      <summary>The SoundEffectInstance class implements the instance class for the SoundEffect effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.bufferTime">
      <summary>The SoundEffect class uses an internal Sound object to control the MP3 file.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.loops">
      <summary>The number of times to play the sound in a loop, where a value of 0 means play the effect once, a value of 1 means play the effect twice, and so on.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.panEasingFunction">
      <summary>The easing function for the pan effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.panFrom">
      <summary>Initial pan of the Sound object.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.panTo">
      <summary>Final pan of the Sound object.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.sound">
      <summary>Reference to the internal Sound object.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.startTime">
      <summary>The initial position in the MP3 file, in milliseconds, at which playback should start.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.useDuration">
      <summary>If <code>true</code>, stop the effect after the time specified by the <code>duration</code> property has elapsed.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.volumeEasingFunction">
      <summary>The easing function for the volume effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.volumeFrom">
      <summary>Initial volume of the Sound object.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.SoundEffectInstance.volumeTo">
      <summary>Final volume of the Sound object.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.SoundEffectInstance.isLoading">
      <summary>This property is <code>true</code> if the MP3 has been loaded.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.SoundEffectInstance.soundChannel">
      <summary>The SoundChannel object that the MP3 file has been loaded into.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.SoundEffectInstance.source">
      <summary>The URL or class of the MP3 file to play.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.TweenEffectInstance">
      <summary>The TweenEffectInstance class implements the instance class for the TweenEffect.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.TweenEffectInstance.createTween(System.Object,System.Object,System.Object,System.Double,System.Double)">
      <summary>Creates a Tween instance, assigns it the start, end, and duration values.</summary>
      <param name="listener">Object that is notified at each interval of the animation. You typically pass the <code>this</code> keyword as the value. The <code>listener</code> must define the <code>onTweenUpdate()</code> method and optionally the <code>onTweenEnd()</code> method. The <code>onTweenUpdate()</code> method is invoked for each interval of the animation, and the <code>onTweenEnd()</code> method is invoked just after the animation finishes.</param>
      <param name="startValue">Initial value(s) of the animation. Either a number or an Array of numbers. If a number is passed, the Tween interpolates between this number and the number passed in the <code>endValue</code> parameter. If an Array of numbers is passed, each number in the Array is interpolated.</param>
      <param name="endValue">Final value(s) of the animation. The type of this argument must match the <code>startValue</code> parameter.</param>
      <param name="duration">Duration of the animation, in milliseconds.</param>
      <param name="minFps">Minimum number of times that the <code>onTweenUpdate()</code> method should be called every second. The tween code tries to call the <code>onTweenUpdate()</code> method as frequently as possible (up to 100 times per second). However, if the frequency falls below <code>minFps</code>, the duration of the animation automatically increases. As a result, an animation that temporarily freezes (because it is not getting any CPU cycles) begins again where it left off, instead of suddenly jumping ahead.</param>
    </member>
    <member name="M:mx.effects.effectClasses.TweenEffectInstance.end">
      <summary>Interrupts an effect that is currently playing, and immediately jumps to the end of the effect.</summary>
    </member>
    <member name="M:mx.effects.effectClasses.TweenEffectInstance.onTweenEnd(System.Object)">
      <summary>Callback method that is called when the target should be updated by the effect for the last time.</summary>
      <param name="value">The value of the <code>value</code> argument is an interpolated value determined by the <code>Tween.startValue</code> property, <code>Tween.endValue</code> property, and interpolation function specified by the implementation of the effect in its <code>play()</code> method. The <code>play()</code> method  uses these values to create a Tween object that plays the effect over a time period. The <code>value</code> argument can be either a Number or an Array of Numbers.</param>
    </member>
    <member name="M:mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate(System.Object)">
      <summary>Callback method that is called when the target should be updated by the effect.</summary>
      <param name="value">The value of the <code>value</code> argument is an interpolated value determined by the <code>Tween.startValue</code> property, <code>Tween.endValue</code> property, and interpolation function specified by the implementation of the effect in its <code>play()</code> method. The <code>play()</code> method uses these values to create a Tween object that plays the effect over a time period. The <code>value</code> argument can be either a Number or an Array of Numbers.</param>
    </member>
    <member name="M:mx.effects.effectClasses.TweenEffectInstance.seek(System.Double)">
      <summary>Advances the effect to the specified position.</summary>
      <param name="playheadTime">The position, in milliseconds, between 0 and the value of the <code>duration</code> property.</param>
    </member>
    <member name="F:mx.effects.effectClasses.TweenEffectInstance.easingFunction">
      <summary>The easing function for the animation.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.TweenEffectInstance.tween">
      <summary>The Tween object, which determines the animation.</summary>
    </member>
    <member name="P:mx.effects.effectClasses.TweenEffectInstance.playheadTime">
      <summary>The current position of the effect, in milliseconds.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.UnconstrainItemActionInstance">
      <summary>The UnconstrainItemActionInstance class implements the instance class for the UnconstrainItemAction effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.UnconstrainItemActionInstance.effectHost" />
    <member name="T:mx.effects.effectClasses.WipeDownInstance">
      <summary>The WipeDownInstance class implements the instance class for the WipeDown effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.WipeLeftInstance">
      <summary>The WipeLeftInstance class implements the instance class for the WipeLeft effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.WipeRightInstance">
      <summary>The WipeRightInstance class implements the instance class for the WipeRight effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.WipeUpInstance">
      <summary>The WipeUpInstance class implements the instance class for the WipeUp effect.</summary>
    </member>
    <member name="T:mx.effects.effectClasses.ZoomInstance">
      <summary>The ZoomInstance class implements the instance class for the Zoom effect.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ZoomInstance.captureRollEvents">
      <summary>Prevents the <code>rollOut</code> and <code>rollOver</code> events from being dispatched if the mouse has not moved.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ZoomInstance.originX">
      <summary>Number that represents the x-position of the zoom origin, or registration point.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ZoomInstance.originY">
      <summary>Number that represents the y-position of the zoom origin, or registration point.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ZoomInstance.zoomHeightFrom">
      <summary>Number that represents the scale at which to start the height zoom, as a percent between 0.01 and 1.0.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ZoomInstance.zoomHeightTo">
      <summary>Number that represents the scale at which to complete the height zoom, as a percent between 0.01 and 1.0.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ZoomInstance.zoomWidthFrom">
      <summary>Number that represents the scale at which to start the width zoom, as a percent between 0.01 and 1.0.</summary>
    </member>
    <member name="F:mx.effects.effectClasses.ZoomInstance.zoomWidthTo">
      <summary>Number that represents the scale at which to complete the width zoom, as a percent between 0.01 and 1.0.</summary>
    </member>
    <member name="T:mx.effects.EffectInstance">
      <summary>The EffectInstance class represents an instance of an effect playing on a target.</summary>
    </member>
    <member name="M:mx.effects.EffectInstance.end">
      <summary />
    </member>
    <member name="M:mx.effects.EffectInstance.finishEffect">
      <summary />
    </member>
    <member name="M:mx.effects.EffectInstance.finishRepeat">
      <summary />
    </member>
    <member name="M:mx.effects.EffectInstance.initEffect(flash.events.Event)">
      <summary />
      <param name="event" />
    </member>
    <member name="M:mx.effects.EffectInstance.pause">
      <summary />
    </member>
    <member name="M:mx.effects.EffectInstance.play">
      <summary />
    </member>
    <member name="M:mx.effects.EffectInstance.resume">
      <summary />
    </member>
    <member name="M:mx.effects.EffectInstance.reverse">
      <summary />
    </member>
    <member name="M:mx.effects.EffectInstance.startEffect">
      <summary />
    </member>
    <member name="M:mx.effects.EffectInstance.stop">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.className">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.duration">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.effect">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.effectTargetHost">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.hideFocusRing">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.playheadTime">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.propertyChanges">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.repeatCount">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.repeatDelay">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.startDelay">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.suspendBackgroundProcessing">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.target">
      <summary />
    </member>
    <member name="P:mx.effects.EffectInstance.triggerEvent">
      <summary />
    </member>
    <member name="T:mx.effects.EffectManager">
      <summary>The EffectManager class listens for events, such as the <code>show</code> and <code>move</code> events, dispatched by objects in a Flex application.</summary>
    </member>
    <member name="M:mx.effects.EffectManager.endEffectsForTarget(mx.core.IUIComponent)">
      <summary>Immediately ends any effects currently playing on a target.</summary>
      <param name="target">The target component on which to end all effects.</param>
    </member>
    <member name="M:mx.effects.EffectManager.resumeEventHandling">
      <summary>Allows the EffectManager class to resume processing events after a call to the <code>suspendEventHandling()</code> method.</summary>
    </member>
    <member name="M:mx.effects.EffectManager.suspendEventHandling">
      <summary>After this method is called, the EffectManager class ignores all events, and no effects are triggered, until a call to <code>resumeEventHandling()</code>.</summary>
    </member>
    <member name="T:mx.effects.EffectTargetFilter">
      <summary>The EffectTargetFilter class defines a custom filter that is executed by each transition effect on each target of the effect.</summary>
    </member>
    <member name="M:mx.effects.EffectTargetFilter.defaultFilterFunction(Avm.Array,System.Object)">
      <summary>The default filter function for the EffectTargetFilter class.</summary>
      <param name="propChanges">An Array of PropertyChanges objects. The <code>target</code> property of each PropertyChanges object is equal to the effect's target. If no properties changed for an effect target, it is not included in this Array.</param>
      <param name="instanceTarget">The target of the EffectInstance that calls this function. If an effect has multiple targets, this function is called once per target.</param>
    </member>
    <member name="M:mx.effects.EffectTargetFilter.filterInstance(Avm.Array,mx.effects.IEffectTargetHost,System.Object)">
      <summary>Determines whether a target should be filtered, returning true if it should be included in an effect.</summary>
      <param name="propChanges" />
      <param name="semanticsProvider" />
      <param name="target" />
    </member>
    <member name="F:mx.effects.EffectTargetFilter.filterFunction">
      <summary>A function that defines custom filter logic.</summary>
    </member>
    <member name="F:mx.effects.EffectTargetFilter.filterProperties">
      <summary>An Array of Strings specifying component properties.</summary>
    </member>
    <member name="F:mx.effects.EffectTargetFilter.filterStyles">
      <summary>An Array of Strings specifying style properties.</summary>
    </member>
    <member name="F:mx.effects.EffectTargetFilter.requiredSemantics">
      <summary>A collection of properties and associated values which must be associated with a target for the effect to be played.</summary>
    </member>
    <member name="T:mx.effects.Fade">
      <summary>The Fade effect animates the <code>alpha</code> property of a component, either from transparent to opaque, or from opaque to transparent.</summary>
    </member>
    <member name="M:mx.effects.Fade.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.Fade.alphaFrom">
      <summary>Initial transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="F:mx.effects.Fade.alphaTo">
      <summary>Final transparency level, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="T:mx.effects.Glow">
      <summary>The Glow effect lets you apply a visual glow effect to a component.</summary>
    </member>
    <member name="M:mx.effects.Glow.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.Glow.alphaFrom">
      <summary>Starting transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="F:mx.effects.Glow.alphaTo">
      <summary>Ending transparency level between 0.0 and 1.0, where 0.0 means transparent and 1.0 means fully opaque.</summary>
    </member>
    <member name="F:mx.effects.Glow.blurXFrom">
      <summary>The starting amount of horizontal blur.</summary>
    </member>
    <member name="F:mx.effects.Glow.blurXTo">
      <summary>The ending amount of horizontal blur.</summary>
    </member>
    <member name="F:mx.effects.Glow.blurYFrom">
      <summary>The starting amount of vertical blur.</summary>
    </member>
    <member name="F:mx.effects.Glow.blurYTo">
      <summary>The ending amount of vertical blur.</summary>
    </member>
    <member name="F:mx.effects.Glow.color">
      <summary>The color of the glow.</summary>
    </member>
    <member name="F:mx.effects.Glow.inner">
      <summary>Specifies whether the glow is an inner glow.</summary>
    </member>
    <member name="F:mx.effects.Glow.knockout">
      <summary>Specifies whether the object has a knockout effect.</summary>
    </member>
    <member name="F:mx.effects.Glow.strength">
      <summary>The strength of the imprint or spread.</summary>
    </member>
    <member name="T:mx.effects.IAbstractEffect">
      <summary>The IAbstractEffect interface is used to denote that a property or parameter must be of type Effect, but does not actually implement any of the APIs of the IEffect interface.</summary>
    </member>
    <member name="T:mx.effects.IEffect">
      <summary>The IEffect interface defines the base interface of all Flex effects.</summary>
    </member>
    <member name="M:mx.effects.IEffect.captureEndValues">
      <summary>Captures the current values of the relevant properties on the effect's targets and saves them as end values.</summary>
    </member>
    <member name="M:mx.effects.IEffect.captureMoreStartValues(Avm.Array)">
      <summary>Captures the current values of the relevant properties of an additional set of targets <p>This function is used by Flex when a data change effect is run.</p></summary>
      <param name="targets">Array of targets for which values will be captured</param>
    </member>
    <member name="M:mx.effects.IEffect.captureStartValues">
      <summary>Captures the current values of the relevant properties on the effect's targets.</summary>
    </member>
    <member name="M:mx.effects.IEffect.createInstance(System.Object)">
      <summary>Creates a single effect instance and initializes it.</summary>
      <param name="target">Object to animate with this effect.</param>
    </member>
    <member name="M:mx.effects.IEffect.createInstances(Avm.Array)">
      <summary>Takes an Array of target objects and invokes the <code>createInstance()</code> method on each target.</summary>
      <param name="targets">Array of objects to animate with this effect.</param>
    </member>
    <member name="M:mx.effects.IEffect.deleteInstance(mx.effects.IEffectInstance)">
      <summary>Removes event listeners from an instance and removes it from the list of instances.</summary>
      <param name="instance" />
    </member>
    <member name="M:mx.effects.IEffect.end(mx.effects.IEffectInstance)">
      <summary>Interrupts an effect that is currently playing, and jumps immediately to the end of the effect.</summary>
      <param name="effectInstance">EffectInstance to terminate.</param>
    </member>
    <member name="M:mx.effects.IEffect.getAffectedProperties">
      <summary>Returns an Array of Strings, where each String is the name of a property that is changed by this effect.</summary>
    </member>
    <member name="M:mx.effects.IEffect.pause">
      <summary>Pauses the effect until you call the <code>resume()</code> method.</summary>
    </member>
    <member name="M:mx.effects.IEffect.play(Avm.Array,System.Boolean)">
      <summary>Begins playing the effect.</summary>
      <param name="targets">Array of target objects on which to play this effect. If this parameter is specified, then the effect's <code>targets</code> property is not used.</param>
      <param name="playReversedFromEnd">If <code>true</code>, play the effect backwards.</param>
    </member>
    <member name="M:mx.effects.IEffect.resume">
      <summary>Resumes the effect after it has been paused by a call to the <code>pause()</code> method.</summary>
    </member>
    <member name="M:mx.effects.IEffect.reverse">
      <summary>Plays the effect in reverse, if the effect is currently playing, starting from the current position of the effect.</summary>
    </member>
    <member name="M:mx.effects.IEffect.stop">
      <summary>Stops the effect, leaving the effect targets in their current state.</summary>
    </member>
    <member name="P:mx.effects.IEffect.className">
      <summary>The name of the effect class, such as <code>"Fade"</code>.</summary>
    </member>
    <member name="P:mx.effects.IEffect.customFilter">
      <summary>Specifies a custom filter object, of type EffectTargetFilter, used by the effect to determine the targets on which to play the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffect.duration">
      <summary>Duration of the effect in milliseconds.</summary>
    </member>
    <member name="P:mx.effects.IEffect.effectTargetHost">
      <summary>A property that lets you access the target list-based control of a data effect.</summary>
    </member>
    <member name="P:mx.effects.IEffect.filter">
      <summary>Specifies an algorithm for filtering targets for an effect.</summary>
    </member>
    <member name="P:mx.effects.IEffect.hideFocusRing">
      <summary>Determines whether the effect should hide the focus ring when starting the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffect.isPlaying">
      <summary>A read-only flag which is true if any instances of the effect are currently playing, and false if none are.</summary>
    </member>
    <member name="P:mx.effects.IEffect.perElementOffset">
      <summary>Additional delay, in milliseconds, for effect targets after the first target of the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffect.relevantProperties">
      <summary>An Array of property names to use when performing filtering.</summary>
    </member>
    <member name="P:mx.effects.IEffect.relevantStyles">
      <summary>An Array of style names to use when performing filtering.</summary>
    </member>
    <member name="P:mx.effects.IEffect.target">
      <summary>The UIComponent object to which this effect is applied.</summary>
    </member>
    <member name="P:mx.effects.IEffect.targets">
      <summary>An Array of UIComponent objects that are targets for the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffect.triggerEvent">
      <summary>The Event object passed to this Effect by the EffectManager when an effect is triggered, or <code>null</code> if the effect is not being played by the EffectManager.</summary>
    </member>
    <member name="T:mx.effects.IEffectInstance">
      <summary>The IEffectInstance interface represents an instance of an effect playing on a target.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.end">
      <summary>Interrupts an effect instance that is currently playing, and jumps immediately to the end of the effect.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.finishEffect">
      <summary>Called by the <code>end()</code> method when the effect finishes playing.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.finishRepeat">
      <summary>Called after each iteration of a repeated effect finishes playing.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.initEffect(flash.events.Event)">
      <summary>This method is called if the effect was triggered by the EffectManager.</summary>
      <param name="event">The Event object that was dispatched to trigger the effect. For example, if the trigger was a mouseDownEffect, the event would be a MouseEvent with type equal to MouseEvent.MOUSEDOWN.</param>
    </member>
    <member name="M:mx.effects.IEffectInstance.pause">
      <summary>Pauses the effect until you call the <code>resume()</code> method.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.play">
      <summary>Plays the effect instance on the target.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.resume">
      <summary>Resumes the effect after it has been paused by a call to the <code>pause()</code> method.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.reverse">
      <summary>Plays the effect in reverse, starting from the current position of the effect.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.startEffect">
      <summary>Plays the effect instance on the target after the <code>startDelay</code> period has elapsed.</summary>
    </member>
    <member name="M:mx.effects.IEffectInstance.stop">
      <summary>Stops the effect, leaving the target in its current state.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.className">
      <summary>The name of the effect class, such as <code>"FadeInstance"</code>.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.duration">
      <summary>The duration of the effect, in milliseconds.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.effect">
      <summary>The IEffect object that created this IEffectInstance object.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.effectTargetHost">
      <summary>A property that lets you access the target list-based control of a data effect.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.hideFocusRing">
      <summary>Determines whether the effect should hide the focus ring when starting the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.playheadTime">
      <summary>Current position in time of the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.propertyChanges">
      <summary>Specifies the PropertyChanges object containing the start and end values for the set of properties relevant to the effect's targets.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.repeatCount">
      <summary>Number of times to repeat the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.repeatDelay">
      <summary>Amount of time, in milliseconds, to wait before repeating the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.startDelay">
      <summary>Amount of time, in milliseconds, to wait before starting the effect.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.suspendBackgroundProcessing">
      <summary>If <code>true</code>, blocks all background processing while the effect is playing.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.target">
      <summary>The UIComponent object to which this effect is applied.</summary>
    </member>
    <member name="P:mx.effects.IEffectInstance.triggerEvent">
      <summary>The event, if any, which triggered the playing of the effect.</summary>
    </member>
    <member name="T:mx.effects.IEffectTargetHost">
      <summary>The IEffectTargetHost interface defines the interface that lets you access the target list-based control of a data effect.</summary>
    </member>
    <member name="M:mx.effects.IEffectTargetHost.addDataEffectItem(System.Object)">
      <summary>Adds an item renderer if a data change effect is running.</summary>
      <param name="target">The item renderer to add to the control's layout.</param>
    </member>
    <member name="M:mx.effects.IEffectTargetHost.getRendererSemanticValue(System.Object,Avm.String)">
      <summary>Returns <code>true</code> or <code>false</code> to indicates whether the effect should play on the target.</summary>
      <param name="target">An item renderer</param>
      <param name="semanticProperty">The semantic property of the renderer whose value will be returned.</param>
    </member>
    <member name="M:mx.effects.IEffectTargetHost.removeDataEffectItem(System.Object)">
      <summary>Removes an item renderer if a data change effect is running.</summary>
      <param name="target">The item renderer to remove from the control's layout.</param>
    </member>
    <member name="M:mx.effects.IEffectTargetHost.unconstrainRenderer(System.Object)">
      <summary>Called by an <code>UnconstrainItemAction</code> effect as part of a data change effect if the item renderers corresponding to certain data items need to move outside the normal positions of item renderers in the control.</summary>
      <param name="item">The item renderer that is a target of the effect.</param>
    </member>
    <member name="T:mx.effects.Iris">
      <summary>The Iris effect animates the effect target by expanding or contracting a rectangular mask centered on the target.</summary>
    </member>
    <member name="T:mx.effects.MaskEffect">
      <summary>The MaskEffect class is an abstract base class for all effects that animate a mask, such as the wipe effects and the Iris effect.</summary>
    </member>
    <member name="E:mx.effects.MaskEffect.tweenEnd">
      <summary>Dispatched when the effect ends.</summary>
    </member>
    <member name="E:mx.effects.MaskEffect.tweenUpdate">
      <summary>Dispatched every time the effect updates the target.</summary>
    </member>
    <member name="E:mx.effects.MaskEffect.tweenStart">
      <summary>Dispatched when the effect starts, which corresponds to the first call to the <code>onMoveTweenUpdate()</code> and <code>onScaleTweenUpdate()</code> methods.</summary>
    </member>
    <member name="M:mx.effects.MaskEffect.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="M:mx.effects.MaskEffect.getAffectedProperties">
      <summary>Returns the component properties modified by this effect.</summary>
    </member>
    <member name="M:mx.effects.MaskEffect.tweenEventHandler(mx.events.TweenEvent)">
      <summary>Called when the TweenEffect dispatches a TweenEvent.</summary>
      <param name="event">An event object of type TweenEvent.</param>
    </member>
    <member name="F:mx.effects.MaskEffect.createMaskFunction">
      <summary>Function called when the effect creates the mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.moveEasingFunction">
      <summary>Easing function to use for moving the mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.scaleEasingFunction">
      <summary>Easing function to use for scaling the mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.scaleXFrom">
      <summary>Initial scaleX for mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.scaleXTo">
      <summary>Ending scaleX for mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.scaleYFrom">
      <summary>Initial scaleY for mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.scaleYTo">
      <summary>Ending scaleY for mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.xFrom">
      <summary>Initial position's x coordinate for mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.xTo">
      <summary>Destination position's x coordinate for mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.yFrom">
      <summary>Initial position's y coordinate for mask.</summary>
    </member>
    <member name="F:mx.effects.MaskEffect.yTo">
      <summary>Destination position's y coordinate for mask.</summary>
    </member>
    <member name="P:mx.effects.MaskEffect.showTarget">
      <summary>Specifies that the target component is becoming visible, <code>true</code>, or invisible, <code>false</code>.</summary>
    </member>
    <member name="T:mx.effects.Move">
      <summary>The Move effect changes the position of a component over a specified time interval.</summary>
    </member>
    <member name="M:mx.effects.Move.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.Move.xBy">
      <summary>Number of pixels to move the components along the x axis.</summary>
    </member>
    <member name="F:mx.effects.Move.xFrom">
      <summary>Initial position's x coordinate.</summary>
    </member>
    <member name="F:mx.effects.Move.xTo">
      <summary>Destination position's x coordinate.</summary>
    </member>
    <member name="F:mx.effects.Move.yBy">
      <summary>Number of pixels to move the components along the y axis.</summary>
    </member>
    <member name="F:mx.effects.Move.yFrom">
      <summary>Initial position's y coordinate.</summary>
    </member>
    <member name="F:mx.effects.Move.yTo">
      <summary>Destination position's y coordinate.</summary>
    </member>
    <member name="T:mx.effects.Parallel">
      <summary>The Parallel effect plays multiple child effects at the same time.</summary>
    </member>
    <member name="T:mx.effects.Pause">
      <summary>The Pause effect is useful when sequencing effects.</summary>
    </member>
    <member name="T:mx.effects.RemoveChildAction">
      <summary>The RemoveChildAction class defines an action effect that corresponds to the RemoveChild property of a view state definition.</summary>
    </member>
    <member name="M:mx.effects.RemoveChildAction.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="T:mx.effects.RemoveItemAction">
      <summary>The RemoveItemAction class defines an action effect that determines when the item renderer disappears from the control for the item renderer of an item being removed from a list-based control, such as List or TileList, or for an item that is replaced by a new item added to the control.</summary>
    </member>
    <member name="M:mx.effects.RemoveItemAction.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="T:mx.effects.Resize">
      <summary>The Resize effect changes the width, height, or both dimensions of a component over a specified time interval.</summary>
    </member>
    <member name="M:mx.effects.Resize.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.Resize.heightBy">
      <summary>Number of pixels by which to modify the height of the component.</summary>
    </member>
    <member name="F:mx.effects.Resize.heightFrom">
      <summary>Initial height, in pixels.</summary>
    </member>
    <member name="F:mx.effects.Resize.heightTo">
      <summary>Final height, in pixels.</summary>
    </member>
    <member name="F:mx.effects.Resize.hideChildrenTargets">
      <summary>An Array of Panel containers.</summary>
    </member>
    <member name="F:mx.effects.Resize.widthBy">
      <summary>Number of pixels by which to modify the width of the component.</summary>
    </member>
    <member name="F:mx.effects.Resize.widthFrom">
      <summary>Initial width, in pixels.</summary>
    </member>
    <member name="F:mx.effects.Resize.widthTo">
      <summary>Final width, in pixels.</summary>
    </member>
    <member name="T:mx.effects.Rotate">
      <summary>The Rotate effect rotates a component around a specified point.</summary>
    </member>
    <member name="M:mx.effects.Rotate.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.Rotate.angleFrom">
      <summary>The starting angle of rotation of the target object, expressed in degrees.</summary>
    </member>
    <member name="F:mx.effects.Rotate.angleTo">
      <summary>The ending angle of rotation of the target object, expressed in degrees.</summary>
    </member>
    <member name="F:mx.effects.Rotate.originX">
      <summary>The x-position of the center point of rotation.</summary>
    </member>
    <member name="F:mx.effects.Rotate.originY">
      <summary>The y-position of the center point of rotation.</summary>
    </member>
    <member name="P:mx.effects.Rotate.hideFocusRing" />
    <member name="T:mx.effects.Sequence">
      <summary>The Sequence effect plays multiple child effects one after the other, in the order in which they are added.</summary>
    </member>
    <member name="T:mx.effects.SetPropertyAction">
      <summary>The SetPropertyAction class defines an action effect that corresponds to the <code>SetProperty property</code> of a view state definition.</summary>
    </member>
    <member name="F:mx.effects.SetPropertyAction.name">
      <summary>The name of the property being changed.</summary>
    </member>
    <member name="F:mx.effects.SetPropertyAction.value">
      <summary>The new value for the property.</summary>
    </member>
    <member name="T:mx.effects.SetStyleAction">
      <summary>The SetStyleAction class defines an action effect that corresponds to the SetStyle property of a view state definition.</summary>
    </member>
    <member name="F:mx.effects.SetStyleAction.name">
      <summary>The name of the style property being changed.</summary>
    </member>
    <member name="F:mx.effects.SetStyleAction.value">
      <summary>The new value for the style property.</summary>
    </member>
    <member name="P:mx.effects.SetStyleAction.relevantStyles">
      <summary>Contains the style properties modified by this effect.</summary>
    </member>
    <member name="T:mx.effects.SoundEffect">
      <summary>The SoundEffect class plays an MP3 audio file.</summary>
    </member>
    <member name="E:mx.effects.SoundEffect.progress">
      <summary>Dispatched periodically as the sound file loads.</summary>
    </member>
    <member name="E:mx.effects.SoundEffect.ioError">
      <summary>Dispatched when an error occurs during the loading of the sound file.</summary>
    </member>
    <member name="E:mx.effects.SoundEffect.id3">
      <summary>Dispatched when ID3 data is available for an MP3 sound file.</summary>
    </member>
    <member name="E:mx.effects.SoundEffect.complete">
      <summary>Dispatched when the sound file finishes loading.</summary>
    </member>
    <member name="M:mx.effects.SoundEffect.load">
      <summary>Loads the MP3 if the <code>source</code> property points to a URL.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.bufferTime">
      <summary>The SoundEffect class uses an internal Sound object to control the MP3 file.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.loops">
      <summary>The number of times to play the sound in a loop, where a value of 0 means play the effect once, a value of 1 means play the effect twice, and so on.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.panEasingFunction">
      <summary>The easing function for the pan effect.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.panFrom">
      <summary>Initial pan of the Sound object.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.panTo">
      <summary>Final pan of the Sound object.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.startTime">
      <summary>The initial position in the MP3 file, in milliseconds, at which playback should start.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.useDuration">
      <summary>If <code>true</code>, stop the effect after the time specified by the <code>duration</code> property has elapsed.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.volumeEasingFunction">
      <summary>The easing function for the volume effect.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.volumeFrom">
      <summary>Initial volume of the Sound object.</summary>
    </member>
    <member name="F:mx.effects.SoundEffect.volumeTo">
      <summary>Final volume of the Sound object.</summary>
    </member>
    <member name="P:mx.effects.SoundEffect.autoLoad">
      <summary>If <code>true</code>, load the MP3 file when the <code>source</code> has been specified.</summary>
    </member>
    <member name="P:mx.effects.SoundEffect.isLoading">
      <summary>This property is <code>true</code> if the MP3 has been loaded.</summary>
    </member>
    <member name="P:mx.effects.SoundEffect.sound">
      <summary>The Sound object that the MP3 file has been loaded into.</summary>
    </member>
    <member name="P:mx.effects.SoundEffect.source">
      <summary>The URL or class of the MP3 file to play.</summary>
    </member>
    <member name="T:mx.effects.Tween">
      <summary>The Tween class defines a tween, a property animation performed on a target object over a period of time.</summary>
    </member>
    <member name="M:mx.effects.Tween.#ctor(System.Object,System.Object,System.Object,System.Double,System.Double,Avm.Function,Avm.Function)">
      <summary>Constructor.</summary>
      <param name="listener">Object that is notified at each interval of the animation. You typically pass the <code>this</code> keyword as the value. The <code>listener</code> must define the <code>onTweenUpdate()</code> method and optionally the <code>onTweenEnd()</code> method. The former method is invoked for each interval of the animation, and the latter is invoked just after the animation finishes.</param>
      <param name="startValue">Initial value(s) of the animation. Either a number or an array of numbers. If a number is passed, the Tween interpolates between this number and the number passed in the <code>endValue</code> parameter. If an array of numbers is passed, each number in the array is interpolated.</param>
      <param name="endValue">Final value(s) of the animation. The type of this argument must match the <code>startValue</code> parameter.</param>
      <param name="duration">Duration of the animation, expressed in milliseconds.</param>
      <param name="minFps">Minimum number of times that the <code>onTweenUpdate()</code> method should be called every second. The tween code tries to call the <code>onTweenUpdate()</code> method as frequently as possible (up to 100 times per second). However, if the frequency falls below <code>minFps</code>, the duration of the animation automatically increases. As a result, an animation that temporarily freezes (because it is not getting any CPU cycles) begins again where it left off, instead of suddenly jumping ahead.</param>
      <param name="updateFunction">Specifies an alternative update callback function to be used instead of <code>listener.OnTweenUpdate()</code></param>
      <param name="endFunction">Specifies an alternative end callback function to be used instead of <code>listener.OnTweenEnd()</code></param>
    </member>
    <member name="M:mx.effects.Tween.endTween">
      <summary>Interrupt the tween, jump immediately to the end of the tween, and invoke the <code>onTweenEnd()</code> callback function.</summary>
    </member>
    <member name="M:mx.effects.Tween.pause">
      <summary>Pauses the effect until you call the <code>resume()</code> method.</summary>
    </member>
    <member name="M:mx.effects.Tween.resume">
      <summary>Resumes the effect after it has been paused by a call to the <code>pause()</code> method.</summary>
    </member>
    <member name="M:mx.effects.Tween.reverse">
      <summary>Plays the effect in reverse, starting from the current position of the effect.</summary>
    </member>
    <member name="M:mx.effects.Tween.seek(System.Double)">
      <summary>Advances the tween effect to the specified position.</summary>
      <param name="playheadTime">The position, in milliseconds, between 0 and the value of the <code>duration</code> property.</param>
    </member>
    <member name="M:mx.effects.Tween.setTweenHandlers(Avm.Function,Avm.Function)">
      <summary>By default, the Tween class invokes the <code>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</code> callback function on a regular interval on the effect instance for the duration of the effect, and the optional <code>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</code> callback function at the end of the effect duration.</summary>
      <param name="updateFunction">Specifies the update callback function.</param>
      <param name="endFunction">Specifies the end callback function.</param>
    </member>
    <member name="M:mx.effects.Tween.stop">
      <summary>Stops the tween, ending it without dispatching an event or calling endFunction or onTweenEnd().</summary>
    </member>
    <member name="F:mx.effects.Tween.duration">
      <summary>Duration of the animation, in milliseconds.</summary>
    </member>
    <member name="F:mx.effects.Tween.listener">
      <summary>Object that is notified at each interval of the animation.</summary>
    </member>
    <member name="P:mx.effects.Tween.easingFunction">
      <summary>Sets the easing function for the animation.</summary>
    </member>
    <member name="T:mx.effects.TweenEffect">
      <summary>The TweenEffect class is the superclass for all effects that are based on the Tween object.</summary>
    </member>
    <member name="E:mx.effects.TweenEffect.tweenEnd">
      <summary>Dispatched when the tween effect ends.</summary>
    </member>
    <member name="E:mx.effects.TweenEffect.tweenUpdate">
      <summary>Dispatched every time the tween effect updates the target.</summary>
    </member>
    <member name="E:mx.effects.TweenEffect.tweenStart">
      <summary>Dispatched when the tween effect starts, which corresponds to the first call to the <code>onTweenUpdate()</code> method.</summary>
    </member>
    <member name="M:mx.effects.TweenEffect.tweenEventHandler(mx.events.TweenEvent)">
      <summary>Called when the TweenEffect dispatches a TweenEvent.</summary>
      <param name="event">An event object of type TweenEvent.</param>
    </member>
    <member name="F:mx.effects.TweenEffect.easingFunction">
      <summary>The easing function for the animation.</summary>
    </member>
    <member name="T:mx.effects.UnconstrainItemAction">
      <summary>The UnconstrainItemAction class defines an action effect that is used in a data-effect definition to temporarily stop item renderers from being positioned by the layout algorithm of the parent control.</summary>
    </member>
    <member name="T:mx.effects.WipeDown">
      <summary>The WipeDown class defines a bar wipe down effect.</summary>
    </member>
    <member name="T:mx.effects.WipeLeft">
      <summary>The WipeLeft class defines a bar wipe left effect.</summary>
    </member>
    <member name="T:mx.effects.WipeRight">
      <summary>The WipeRight class defines a bar wipe right effect.</summary>
    </member>
    <member name="T:mx.effects.WipeUp">
      <summary>The WipeUp class defines a bar wipe up effect.</summary>
    </member>
    <member name="T:mx.effects.Zoom">
      <summary>The Zoom effect zooms the object in or out on a center point.</summary>
    </member>
    <member name="M:mx.effects.Zoom.#ctor(System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The Object to animate with this effect.</param>
    </member>
    <member name="F:mx.effects.Zoom.captureRollEvents">
      <summary>If <code>true</code>, prevents Flex from dispatching the <code>rollOut</code> and <code>rollOver</code> events if the mouse has not moved.</summary>
    </member>
    <member name="F:mx.effects.Zoom.originX">
      <summary>Number that represents the x-position of the zoom origin when the effect target is in a container that supports absolute positioning, such as the Canvas container.</summary>
    </member>
    <member name="F:mx.effects.Zoom.originY">
      <summary>Number that represents the y-position of the zoom origin when the effect target is in a container that supports absolute positioning, such as the Canvas container.</summary>
    </member>
    <member name="F:mx.effects.Zoom.zoomHeightFrom">
      <summary>Number that represents the scale at which to start the height zoom, as a percent between 0.01 and 1.0.</summary>
    </member>
    <member name="F:mx.effects.Zoom.zoomHeightTo">
      <summary>Number that represents the scale at which to complete the height zoom, as a percent between 0.01 and 1.0.</summary>
    </member>
    <member name="F:mx.effects.Zoom.zoomWidthFrom">
      <summary>Number that represents the scale at which to start the width zoom, as a percent between 0.01 and 1.0.</summary>
    </member>
    <member name="F:mx.effects.Zoom.zoomWidthTo">
      <summary>Number that represents the scale at which to complete the width zoom, as a percent between 0.01 and 1.0.</summary>
    </member>
    <member name="N:mx.events" />
    <member name="T:mx.events.BrowserChangeEvent">
      <summary>The BrowserChangeEvent class represents event objects specific to the BrowserManager.</summary>
    </member>
    <member name="E:mx.events.BrowserChangeEvent.browserURLChange">
      <summary>The <code>BrowserChangeEvent.BROWSER_URL_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>browserURLChange</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>lastURL</code></td><td>The previous value of the BrowserManager's <code>url</code> property.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>url</code></td><td>The new value of the BrowserManager's <code>url</code> property.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.BrowserChangeEvent.urlChange">
      <summary>The <code>BrowserChangeEvent.URL_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>urlChange</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>lastURL</code></td><td>The previous value of the BrowserManager's <code>url</code> property.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>url</code></td><td>The new value of the BrowserManager's <code>url</code> property.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.BrowserChangeEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,Avm.String)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="url">Current URL in the browser.</param>
      <param name="lastURL">Previous URL in the browser.</param>
    </member>
    <member name="F:mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE">
      <summary>The <code>BrowserChangeEvent.BROWSER_URL_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>browserURLChange</code> event.</summary>
    </member>
    <member name="F:mx.events.BrowserChangeEvent.URL_CHANGE">
      <summary>The <code>BrowserChangeEvent.URL_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>urlChange</code> event.</summary>
    </member>
    <member name="F:mx.events.BrowserChangeEvent.lastURL">
      <summary>The previous value of the <code>url</code> property in the BrowserManager.</summary>
    </member>
    <member name="F:mx.events.BrowserChangeEvent.url">
      <summary>The new value of the <code>url</code> property in the BrowserManager.</summary>
    </member>
    <member name="T:mx.events.CalendarLayoutChangeEvent">
      <summary>The CalendarLayoutChangeEvent class represents the event object passed to the event listener for the <code>change</code> event for the DateChooser and DateField controls.</summary>
    </member>
    <member name="M:mx.events.CalendarLayoutChangeEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.Date,flash.events.Event)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that triggered the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="newDate">The date selected in the control.</param>
      <param name="triggerEvent">The event that triggered this change event; usually a <code>change</code> event.</param>
    </member>
    <member name="F:mx.events.CalendarLayoutChangeEvent.newDate">
      <summary>The selected date of the control.</summary>
    </member>
    <member name="F:mx.events.CalendarLayoutChangeEvent.triggerEvent">
      <summary>The event that triggered the change of the date; usually a <code>change</code> event.</summary>
    </member>
    <member name="T:mx.events.ChildExistenceChangedEvent">
      <summary>Represents events that are dispatched when a the child of a control is created or destroyed.</summary>
    </member>
    <member name="E:mx.events.ChildExistenceChangedEvent.childRemove">
      <summary>The <code>ChildExistenceChangedEvent.CHILD_REMOVE</code> constant defines the value of the <code>type</code> property of the event object for a <code>childRemove</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>relatedObject</code></td><td>Contains a reference to the child object that is about to be removed.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ChildExistenceChangedEvent.overlayCreated">
      <summary>The <code>ChildExistenceChangedEvent.OVERLAY_CREATED</code> constant defines the value of the <code>type</code> property of the event object for a <code>overlayCreated</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>relatedObject</code></td><td>Contains a reference to the child object whose overlay was created.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.ChildExistenceChangedEvent.#ctor(Avm.String,System.Boolean,System.Boolean,flash.display.DisplayObject)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="relatedObject">Reference to the child object that was created or destroyed.</param>
    </member>
    <member name="F:mx.events.ChildExistenceChangedEvent.CHILD_REMOVE">
      <summary>The <code>ChildExistenceChangedEvent.CHILD_REMOVE</code> constant defines the value of the <code>type</code> property of the event object for a <code>childRemove</code> event.</summary>
    </member>
    <member name="F:mx.events.ChildExistenceChangedEvent.OVERLAY_CREATED">
      <summary>The <code>ChildExistenceChangedEvent.OVERLAY_CREATED</code> constant defines the value of the <code>type</code> property of the event object for a <code>overlayCreated</code> event.</summary>
    </member>
    <member name="F:mx.events.ChildExistenceChangedEvent.relatedObject">
      <summary>Reference to the child object that was created or destroyed.</summary>
    </member>
    <member name="T:mx.events.CloseEvent">
      <summary>The CloseEvent class represents event objects specific to popup windows, such as the Alert control.</summary>
    </member>
    <member name="M:mx.events.CloseEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Int32)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="detail">Value of the detail property; identifies the button in the popped up control that was clicked.</param>
    </member>
    <member name="F:mx.events.CloseEvent.detail">
      <summary>Identifies the button in the popped up control that was clicked.</summary>
    </member>
    <member name="T:mx.events.CollectionEvent">
      <summary>The mx.events.CollectionEvent class represents an event that is dispatched when the associated collection changes.</summary>
    </member>
    <member name="M:mx.events.CollectionEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,System.Int32,System.Int32,Avm.Array)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that triggered the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="kind">Indicates the kind of event that occured. The parameter value can be one of the values in the CollectionEventKind class, or <code>null</code>, which indicates that the kind is unknown.</param>
      <param name="location">When the <code>kind</code> is <code>CollectionEventKind.ADD</code>, <code>CollectionEventKind.MOVE</code>, <code>CollectionEventKind.REMOVE</code>, or <code>CollectionEventKind.REPLACE</code>, this value indicates at what location the item(s) specified in the <code>items property</code> can be found within the target collection.</param>
      <param name="oldLocation">When the <code>kind</code> is <code>CollectionEventKind.MOVE</code>, this value indicates the old location within the target collection of the item(s) specified in the <code>items</code> property.</param>
      <param name="items">Array of objects with information about the items affected by the event, as described in the <code>items</code> property. When the <code>kind</code> is <code>CollectionEventKind.REFRESH</code> or <code>CollectionEventKind.RESET</code>, this Array has zero length.</param>
    </member>
    <member name="F:mx.events.CollectionEvent.items">
      <summary>When the <code>kind</code> is <code>CollectionEventKind.ADD</code> or <code>CollectionEventKind.REMOVE</code> the <code>items</code> property is an Array of added/removed items.</summary>
    </member>
    <member name="F:mx.events.CollectionEvent.kind">
      <summary>Indicates the kind of event that occurred.</summary>
    </member>
    <member name="F:mx.events.CollectionEvent.location">
      <summary>When the <code>kind</code> value is <code>CollectionEventKind.ADD</code>, <code>CollectionEventKind.MOVE</code>, <code>CollectionEventKind.REMOVE</code>, or <code>CollectionEventKind.REPLACE</code>, this property is the zero-base index in the collection of the item(s) specified in the <code>items</code> property.</summary>
    </member>
    <member name="F:mx.events.CollectionEvent.oldLocation">
      <summary>When the <code>kind</code> value is <code>CollectionEventKind.MOVE</code>, this property is the zero-based index in the target collection of the previous location of the item(s) specified by the <code>items</code> property.</summary>
    </member>
    <member name="T:mx.events.CollectionEventKind">
      <summary>The CollectionEventKind class contains constants for the valid values of the mx.events.CollectionEvent class <code>kind</code> property.</summary>
    </member>
    <member name="F:mx.events.CollectionEventKind.MOVE">
      <summary>Indicates that the item has moved from the position identified by the CollectionEvent <code>oldLocation</code> property to the position identified by the <code>location</code> property.</summary>
    </member>
    <member name="F:mx.events.CollectionEventKind.REFRESH">
      <summary>Indicates that the collection applied a sort, a filter, or both.</summary>
    </member>
    <member name="F:mx.events.CollectionEventKind.REMOVE">
      <summary>Indicates that the collection removed an item or items.</summary>
    </member>
    <member name="F:mx.events.CollectionEventKind.REPLACE">
      <summary>Indicates that the item at the position identified by the CollectionEvent <code>location</code> property has been replaced.</summary>
    </member>
    <member name="F:mx.events.CollectionEventKind.RESET">
      <summary>Indicates that the collection has changed so drastically that a reset is required.</summary>
    </member>
    <member name="F:mx.events.CollectionEventKind.UPDATE">
      <summary>Indicates that one or more items were updated within the collection.</summary>
    </member>
    <member name="T:mx.events.ColorPickerEvent">
      <summary>Represents events that are specific to the ColorPicker control, such as when the user rolls the mouse over or out of a swatch in the swatch panel.</summary>
    </member>
    <member name="E:mx.events.ColorPickerEvent.enter">
      <summary>The <code>ColorPickerEvent.ENTER</code> constant defines the value of the <code>type</code> property of the event that is dispatched when the user presses the Enter key after typing in the color selector box. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>color</code></td><td>The RGB color that was entered.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>.</td></tr> <tr><td><code>index</code></td> <td>Always -1.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ColorPickerEvent.itemRollOut">
      <summary>The <code>ColorPickerEvent.ITEM_ROLL_OUT</code> constant defines the value of the <code>type</code> property of the event that is dispatched when the user rolls the mouse out of a swatch in the swatch panel. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>color</code></td><td>The RGB color of the color that was rolled over.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>.</td></tr> <tr><td><code>index</code></td> <td>The zero-based index in the Color's data provider that corresponds to the color that was rolled over.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ColorPickerEvent.itemRollOver">
      <summary>The <code>ColorPickerEvent.ITEM_ROLL_OVER</code> constant defines the value of the <code>type</code> property of the event that is dispatched when the user rolls the mouse over of a swatch in the swatch panel. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>color</code></td><td>The RGB color of the color that the user rolled out of.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>.</td></tr> <tr><td><code>index</code></td> <td>The zero-based index in the Color's data provider that corresponds to the color that the user rolled out of.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.ColorPickerEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Int32,System.UInt32)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="index">The zero-based index in the Color's data provider that corresponds to the color that was rolled over, rolled out of, or selected.</param>
      <param name="color">The RGB color that was rolled over, rolled out of, selected, or entered.</param>
    </member>
    <member name="F:mx.events.ColorPickerEvent.ENTER">
      <summary>The <code>ColorPickerEvent.ENTER</code> constant defines the value of the <code>type</code> property of the event that is dispatched when the user presses the Enter key after typing in the color selector box.</summary>
    </member>
    <member name="F:mx.events.ColorPickerEvent.ITEM_ROLL_OUT">
      <summary>The <code>ColorPickerEvent.ITEM_ROLL_OUT</code> constant defines the value of the <code>type</code> property of the event that is dispatched when the user rolls the mouse out of a swatch in the swatch panel.</summary>
    </member>
    <member name="F:mx.events.ColorPickerEvent.ITEM_ROLL_OVER">
      <summary>The <code>ColorPickerEvent.ITEM_ROLL_OVER</code> constant defines the value of the <code>type</code> property of the event that is dispatched when the user rolls the mouse over of a swatch in the swatch panel.</summary>
    </member>
    <member name="F:mx.events.ColorPickerEvent.color">
      <summary>The RGB color that was rolled over, rolled out of, selected, or entered.</summary>
    </member>
    <member name="F:mx.events.ColorPickerEvent.index">
      <summary>The zero-based index in the Color's data provider that corresponds to the color that was rolled over, rolled out of, or selected.</summary>
    </member>
    <member name="T:mx.events.CuePointEvent">
      <summary>The CuePointEvent class represents the event object passed to the event listener for cue point events dispatched by the VideoDisplay control.</summary>
    </member>
    <member name="M:mx.events.CuePointEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,System.Double,Avm.String)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="cuePointName">The name of the cue point.</param>
      <param name="cuePointTime">The time of the cue point, in seconds.</param>
      <param name="cuePointType">The string <code>"actionscript"</code>.</param>
    </member>
    <member name="F:mx.events.CuePointEvent.cuePointName">
      <summary>The name of the cue point that caused the event.</summary>
    </member>
    <member name="F:mx.events.CuePointEvent.cuePointTime">
      <summary>The time of the cue point that caused the event, in seconds.</summary>
    </member>
    <member name="F:mx.events.CuePointEvent.cuePointType">
      <summary>The string <code>"actionscript"</code>.</summary>
    </member>
    <member name="T:mx.events.DataGridEvent">
      <summary>The DataGridEvent class represents event objects that are specific to the DataGrid control, such as the event that is dispatched when an editable grid item gets the focus.</summary>
    </member>
    <member name="E:mx.events.DataGridEvent.columnStretch">
      <summary>The DataGridEvent.COLUMN_STRETCH constant defines the value of the <code>type</code> property of the event object for a <code>columnStretch</code> event, which indicates that a user expanded a column horizontally. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the item's column in the DataGrid object's <code>columns</code> array.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dataField</code></td><td>The name of the field or property in the data associated with the column.</td></tr> <tr><td><code>itemRenderer</code></td><td>null</td></tr> <tr><td><code>localX</code></td><td>the x position of the mouse</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item in the data provider.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>DataGridEvent.COLUMN_STRETCH</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DataGridEvent.headerRelease">
      <summary>The DataGridEvent.HEADER_RELEASE constant defines the value of the <code>type</code> property of the event object for a <code>headerRelease</code> event, which indicates that the user pressed and released the mouse on a column header. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the item's column in the DataGrid object's <code>columns</code> array.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dataField</code></td><td>The name of the field or property in the data associated with the column.</td></tr> <tr><td><code>itemRenderer</code></td><td>The header renderer that is being released.</td></tr> <tr><td><code>localX</code></td><td>NaN</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>null</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>DataGridEvent.HEADER_RELEASE</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DataGridEvent.itemEditBeginning">
      <summary>The DataGridEvent.ITEM__EDIT_BEGINNING constant defines the value of the <code>type</code> property of the event object for a <code>itemEditBeginning</code> event, which indicates that the user has prepared to edit an item, for example, by releasing the mouse button over the item. <p>The default listener for this event sets the <code>DataGrid.editedItemPosition</code> property to the item that has focus, which starts the item editing session.</p> <p>You typically write your own event listener for this event to disallow editing of a specific item or items. Calling the <code>preventDefault()</code> method from within your own event listener for this event prevents the default listener from executing.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the item's column in the DataGrid object's <code>columns</code> array.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dataField</code></td><td>The name of the field or property in the data associated with the item's column.</td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer for the item that will be edited. This property is null if this event is generated by keyboard, as the item to be edited may be off-screen.</td></tr> <tr><td><code>localX</code></td><td>NaN</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item in the data provider.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>DataGridEvent.ITEM_EDIT_BEGINNING</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DataGridEvent.itemEditEnd">
      <summary>The DataGridEvent.ITEM_EDIT_END constant defines the value of the <code>type</code> property of the event object for a <code>itemEditEnd</code> event, which indicates that an edit session is ending. <p>The list components have a default handler for this event that copies the data from the item editor to the data provider of the list control. The default event listener performs the following actions:</p> <ul> <li>Uses the <code>editorDataField</code> property of the DataGridColumn associated with this event to determine the property of the item editor containing the new data and updates the data provider item with that new data. Since the default item editor is the TextInput control, the default value of the <code>editorDataField</code> property is <code>"text"</code>, to specify that the <code>text</code> property of the TextInput contains the new item data.</li> <li>Calls the <code>destroyItemEditor()</code> method to close the item editor.</li> </ul> <p>You typically write an event listener for this event to perform the following actions:</p> <ul> <li>In your event listener, you can modify the data returned by the editor to the list component. For example, you can reformat the data before returning it to the list control. By default, an item editor can only return a single value. You must write an event listener for the <code>itemEditEnd</code> event if you want to return multiple values.</li> <li>In your event listener, you can examine the data entered into the item editor. If the data is incorrect, you can call the <code>preventDefault()</code> method to stop Flex from passing the new data back to the list control and from closing the editor. </li> </ul> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the item's column in the DataGrid object's <code>columns</code> array.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dataField</code></td><td>The name of the field or property in the data associated with the item's column.</td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer for the item that is being edited.</td></tr> <tr><td><code>localX</code></td><td>NaN</td></tr> <tr><td><code>reason</code></td><td>A constant defining the reason for the event. The value must be a member of the <code>DataGridEventReason</code> class.</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item in the data provider.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>DataGridEvent.ITEM_EDIT_END</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DataGridEvent.itemFocusIn">
      <summary>The DataGridEvent.ITEM_FOCUS_IN constant defines the value of the <code>type</code> property of the event object for a <code>itemFocusIn</code> event, which indicates that an item has received the focus. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the item's column in the DataGrid object's <code>columns</code> array.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dataField</code></td><td>null</td></tr> <tr><td><code>itemRenderer</code></td><td>The item editor instance for the item that is being edited.</td></tr> <tr><td><code>localX</code></td><td>NaN</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item in the data provider.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>DataGridEvent.ITEM_FOCUS_IN</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DataGridEvent.itemFocusOut">
      <summary>The DataGridEvent.ITEM_FOCUS_OUT constant defines the value of the <code>type</code> property of the event object for a <code>itemFocusOut</code> event, which indicates that an item has lost the focus. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the item's column in the DataGrid object's <code>columns</code> array.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dataField</code></td><td>null</td></tr> <tr><td><code>itemRenderer</code></td><td>The item editor instance for the item that is being edited.</td></tr> <tr><td><code>localX</code></td><td>NaN</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item in the data provider.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>DataGridEvent.ITEM_FOCUS_OUT</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.DataGridEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Int32,Avm.String,System.Int32,Avm.String,mx.controls.listClasses.IListItemRenderer,System.Double)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="columnIndex">The zero-based index of the column where the event occurred.</param>
      <param name="dataField">The name of the field or property in the data associated with the column.</param>
      <param name="rowIndex">The zero-based index of the item in the in the data provider.</param>
      <param name="reason">The reason for an <code>itemEditEnd</code> event.</param>
      <param name="itemRenderer">The item renderer that is being edited or the header renderer that was clicked..</param>
      <param name="localX">Column x-position for replaying <code>columnStretch</code> events.</param>
    </member>
    <member name="F:mx.events.DataGridEvent.COLUMN_STRETCH">
      <summary>The DataGridEvent.COLUMN_STRETCH constant defines the value of the <code>type</code> property of the event object for a <code>columnStretch</code> event, which indicates that a user expanded a column horizontally.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.HEADER_RELEASE">
      <summary>The DataGridEvent.HEADER_RELEASE constant defines the value of the <code>type</code> property of the event object for a <code>headerRelease</code> event, which indicates that the user pressed and released the mouse on a column header.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.ITEM_EDIT_BEGINNING">
      <summary>The DataGridEvent.ITEM__EDIT_BEGINNING constant defines the value of the <code>type</code> property of the event object for a <code>itemEditBeginning</code> event, which indicates that the user has prepared to edit an item, for example, by releasing the mouse button over the item.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.ITEM_EDIT_END">
      <summary>The DataGridEvent.ITEM_EDIT_END constant defines the value of the <code>type</code> property of the event object for a <code>itemEditEnd</code> event, which indicates that an edit session is ending.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.ITEM_FOCUS_IN">
      <summary>The DataGridEvent.ITEM_FOCUS_IN constant defines the value of the <code>type</code> property of the event object for a <code>itemFocusIn</code> event, which indicates that an item has received the focus.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.ITEM_FOCUS_OUT">
      <summary>The DataGridEvent.ITEM_FOCUS_OUT constant defines the value of the <code>type</code> property of the event object for a <code>itemFocusOut</code> event, which indicates that an item has lost the focus.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.columnIndex">
      <summary>The zero-based index in the DataGrid object's <code>columns</code> array of the column associated with the event.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.dataField">
      <summary>The name of the field or property in the data associated with the column.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.itemRenderer">
      <summary>The item renderer for the item that is being edited or the header render that is being clicked or stretched.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.localX">
      <summary>The column's x-position; used for replaying column stretch events.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.reason">
      <summary>The reason the <code>itemEditEnd</code> event was dispatched.</summary>
    </member>
    <member name="F:mx.events.DataGridEvent.rowIndex">
      <summary>The zero-based index of the item in the data provider.</summary>
    </member>
    <member name="T:mx.events.DataGridEventReason">
      <summary>The DataGridEventReason class defines constants for the values of the <code>reason</code> property of a DataGridEvent object when the <code>type</code> property is <code>itemEditEnd</code>.</summary>
    </member>
    <member name="F:mx.events.DataGridEventReason.NEW_COLUMN">
      <summary>Specifies that the user moved focus to a new column in the same row.</summary>
    </member>
    <member name="F:mx.events.DataGridEventReason.NEW_ROW">
      <summary>Specifies that the user moved focus to a new row.</summary>
    </member>
    <member name="F:mx.events.DataGridEventReason.OTHER">
      <summary>Specifies that the list control lost focus, was scrolled, or is somehow in a state where editing is not allowed.</summary>
    </member>
    <member name="T:mx.events.DateChooserEvent">
      <summary>The DateChooserEvent class represents the event object passed to the event listener for the <code>scroll</code> event for the DateChooser and DateField controls.</summary>
    </member>
    <member name="M:mx.events.DateChooserEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,flash.events.Event)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that triggered the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="detail">Indicates the unit and direction of scrolling. The possible values are <code>DateChooserEventDetail.NEXT_MONTH</code>, <code>DateChooserEventDetail.NEXT_YEAR</code>, <code>DateChooserEventDetail.PREVIOUS_MONTH</code>, or <code>DateChooserEventDetail.PREVIOUS_YEAR</code>.</param>
      <param name="triggerEvent">The event that triggered this change event; usually a <code>scroll</code>.</param>
    </member>
    <member name="F:mx.events.DateChooserEvent.detail">
      <summary>Indicates the direction of scrolling.</summary>
    </member>
    <member name="F:mx.events.DateChooserEvent.triggerEvent">
      <summary>The event that triggered this change; usually a <code>scroll</code>.</summary>
    </member>
    <member name="T:mx.events.DateChooserEventDetail">
      <summary>Constants that define the  values of the <code>detail</code> property of a DateChooserEvent object.</summary>
    </member>
    <member name="F:mx.events.DateChooserEventDetail.NEXT_YEAR">
      <summary>Indicates that the user scrolled the calendar to the next year.</summary>
    </member>
    <member name="F:mx.events.DateChooserEventDetail.PREVIOUS_MONTH">
      <summary>Indicates that the user scrolled the calendar to the previous month.</summary>
    </member>
    <member name="F:mx.events.DateChooserEventDetail.PREVIOUS_YEAR">
      <summary>Indicates that the user scrolled the calendar to the previous year.</summary>
    </member>
    <member name="T:mx.events.DividerEvent">
      <summary>Represents events that are dispatched when a divider has been pressed, dragged or released.</summary>
    </member>
    <member name="E:mx.events.DividerEvent.dividerPress">
      <summary>The <code>DividerEvent.DIVIDER_PRESS</code> constant defines the value of the <code>type</code> property of the event object for a <code>dividerPress</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>delta</code></td><td>Contains the number of pixels that the divider has been dragged. Positive numbers represent a drag toward the right or bottom, negative numbers toward the left or top.</td></tr> <tr><td><code>dividerIndex</code></td><td>Contains the zero-based index of the divider being dragged. The leftmost or topmost divider has a <code>dividerIndex</code> of 0.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DividerEvent.dividerRelease">
      <summary>The <code>DividerEvent.DIVIDER_RELEASE</code> constant defines the value of the <code>type</code> property of the event object for a <code>dividerRelease</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>delta</code></td><td>Contains the number of pixels that the divider has been dragged. Positive numbers represent a drag toward the right or bottom, negative numbers toward the left or top.</td></tr> <tr><td><code>dividerIndex</code></td><td>Contains the zero-based index of the divider being dragged. The leftmost or topmost divider has a <code>dividerIndex</code> of 0.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.DividerEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Int32,System.Double)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="dividerIndex">Index of the divider that generated the event.</param>
      <param name="delta">The number of pixels by which the divider has been dragged.</param>
    </member>
    <member name="F:mx.events.DividerEvent.DIVIDER_PRESS">
      <summary>The <code>DividerEvent.DIVIDER_PRESS</code> constant defines the value of the <code>type</code> property of the event object for a <code>dividerPress</code> event.</summary>
    </member>
    <member name="F:mx.events.DividerEvent.DIVIDER_RELEASE">
      <summary>The <code>DividerEvent.DIVIDER_RELEASE</code> constant defines the value of the <code>type</code> property of the event object for a <code>dividerRelease</code> event.</summary>
    </member>
    <member name="F:mx.events.DividerEvent.delta">
      <summary>The number of pixels that the divider has been dragged.</summary>
    </member>
    <member name="F:mx.events.DividerEvent.dividerIndex">
      <summary>The zero-based index of the divider being pressed or dragged.</summary>
    </member>
    <member name="T:mx.events.DragEvent">
      <summary>The DragEvent class represents event objects that are dispatched as part of a drag-and-drop operation.</summary>
    </member>
    <member name="E:mx.events.DragEvent.dragDrop">
      <summary>The <code>DragEvent.DRAG_DROP</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragDrop</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DragEvent.dragEnter">
      <summary>The <code>DragEvent.DRAG_ENTER</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragEnter</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event, which is always <code>DragManager.MOVE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DragEvent.dragExit">
      <summary>The <code>DragEvent.DRAG_EXIT</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragExit</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DragEvent.dragOver">
      <summary>The <code>DragEvent.DRAG_OVER</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragOver</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.DragEvent.dragStart">
      <summary>The DragEvent.DRAG_START constant defines the value of the <code>type</code> property of the event object for a <code>dragStart</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>action</code></td><td>The action that caused the event: <code>DragManager.COPY</code>, <code>DragManager.LINK</code>, <code>DragManager.MOVE</code>, or <code>DragManager.NONE</code>.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>dragInitiator</code></td><td>The component that initiated the drag.</td></tr> <tr><td><code>dragSource</code></td><td>The DragSource object containing the data being dragged.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.DragEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.core.IUIComponent,mx.core.DragSource,Avm.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="dragInitiator">IUIComponent that specifies the component initiating the drag.</param>
      <param name="dragSource">A DragSource object containing the data being dragged.</param>
      <param name="action">The specified drop action, such as <code>DragManager.MOVE</code>.</param>
      <param name="ctrlKey">Indicates whether the <code>Ctrl</code> key was pressed.</param>
      <param name="altKey">Indicates whether the <code>Alt</code> key was pressed.</param>
      <param name="shiftKey">Indicates whether the <code>Shift</code> key was pressed.</param>
    </member>
    <member name="F:mx.events.DragEvent.DRAG_DROP">
      <summary>The <code>DragEvent.DRAG_DROP</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragDrop</code> event.</summary>
    </member>
    <member name="F:mx.events.DragEvent.DRAG_ENTER">
      <summary>The <code>DragEvent.DRAG_ENTER</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragEnter</code> event.</summary>
    </member>
    <member name="F:mx.events.DragEvent.DRAG_EXIT">
      <summary>The <code>DragEvent.DRAG_EXIT</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragExit</code> event.</summary>
    </member>
    <member name="F:mx.events.DragEvent.DRAG_OVER">
      <summary>The <code>DragEvent.DRAG_OVER</code> constant defines the value of the <code>type</code> property of the event object for a <code>dragOver</code> event.</summary>
    </member>
    <member name="F:mx.events.DragEvent.DRAG_START">
      <summary>The DragEvent.DRAG_START constant defines the value of the <code>type</code> property of the event object for a <code>dragStart</code> event.</summary>
    </member>
    <member name="F:mx.events.DragEvent.action">
      <summary>The requested action.</summary>
    </member>
    <member name="F:mx.events.DragEvent.dragInitiator">
      <summary>The component that initiated the drag.</summary>
    </member>
    <member name="F:mx.events.DragEvent.dragSource">
      <summary>The DragSource object containing the data being dragged.</summary>
    </member>
    <member name="F:mx.events.DragEvent.draggedItem">
      <summary>If the <code>dragInitiator</code> property contains an IAutomationObject object, this property contains the child IAutomationObject object near the mouse cursor.</summary>
    </member>
    <member name="T:mx.events.DropdownEvent">
      <summary>The DropdownEvent class represents the event object passed to the event listener for the <code>open</code> and <code>close</code> events.</summary>
    </member>
    <member name="E:mx.events.DropdownEvent.open">
      <summary>The <code>DropdownEvent.OPEN</code> constant defines the value of the <code>type</code> property of the event object for a <code>open</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>triggerEvent</code></td><td>A value indicating the type of input action that triggered the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.DropdownEvent.#ctor(Avm.String,System.Boolean,System.Boolean,flash.events.Event)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="triggerEvent">A value indicating the type of input action that triggered the event</param>
    </member>
    <member name="F:mx.events.DropdownEvent.OPEN">
      <summary>The <code>DropdownEvent.OPEN</code> constant defines the value of the <code>type</code> property of the event object for a <code>open</code> event.</summary>
    </member>
    <member name="F:mx.events.DropdownEvent.triggerEvent">
      <summary>If the control is opened or closed in response to a user action, this property contains a value indicating the type of input action.</summary>
    </member>
    <member name="T:mx.events.DynamicEvent">
      <summary>This subclass of Event is dynamic, meaning that you can set arbitrary event properties on its instances at runtime.</summary>
    </member>
    <member name="T:mx.events.EffectEvent">
      <summary>Represents event objects that are specific to Flex effects.</summary>
    </member>
    <member name="E:mx.events.EffectEvent.effectStart">
      <summary>The <code>EffectEvent.EFFECT_START</code> constant defines the value of the <code>type</code> property of the event object for an <code>effectStart</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>effectInstance</code></td><td>The effect instance object for the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.EffectEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.effects.IEffectInstance)">
      <summary>Constructor.</summary>
      <param name="eventType">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="effectInstance">The effect instance that triggered the event.</param>
    </member>
    <member name="F:mx.events.EffectEvent.EFFECT_START">
      <summary>The <code>EffectEvent.EFFECT_START</code> constant defines the value of the <code>type</code> property of the event object for an <code>effectStart</code> event.</summary>
    </member>
    <member name="F:mx.events.EffectEvent.effectInstance">
      <summary>The effect instance object for the event.</summary>
    </member>
    <member name="T:mx.events.FlexEvent">
      <summary>The FlexEvent class represents the event object passed to the event listener for many Flex events.</summary>
    </member>
    <member name="E:mx.events.FlexEvent.applicationComplete">
      <summary>The <code>FlexEvent.APPLICATION_COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>applicationComplete</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.buttonDown">
      <summary>The <code>FlexEvent.BUTTON_DOWN</code> constant defines the value of the <code>type</code> property of the event object for a <code>buttonDown</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.creationComplete">
      <summary>The <code>FlexEvent.CREATION_COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>creationComplete</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.cursorUpdate">
      <summary>The <code>FlexEvent.CURSOR_UPDATE</code> constant defines the value of the <code>type</code> property of the event object for a <code>cursorUpdate</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.dataChange">
      <summary>The <code>FlexEvent.DATA_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>dataChange</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.enter">
      <summary>The <code>FlexEvent.ENTER</code> constant defines the value of the <code>type</code> property of the event object for a <code>enter</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.enterState">
      <summary>The <code>FlexEvent.ENTER_STATE</code> constant defines the value of the <code>type</code> property of the event object for a <code>enterState</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.exitState">
      <summary>The <code>FlexEvent.EXIT_STATE</code> constant defines the value of the <code>type</code> property of the event object for a <code>exitState</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.hide">
      <summary>The <code>FlexEvent.HIDE</code> constant defines the value of the <code>type</code> property of the event object for a <code>hide</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.idle">
      <summary>The <code>FlexEvent.IDLE</code> constant defines the value of the <code>type</code> property of the event object for a <code>idle</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.initialize">
      <summary>The <code>FlexEvent.INITIALIZE</code> constant defines the value of the <code>type</code> property of the event object for a <code>initialize</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.initComplete">
      <summary>Dispatched when a Flex application finishes initialization. You use this event when creating a custom download progress bar. <p>This event is always dispatched once by the Preloader class, and is the last event that the Preloader dispatches. When this event is dispatched, the event listener should dispatch an Event.COMPLETE event.</p> <p>A download progress bar must dispatch a <code>complete</code> event after it has received an <code>init_complete</code> event. The <code>complete</code> event informs the Preloader that the download progress bar has completed all operations and can be dismissed.</p> <p>A download progress bar can perform additional tasks, such as playing an animation, after receiving an <code>init_complete</code> event, and before dispatching the <code>complete</code> event. Dispatching the <code>complete</code> event should be the last action of the download progress bar.</p> <p>The FlexEvent.INIT_COMPLETE constant defines the value of the <code>type</code> property of the event object for a <code>initComplete</code> event.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.initProgress">
      <summary>Dispatched when the Flex application completes an initialization phase, as defined by calls to the <code>measure()</code>, <code>commitProperties()</code>, or <code>updateDisplayList()</code> methods. This event describes the progress of the application in the initialization phase. You use this event when creating a custom download progress bar. <p>The FlexEvent.INIT_PROGRESS constant defines the value of the <code>type</code> property of the event object for a <code>initProgress</code> event.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.invalid">
      <summary>The <code>FlexEvent.INVALID</code> constant defines the value of the <code>type</code> property of the event object for a <code>invalid</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.loading">
      <summary>The <code>FlexEvent.LOADING</code> constant defines the value of the <code>type</code> property of the event object for a <code>loading</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.preinitialize">
      <summary>The <code>FlexEvent.PREINITIALIZE</code> constant defines the value of the <code>type</code> property of the event object for a <code>preinitialize</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.remove">
      <summary>The <code>FlexEvent.REMOVE</code> constant defines the value of the <code>type</code> property of the event object for an <code>remove</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.repeat">
      <summary>The <code>FlexEvent.REPEAT</code> constant defines the value of the <code>type</code> property of the event object for a <code>repeat</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.repeatEnd">
      <summary>The <code>FlexEvent.REPEAT_END</code> constant defines the value of the <code>type</code> property of the event object for a <code>repeatEnd</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.repeatStart">
      <summary>The <code>FlexEvent.REPEAT_START</code> constant defines the value of the <code>type</code> property of the event object for a <code>repeatStart</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.show">
      <summary>The <code>FlexEvent.SHOW</code> constant defines the value of the <code>type</code> property of the event object for a <code>show</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.transformChange">
      <summary>The <code>FlexEvent.TRANSFORM_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>transformChange</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.updateComplete">
      <summary>The <code>FlexEvent.UPDATE_COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>updateComplete</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.urlChanged">
      <summary>The <code>FlexEvent.URL_CHANGED</code> constant defines the value of the <code>type</code> property of the event object for a <code>urlChanged</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.valid">
      <summary>The <code>FlexEvent.VALID</code> constant defines the value of the <code>type</code> property of the event object for a <code>valid</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.FlexEvent.valueCommit">
      <summary>The <code>FlexEvent.VALUE_COMMIT</code> constant defines the value of the <code>type</code> property of the event object for a <code>valueCommit</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.FlexEvent.#ctor(Avm.String,System.Boolean,System.Boolean)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
    </member>
    <member name="F:mx.events.FlexEvent.APPLICATION_COMPLETE">
      <summary>The <code>FlexEvent.APPLICATION_COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>applicationComplete</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.BUTTON_DOWN">
      <summary>The <code>FlexEvent.BUTTON_DOWN</code> constant defines the value of the <code>type</code> property of the event object for a <code>buttonDown</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.CREATION_COMPLETE">
      <summary>The <code>FlexEvent.CREATION_COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>creationComplete</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.CURSOR_UPDATE">
      <summary>The <code>FlexEvent.CURSOR_UPDATE</code> constant defines the value of the <code>type</code> property of the event object for a <code>cursorUpdate</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.DATA_CHANGE">
      <summary>The <code>FlexEvent.DATA_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>dataChange</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.ENTER">
      <summary>The <code>FlexEvent.ENTER</code> constant defines the value of the <code>type</code> property of the event object for a <code>enter</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.ENTER_STATE">
      <summary>The <code>FlexEvent.ENTER_STATE</code> constant defines the value of the <code>type</code> property of the event object for a <code>enterState</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.EXIT_STATE">
      <summary>The <code>FlexEvent.EXIT_STATE</code> constant defines the value of the <code>type</code> property of the event object for a <code>exitState</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.HIDE">
      <summary>The <code>FlexEvent.HIDE</code> constant defines the value of the <code>type</code> property of the event object for a <code>hide</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.IDLE">
      <summary>The <code>FlexEvent.IDLE</code> constant defines the value of the <code>type</code> property of the event object for a <code>idle</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.INITIALIZE">
      <summary>The <code>FlexEvent.INITIALIZE</code> constant defines the value of the <code>type</code> property of the event object for a <code>initialize</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.INIT_COMPLETE">
      <summary>Dispatched when a Flex application finishes initialization.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.INIT_PROGRESS">
      <summary>Dispatched when the Flex application completes an initialization phase, as defined by calls to the <code>measure()</code>, <code>commitProperties()</code>, or <code>updateDisplayList()</code> methods.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.INVALID">
      <summary>The <code>FlexEvent.INVALID</code> constant defines the value of the <code>type</code> property of the event object for a <code>invalid</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.LOADING">
      <summary>The <code>FlexEvent.LOADING</code> constant defines the value of the <code>type</code> property of the event object for a <code>loading</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.PREINITIALIZE">
      <summary>The <code>FlexEvent.PREINITIALIZE</code> constant defines the value of the <code>type</code> property of the event object for a <code>preinitialize</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.REMOVE">
      <summary>The <code>FlexEvent.REMOVE</code> constant defines the value of the <code>type</code> property of the event object for an <code>remove</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.REPEAT">
      <summary>The <code>FlexEvent.REPEAT</code> constant defines the value of the <code>type</code> property of the event object for a <code>repeat</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.REPEAT_END">
      <summary>The <code>FlexEvent.REPEAT_END</code> constant defines the value of the <code>type</code> property of the event object for a <code>repeatEnd</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.REPEAT_START">
      <summary>The <code>FlexEvent.REPEAT_START</code> constant defines the value of the <code>type</code> property of the event object for a <code>repeatStart</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.SHOW">
      <summary>The <code>FlexEvent.SHOW</code> constant defines the value of the <code>type</code> property of the event object for a <code>show</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.TRANSFORM_CHANGE">
      <summary>The <code>FlexEvent.TRANSFORM_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>transformChange</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.UPDATE_COMPLETE">
      <summary>The <code>FlexEvent.UPDATE_COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>updateComplete</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.URL_CHANGED">
      <summary>The <code>FlexEvent.URL_CHANGED</code> constant defines the value of the <code>type</code> property of the event object for a <code>urlChanged</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.VALID">
      <summary>The <code>FlexEvent.VALID</code> constant defines the value of the <code>type</code> property of the event object for a <code>valid</code> event.</summary>
    </member>
    <member name="F:mx.events.FlexEvent.VALUE_COMMIT">
      <summary>The <code>FlexEvent.VALUE_COMMIT</code> constant defines the value of the <code>type</code> property of the event object for a <code>valueCommit</code> event.</summary>
    </member>
    <member name="T:mx.events.FlexMouseEvent">
      <summary>The FlexMouseEvent class represents the event object passed to the event listener for Flex-specific mouse activity.</summary>
    </member>
    <member name="E:mx.events.FlexMouseEvent.mouseWheelOutside">
      <summary>The <code>FlexMouseEvent.MOUSE_WHEEL_OUTSIDE</code> constant defines the value of the <code>type</code> property of the event object for a <code>mouseWheelOutside</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>altKey</code></td> <td>Indicates whether the Alt key is down (<code>true</code>) or not (<code>false</code>).</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>buttonDown</code></td> <td>Indicates whether the main mouse button is down (<code>true</code>) or not (<code>false</code>).</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>ctrlKey</code></td> <td>Indicates whether the Control key is down (<code>true</code>) or not (<code>false</code>).</td></tr> <tr><td><code>currentTarget</code></td> <td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. For PopUpManager events, the object is the pop-up window.</td></tr> <tr><td><code>delta</code></td> <td>Indicates how many lines should be scrolled for each notch the user scrolls the mouse wheel. For PopUpManager events this value is 0.</td></tr> <tr><td><code>localX</code></td> <td>The horizontal position at which the event occurred. For PopUpManager events, the value is relative to the pop-up control.</td></tr> <tr><td><code>localY</code></td> <td>The vertical position at which the event occurred. For PopUpManager events, the value is relative to the pop-up control.</td></tr> <tr><td><code>relatedObject</code></td> <td>A reference to a display list object that is related to the event. For PopUpManager events, the object is the container over which the mouse pointer is located.</td></tr> <tr><td><code>shiftKey</code></td> <td>Indicates whether the Shift key is down (<code>true</code>) or not (<code>false</code>).</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event. For PopUpManager events, the object is the pop-up window.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.FlexMouseEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Double,System.Double,flash.display.InteractiveObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="localX">The horizontal position at which the event occurred.</param>
      <param name="localY">The vertical position at which the event occurred.</param>
      <param name="relatedObject">The display list object that is related to the event.</param>
      <param name="ctrlKey">Whether the Control key is down.</param>
      <param name="altKey">Whether the Alt key is down.</param>
      <param name="shiftKey">Whether the Shift key is down.</param>
      <param name="buttonDown">Whether the Control key is down.</param>
      <param name="delta">How many lines should be scrolled for each notch the user scrolls the mouse wheel.</param>
    </member>
    <member name="F:mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE">
      <summary>The <code>FlexMouseEvent.MOUSE_WHEEL_OUTSIDE</code> constant defines the value of the <code>type</code> property of the event object for a <code>mouseWheelOutside</code> event.</summary>
    </member>
    <member name="T:mx.events.IndexChangedEvent">
      <summary>The IndexChangedEvent class represents events that are dispatched when an index changes.</summary>
    </member>
    <member name="E:mx.events.IndexChangedEvent.childIndexChange">
      <summary>The IndexChangedEvent.CHILD_INDEX_CHANGE constant defines the value of the <code>type</code> property of the event object for a childIndexChange event, which indicates that a component's index among a container's children has changed. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>inputType</code></td><td>Indicates whether this event was caused by a mouse or keyboard interaction.</td></tr> <tr><td><code>newIndex</code></td><td>The zero-based index of the child after the change.</td></tr> <tr><td><code>oldIndex</code></td><td>The zero-based index of the child before the change.</td></tr> <tr><td><code>relatedObject</code></td><td>Contains a reference to the child object whose index changed.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>TriggerEvent</code></td><td>null</td></tr> <tr><td><code>Type</code></td><td>IndexChangedEvent.CHILD_INDEX_CHANGE</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.IndexChangedEvent.headerShift">
      <summary>The IndexChangedEvent.HEADER_SHIFT constant defines the value of the <code>type</code> property of the event object for a <code>headerShift</code> event, which indicates that a header has changed its index, as when a user drags a DataGrid column to a new position. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>inputType</code></td><td>Indicates whether this event was caused by a mouse or keyboard interaction.</td></tr> <tr><td><code>newIndex</code></td><td>The zero-based index of the header after the change.</td></tr> <tr><td><code>oldIndex</code></td><td>The zero-based index of the header before the change.</td></tr> <tr><td><code>relatedObject</code></td><td>null</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>TriggerEvent</code></td><td>The event that triggered this event.</td></tr> <tr><td><code>Type</code></td><td>IndexChangedEvent.HEADER_SHIFT</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.IndexChangedEvent.#ctor(Avm.String,System.Boolean,System.Boolean,flash.display.DisplayObject,System.Double,System.Double,flash.events.Event)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="relatedObject">The child object associated with the index change.</param>
      <param name="oldIndex">The zero-based index before the change.</param>
      <param name="newIndex">The zero-based index after the change.</param>
      <param name="triggerEvent">The event that triggered this event.</param>
    </member>
    <member name="F:mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE">
      <summary>The IndexChangedEvent.CHILD_INDEX_CHANGE constant defines the value of the <code>type</code> property of the event object for a childIndexChange event, which indicates that a component's index among a container's children has changed.</summary>
    </member>
    <member name="F:mx.events.IndexChangedEvent.HEADER_SHIFT">
      <summary>The IndexChangedEvent.HEADER_SHIFT constant defines the value of the <code>type</code> property of the event object for a <code>headerShift</code> event, which indicates that a header has changed its index, as when a user drags a DataGrid column to a new position.</summary>
    </member>
    <member name="F:mx.events.IndexChangedEvent.newIndex">
      <summary>The zero-based index after the change.</summary>
    </member>
    <member name="F:mx.events.IndexChangedEvent.oldIndex">
      <summary>The zero-based index before the change.</summary>
    </member>
    <member name="F:mx.events.IndexChangedEvent.relatedObject">
      <summary>The child object whose index changed, or the object associated with the new index.</summary>
    </member>
    <member name="F:mx.events.IndexChangedEvent.triggerEvent">
      <summary>The event that triggered this event.</summary>
    </member>
    <member name="T:mx.events.ItemClickEvent">
      <summary>Represents events that are dispatched when a navigation item on a navigator bar, such as a ButtonBar, LinkBar, or TabBar control, has been clicked.</summary>
    </member>
    <member name="M:mx.events.ItemClickEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,System.Int32,flash.display.InteractiveObject,System.Object)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="label">The label of the associated navigation item.</param>
      <param name="index">The index of the associated navigation item.</param>
      <param name="relatedObject">The child object that generated the event.</param>
      <param name="item">The item in the data provider for the associated navigation item.</param>
    </member>
    <member name="F:mx.events.ItemClickEvent.index">
      <summary>The index of the associated navigation item.</summary>
    </member>
    <member name="F:mx.events.ItemClickEvent.item">
      <summary>The item in the data provider of the associated navigation item.</summary>
    </member>
    <member name="F:mx.events.ItemClickEvent.label">
      <summary>The label of the associated navigation item.</summary>
    </member>
    <member name="F:mx.events.ItemClickEvent.relatedObject">
      <summary>The child object that generated the event; for example, the button that a user clicked in a ButtonBar control.</summary>
    </member>
    <member name="T:mx.events.ListEvent">
      <summary>The ListEvent class represents events associated with items in list-based controls such as List, Tree, Menu, and DataGrid.</summary>
    </member>
    <member name="E:mx.events.ListEvent.itemClick">
      <summary>The ListEvent.ITEM_CLICK constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemClick</code> event, which indicates that the user clicked the mouse over a visual item in the control. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer that was clicked.</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_CLICK</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ListEvent.itemDoubleClick">
      <summary>The ListEvent.ITEM_DOUBLE_CLICK constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemDoubleClick</code> event, which indicates that the user double clicked the mouse over a visual item in the control. <p>To receive itemDoubleClick events, you must set the component's <code>doubleClickEnabled</code> property to <code>true</code>.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer that was double clicked.</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_DOUBLE_CLICK</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ListEvent.itemEditBegin">
      <summary>The ListEvent.ITEM_EDIT_BEGIN constant defines the value of the <code>type</code> property of the event object for a <code>itemEditBegin</code> event, which indicates that an item is ready to be edited. <p>The default listener for this event performs the following actions:</p> <ul> <li>Creates an item editor object via a call to the <code>createItemEditor()</code> method.</li> <li>Copies the <code>data</code> property from the item to the editor. By default, the item editor object is an instance of the TextInput control. You use the <code>itemEditor</code> property of the list control to specify a custom item editor class.</li> <li>Set the <code>itemEditorInstance</code> property of the list control to reference the item editor instance.</li> </ul> <p>You can write an event listener for this event to modify the data passed to the item editor. For example, you might modify the data, its format, or other information used by the item editor.</p> <p>You can also create an event listener to specify the item editor used to edit the item. For example, you might have two different item editors. Within the event listener you can examine the data to be edited or other information, and open the appropriate item editor by doing the following:</p> <ol> <li>Call <code>preventDefault()</code> to stop Flex from calling the <code>createItemEditor()</code> method as part of the default event listener.</li> <li>Set the <code>itemEditor</code> property to the appropriate editor.</li> <li>Call the <code>createItemEditor()</code> method.</li> </ol> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer for the item that is being edited.</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_EDIT_BEGIN</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ListEvent.itemEditBeginning">
      <summary>The ListEvent.ITEM_EDIT_BEGINNING constant defines the value of the <code>type</code> property of the ListEvent object for a <code>itemEditBeginning</code> event, which indicates that the user has prepared to edit an item, for example, by releasing the mouse button over the item. <p>The default listener for this event sets the <code>List.editedItemPosition</code> property to the item that has focus, which starts the item editing session.</p> <p>You typically write your own event listener for this event to disallow editing of a specific item or items. Calling the <code>preventDefault()</code> method from within your own event listener for this event prevents the default listener from executing.</p> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer for the item that will be edited. This property is null if this event is generated by keyboard, as the item to be edited may be off-screen.</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_EDIT_BEGIN</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ListEvent.itemEditEnd">
      <summary>The ListEvent.ITEM_EDIT_END constant defines the value of the <code>type</code> property of the ListEvent object for a <code>itemEditEnd</code> event, which indicates that an edit session is ending. <p>The list components have a default handler for this event that copies the data from the item editor to the data provider of the list control. The default event listener performs the following actions:</p> <ul> <li>Uses the <code>editorDataField</code> property of the list control to determine the property of the item editor containing the new data and updates the data provider item with that new data.  Since the default item editor is the TextInput control, the default value of the <code>editorDataField</code> property is <code>"text"</code>, to specify that the <code>text</code> property of the TextInput contains the new item data.</li> <li>Calls the <code>destroyItemEditor()</code> method to close the item editor.</li> </ul> <p>You typically write an event listener for this event to perform the following actions:</p> <ul> <li>In your event listener, you can modify the data returned by the editor to the list component. For example, you can reformat the data before returning it to the list control. By default, an item editor can only return a single value. You must write an event listener for the <code>itemEditEnd</code> event if you want to return multiple values.</li> <li>In your event listener, you can examine the data entered into the item editor. If the data is incorrect, you can call the <code>preventDefault()</code> method to stop Flex from passing the new data back to the list control and from closing the editor. </li> </ul> <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer for the item that was edited.</td></tr> <tr><td><code>reason</code></td><td>A constant defining the reason for the event. The value must be a member of the <code>ListEventReson</code> class.</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_EDIT_END</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ListEvent.itemFocusIn">
      <summary>The ListEvent.ITEM_FOCUS_IN constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemFocusIn</code> event, which indicates that an item has received the focus. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item editor instance for the item that is being edited.</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_FOCUS_IN</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ListEvent.itemFocusOut">
      <summary>The ListEvent.ITEM_FOCUS_OUT constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemFocusOut</code> event, which indicates that an item has lost the focus. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item editor instance for the item that was being edited.</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_FOCUS_OUT</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ListEvent.itemRollOut">
      <summary>The ListEvent.ITEM_ROLL_OUT constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemRollOut</code> event, which indicates that the user rolled the mouse pointer out of a visual item in the control. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer that was rolled out.</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_ROLL_OUT</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ListEvent.itemRollOver">
      <summary>The ListEvent.ITEM_ROLL_OVER constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemRollOver</code> event, which indicates that the user rolled the mouse pointer over a visual item in the control. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>columnIndex</code></td><td> The zero-based index of the column associated with the event.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>itemRenderer</code></td><td>The item renderer that was rolled over.</td></tr> <tr><td><code>reason</code></td><td>null</td></tr> <tr><td><code>rowIndex</code></td><td>The zero-based index of the item associated with the event.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>Type</code></td><td>ListEvent.ITEM_ROLL_OVER</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.ListEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Int32,System.Int32,Avm.String,mx.controls.listClasses.IListItemRenderer)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="columnIndex">The zero-based index of the column that contains the renderer.</param>
      <param name="rowIndex">The zero-based index of the row that contains the renderer, or for editing events, the index of the item in the data provider that is being edited</param>
      <param name="reason">The reason for an <code>itemEditEnd</code> event.</param>
      <param name="itemRenderer">The item renderer for the data provider item.</param>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_CLICK">
      <summary>The ListEvent.ITEM_CLICK constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemClick</code> event, which indicates that the user clicked the mouse over a visual item in the control.</summary>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_DOUBLE_CLICK">
      <summary>The ListEvent.ITEM_DOUBLE_CLICK constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemDoubleClick</code> event, which indicates that the user double clicked the mouse over a visual item in the control.</summary>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_EDIT_BEGIN">
      <summary>The ListEvent.ITEM_EDIT_BEGIN constant defines the value of the <code>type</code> property of the event object for a <code>itemEditBegin</code> event, which indicates that an item is ready to be edited.</summary>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_EDIT_BEGINNING">
      <summary>The ListEvent.ITEM_EDIT_BEGINNING constant defines the value of the <code>type</code> property of the ListEvent object for a <code>itemEditBeginning</code> event, which indicates that the user has prepared to edit an item, for example, by releasing the mouse button over the item.</summary>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_EDIT_END">
      <summary>The ListEvent.ITEM_EDIT_END constant defines the value of the <code>type</code> property of the ListEvent object for a <code>itemEditEnd</code> event, which indicates that an edit session is ending.</summary>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_FOCUS_IN">
      <summary>The ListEvent.ITEM_FOCUS_IN constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemFocusIn</code> event, which indicates that an item has received the focus.</summary>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_FOCUS_OUT">
      <summary>The ListEvent.ITEM_FOCUS_OUT constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemFocusOut</code> event, which indicates that an item has lost the focus.</summary>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_ROLL_OUT">
      <summary>The ListEvent.ITEM_ROLL_OUT constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemRollOut</code> event, which indicates that the user rolled the mouse pointer out of a visual item in the control.</summary>
    </member>
    <member name="F:mx.events.ListEvent.ITEM_ROLL_OVER">
      <summary>The ListEvent.ITEM_ROLL_OVER constant defines the value of the <code>type</code> property of the ListEvent object for an <code>itemRollOver</code> event, which indicates that the user rolled the mouse pointer over a visual item in the control.</summary>
    </member>
    <member name="F:mx.events.ListEvent.columnIndex">
      <summary>The zero-based index of the column that contains the item renderer where the event occurred.</summary>
    </member>
    <member name="F:mx.events.ListEvent.itemRenderer">
      <summary>The item renderer where the event occurred.</summary>
    </member>
    <member name="F:mx.events.ListEvent.reason">
      <summary>The reason the <code>itemEditEnd</code> event was dispatched.</summary>
    </member>
    <member name="F:mx.events.ListEvent.rowIndex">
      <summary>In the zero-based index of the row that contains the item renderer where the event occured, or for editing events, the index of the item in the data provider that is being edited.</summary>
    </member>
    <member name="T:mx.events.ListEventReason">
      <summary>Constants for the values of the <code>reason</code> property of a ListEvent object where the value of the <code>type</code> property is <code>ListEvent.ITEM_EDIT_END</code>.</summary>
    </member>
    <member name="F:mx.events.ListEventReason.NEW_ROW">
      <summary>Specifies that the user moved focus to a new row in the control.</summary>
    </member>
    <member name="F:mx.events.ListEventReason.OTHER">
      <summary>Specifies that the list control lost focus, was scrolled, or is somehow in a state where editing is not allowed.</summary>
    </member>
    <member name="T:mx.events.MenuEvent">
      <summary>The MenuEvent class represents events that are associated with menu activities in controls such as Menu, MenuBar, and PopUpMenuButton.</summary>
    </member>
    <member name="E:mx.events.MenuEvent.itemClick">
      <summary>The MenuEvent.ITEM_CLICK event type constant indicates that the user selected a menu item. <p>The properties of the event object for this event type have the following values. Not all properties are meaningful for all kinds of events. See the detailed property descriptions for more information.</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>index</code></td> <td>The index in the menu of the selected menu item.</td></tr> <tr><td><code>item</code></td> <td>The item in the dataProvider that was selected.</td></tr> <tr><td><code>itemRenderer</code></td> <td>The ListItemRenderer of the selected menu item.</td></tr> <tr><td><code>label</code></td> <td>The label text of the selected menu item.</td></tr> <tr><td><code>menu</code></td> <td>The specific Menu instance associated with this event, or <code>null</code> if a MenuBar item is dispatching the event.</td></tr> <tr><td><code>menuBar</code></td> <td>The MenuBar instance that is the parent of the Menu control, or <code>null</code> if the Menu control is not parented by a MenuBar control.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>MenuEvent.ITEM_CLICK</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.MenuEvent.itemRollOut">
      <summary>The MenuEvent.ITEM_ROLL_OUT type constant indicates that the mouse pointer rolled out of a menu item. <p>The properties of the event object for this event type have the following values. Not all properties are meaningful for all kinds of events. See the detailed property descriptions for more information.</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>index</code></td> <td>The index in the menu of the menu item that was rolled out of.</td></tr> <tr><td><code>item</code></td> <td>The item in the dataProvider corresponding to the menu item that was rolled out of.</td></tr> <tr><td><code>itemRenderer</code></td> <td>The ListItemRenderer of the menu item that was rolled out of.</td></tr> <tr><td><code>label</code></td> <td>The label text of the menu item that was rolled out of.</td></tr> <tr><td><code>menu</code></td> <td>The specific Menu instance associated with this event, or <code>null</code> if a MenuBar item is dispatching the event.</td></tr> <tr><td><code>menuBar</code></td> <td>The MenuBar instance that is the parent of the Menu control, or <code>null</code> if the Menu control is not parented by a MenuBar control.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>MenuEvent.ITEM_ROLL_OUT</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.MenuEvent.itemRollOver">
      <summary>The MenuEvent.ITEM_ROLL_OVER type constant indicates that the mouse pointer rolled over a menu item. <p>The properties of the event object for this event type have the following values. Not all properties are meaningful for all kinds of events. See the detailed property descriptions for more information.</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>index</code></td> <td>The index in the menu of the menu item that was rolled over.</td></tr> <tr><td><code>item</code></td> <td>The item in the dataProvider associated with the rolled over menu item.</td></tr> <tr><td><code>itemRenderer</code></td> <td>The ListItemRenderer of the menu item that was rolled over.</td></tr> <tr><td><code>label</code></td> <td>The label text of the menu item that was rolled over.</td></tr> <tr><td><code>menu</code></td> <td>The specific Menu instance associated with this event, or <code>null</code> if a MenuBar item is dispatching the event.</td></tr> <tr><td><code>menuBar</code></td> <td>The MenuBar instance that is the parent of the Menu control, or <code>null</code> if the Menu control is not parented by a MenuBar control.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>MenuEvent.ITEM_ROLL_OVER</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.MenuEvent.menuHide">
      <summary>The MenuEvent.MENU_HIDE event type constant indicates that a menu or submenu closed. <p>The properties of the event object for this event type have the following values. Not all properties are meaningful for all kinds of events. See the detailed property descriptions for more information.</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>index</code></td> <td>-1. This property is not set for this type of event. </td></tr> <tr><td><code>item</code></td> <td>null. This property is not set for this type of event.</td></tr> <tr><td><code>itemRenderer</code></td> <td>null. This property is not set for this type of event.</td></tr> <tr><td><code>label</code></td> <td>null. This property is not set for this type of event.</td></tr> <tr><td><code>menu</code></td> <td>The specific Menu instance associated with this event, or <code>null</code> if a MenuBar item is dispatching the event.</td></tr> <tr><td><code>menuBar</code></td> <td>The MenuBar instance that is the parent of the Menu control, or <code>null</code> if the Menu control is not parented by a MenuBar control.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>MenuEvent.MENU_HIDE</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.MenuEvent.menuShow">
      <summary>The MenuEvent.MENU_SHOW type constant indicates that the mouse pointer rolled a menu or submenu opened. <p>The properties of the event object for this event type have the following values. Not all properties are meaningful for all kinds of events. See the detailed property descriptions for more information.</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>index</code></td> <td>-1. This property is not set for this type of event.</td></tr> <tr><td><code>item</code></td> <td>null. This property is not set for this type of event.</td></tr> <tr><td><code>itemRenderer</code></td> <td>null. This property is not set for this type of event.</td></tr> <tr><td><code>label</code></td> <td><code>null. This property is not set for this type of event.</code></td></tr> <tr><td><code>menu</code></td> <td>The specific Menu instance associated with this event, or <code>null</code> if a MenuBar item is dispatching the event.</td></tr> <tr><td><code>menuBar</code></td> <td>The MenuBar instance that is the parent of the Menu control, or <code>null</code> if the Menu control is not parented by a MenuBar control.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>MenuEvent.MENU_SHOW</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.MenuEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.controls.MenuBar,mx.controls.Menu,System.Object,mx.controls.listClasses.IListItemRenderer,Avm.String,System.Int32)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="menuBar">The MenuBar instance that is the parent of the selected Menu control, or null when the target Menu control is not parented by a MenuBar control.</param>
      <param name="menu">The specific Menu instance associated with the event, such as the menu or submenu that was hidden or opened. This property is null if a MenuBar item dispatches the event.</param>
      <param name="item">The item in the dataProvider of the associated menu item.</param>
      <param name="itemRenderer">The ListItemRenderer of the associated menu item.</param>
      <param name="label">The label text of the associated menu item.</param>
      <param name="index">The index in the menu of the associated menu item.</param>
    </member>
    <member name="F:mx.events.MenuEvent.ITEM_CLICK">
      <summary>The MenuEvent.ITEM_CLICK event type constant indicates that the user selected a menu item.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.ITEM_ROLL_OUT">
      <summary>The MenuEvent.ITEM_ROLL_OUT type constant indicates that the mouse pointer rolled out of a menu item.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.ITEM_ROLL_OVER">
      <summary>The MenuEvent.ITEM_ROLL_OVER type constant indicates that the mouse pointer rolled over a menu item.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.MENU_HIDE">
      <summary>The MenuEvent.MENU_HIDE event type constant indicates that a menu or submenu closed.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.MENU_SHOW">
      <summary>The MenuEvent.MENU_SHOW type constant indicates that the mouse pointer rolled a menu or submenu opened.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.index">
      <summary>The index of the associated menu item within its parent menu or submenu.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.item">
      <summary>The specific item in the dataProvider.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.label">
      <summary>The label text of the associated menu item.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.menu">
      <summary>The specific Menu instance associated with the event, such as the menu or submenu that was hidden or opened.</summary>
    </member>
    <member name="F:mx.events.MenuEvent.menuBar">
      <summary>The MenuBar instance that is the parent of the selected Menu control, or null when the target Menu control is not parented by a MenuBar control.</summary>
    </member>
    <member name="T:mx.events.MetadataEvent">
      <summary>The MetadataEvent class defines the event type for metadata and cue point events.</summary>
    </member>
    <member name="E:mx.events.MetadataEvent.actionscript">
      <summary>The MetadataEvent.ACTION_SCRIPT constant defines the value of the <code>type</code> property of the event object for a <code>actionscript</code> event. These cue points are not embedded in the FLV file but defined using ActionScript at run time. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>info</code></td><td>The index of the cue point in the VideoDisplay.cuePoint Array.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.MetadataEvent.cuePoint">
      <summary>The MetadataEvent.CUE_POINT constant defines the value of the <code>type</code> property of the event object for a <code>cuePoint</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>info</code></td><td>The index of the cue point in the VideoDisplay.cuePoint Array.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.MetadataEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Object)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="info">For events off type <code>ACTION_SCRIPT</code> and <code>CUE_POINT</code>, the index of the cue point in the <code>VideoDisplay.cuePoint</code> Array. For events off type <code>METADATA_RECEIVED</code>, an object describing the FLV  file,  including any cue points, which is the same information as the <code>VideoDisplay.metadata</code> property.</param>
    </member>
    <member name="F:mx.events.MetadataEvent.ACTION_SCRIPT">
      <summary>The MetadataEvent.ACTION_SCRIPT constant defines the value of the <code>type</code> property of the event object for a <code>actionscript</code> event.</summary>
    </member>
    <member name="F:mx.events.MetadataEvent.CUE_POINT">
      <summary>The MetadataEvent.CUE_POINT constant defines the value of the <code>type</code> property of the event object for a <code>cuePoint</code> event.</summary>
    </member>
    <member name="F:mx.events.MetadataEvent.info">
      <summary>For events off type <code>ACTION_SCRIPT</code> and <code>CUE_POINT</code>, the index of the cue point in the <code>VideoDisplay.cuePoint</code> Array.</summary>
    </member>
    <member name="T:mx.events.ModuleEvent">
      <summary>The ModuleEvent class represents the event object passed to the event listener for events related to dynamically-loaded modules.</summary>
    </member>
    <member name="E:mx.events.ModuleEvent.progress">
      <summary>Dispatched when the module is in the process of downloading. This module is dispatched at regular intervals during the download process. The <code>ModuleEvent.PROGRESS</code> constant defines the value of the <code>type</code> property of the event object for a <code>progress</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>bytesLoaded</code></td><td>The number of bytes loaded.</td></tr> <tr><td><code>bytesTotal</code></td><td>The total number of bytes to load.</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td><td>Empty</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ModuleEvent.ready">
      <summary>Dispatched when the module has finished downloading. The <code>ModuleEvent.READY</code> constant defines the value of the <code>type</code> property of the event object for a <code>complete</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>bytesLoaded</code></td><td>The number of bytes loaded.</td></tr> <tr><td><code>bytesTotal</code></td><td>The total number of bytes to load.</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td><td>Empty</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ModuleEvent.setup">
      <summary>Dispatched when enough of a module has been downloaded that you can get information about the module. You do this by calling the <code>IFlexModuleFactory.info()</code> method on the module. The <code>ModuleEvent.SETUP</code> constant defines the value of the <code>type</code> property of the event object for a <code>setup</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>bytesLoaded</code></td><td>Empty</td></tr> <tr><td><code>bytesTotal</code></td><td>Empty</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td><td>An error message.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ModuleEvent.unload">
      <summary>Dispatched when the module is unloaded. The <code>ModuleEvent.UNLOAD</code> constant defines the value of the <code>type</code> property of the event object for an <code>unload</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>bytesLoaded</code></td><td>Empty</td></tr> <tr><td><code>bytesTotal</code></td><td>Empty</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td><td>An error message.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.ModuleEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.UInt32,System.UInt32,Avm.String,mx.modules.IModuleInfo)">
      <summary>Constructor.</summary>
      <param name="type">The type of event. Possible values are: <ul> <li>"progress" (<code>ModuleEvent.PROGRESS</code>);</li> <li>"ready" (<code>ModuleEvent.READY</code>);</li> <li>"setup" (<code>ModuleEvent.SETUP</code>);</li> <li>"error" (<code>ModuleEvent.ERROR</code>);</li> <li>"unload" (<code>ModuleEvent.UNLOAD</code>);</li> </ul></param>
      <param name="bubbles">Determines whether the Event object participates in the bubbling stage of the event flow.</param>
      <param name="cancelable">Determines whether the Event object can be cancelled during event propagation.</param>
      <param name="bytesLoaded">The number of bytes loaded at the time the listener processes the event.</param>
      <param name="bytesTotal">The total number of bytes that will be loaded if the loading process succeeds.</param>
      <param name="errorText">The error message when the event type is <code>ModuleEvent.ERROR</code>.</param>
      <param name="module" />
    </member>
    <member name="F:mx.events.ModuleEvent.PROGRESS">
      <summary>Dispatched when the module is in the process of downloading.</summary>
    </member>
    <member name="F:mx.events.ModuleEvent.READY">
      <summary>Dispatched when the module has finished downloading.</summary>
    </member>
    <member name="F:mx.events.ModuleEvent.SETUP">
      <summary>Dispatched when enough of a module has been downloaded that you can get information about the module.</summary>
    </member>
    <member name="F:mx.events.ModuleEvent.UNLOAD">
      <summary>Dispatched when the module is unloaded.</summary>
    </member>
    <member name="F:mx.events.ModuleEvent.errorText">
      <summary>The error message if the type is <code>ModuleEvent.ERROR</code>; otherwise, it is <code>null</code>.</summary>
    </member>
    <member name="P:mx.events.ModuleEvent.module">
      <summary>The <code>target</code>, which is an instance of an interface for a particular module.</summary>
    </member>
    <member name="T:mx.events.MoveEvent">
      <summary>Represents event objects that are dispatched when a Flex component moves.</summary>
    </member>
    <member name="M:mx.events.MoveEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Double,System.Double)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="oldX">The previous x coordinate of the object, in pixels.</param>
      <param name="oldY">The previous y coordinate of the object, in pixels.</param>
    </member>
    <member name="F:mx.events.MoveEvent.oldX">
      <summary>The previous <code>x</code> coordinate of the object, in pixels.</summary>
    </member>
    <member name="F:mx.events.MoveEvent.oldY">
      <summary>The previous <code>y</code> coordinate of the object, in pixels.</summary>
    </member>
    <member name="T:mx.events.NumericStepperEvent">
      <summary>Represents events that are specific to the NumericStepper control.</summary>
    </member>
    <member name="M:mx.events.NumericStepperEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Double,flash.events.Event)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="value">The value of the NumericStepper control when the event was dispatched.</param>
      <param name="triggerEvent" />
    </member>
    <member name="F:mx.events.NumericStepperEvent.triggerEvent">
      <summary>If the value is changed in response to a user action, this property contains a value indicating the type of input action.</summary>
    </member>
    <member name="F:mx.events.NumericStepperEvent.value">
      <summary>The value of the NumericStepper control when the event was dispatched.</summary>
    </member>
    <member name="T:mx.events.PropertyChangeEvent">
      <summary>The PropertyChangeEvent class represents the event object passed to the event listener when one of the properties of an object has changed, and provides information about the change.</summary>
    </member>
    <member name="M:mx.events.PropertyChangeEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,System.Object,System.Object,System.Object,System.Object)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that triggered the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="kind">Specifies the kind of change. The possible values are <code>PropertyChangeEventKind.UPDATE</code>, <code>PropertyChangeEventKind.DELETE</code>, and <code>null</code>.</param>
      <param name="property">A String, QName, or int specifying the property that changed.</param>
      <param name="oldValue">The value of the property before the change.</param>
      <param name="newValue">The value of the property after the change.</param>
      <param name="source">The object that the change occured on.</param>
    </member>
    <member name="M:mx.events.PropertyChangeEvent.createUpdateEvent(System.Object,System.Object,System.Object,System.Object)">
      <summary>Returns a new PropertyChangeEvent of kind <code>PropertyChangeEventKind.UPDATE</code> with the specified properties.</summary>
      <param name="source">The object where the change occured.</param>
      <param name="property">A String, QName, or int specifying the property that changed,</param>
      <param name="oldValue">The value of the property before the change.</param>
      <param name="newValue">The value of the property after the change.</param>
    </member>
    <member name="F:mx.events.PropertyChangeEvent.kind">
      <summary>Specifies the kind of change.</summary>
    </member>
    <member name="F:mx.events.PropertyChangeEvent.newValue">
      <summary>The value of the property after the change.</summary>
    </member>
    <member name="F:mx.events.PropertyChangeEvent.oldValue">
      <summary>The value of the property before the change.</summary>
    </member>
    <member name="F:mx.events.PropertyChangeEvent.property">
      <summary>A String, QName, or int specifying the property that changed.</summary>
    </member>
    <member name="F:mx.events.PropertyChangeEvent.source">
      <summary>The object that the change occured on.</summary>
    </member>
    <member name="T:mx.events.PropertyChangeEventKind">
      <summary>The PropertyChangeEventKind class defines the constant values for the <code>kind</code> property of the PropertyChangeEvent class.</summary>
    </member>
    <member name="F:mx.events.PropertyChangeEventKind.DELETE">
      <summary>Indicates that the property was deleted from the object.</summary>
    </member>
    <member name="T:mx.events.ResizeEvent">
      <summary>Represents event objects that are dispatched when the size of a Flex component changes.</summary>
    </member>
    <member name="M:mx.events.ResizeEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Double,System.Double)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="oldWidth">The previous width of the object, in pixels.</param>
      <param name="oldHeight">The previous height of the object, in pixels.</param>
    </member>
    <member name="F:mx.events.ResizeEvent.oldHeight">
      <summary>The previous <code>height</code> of the object, in pixels.</summary>
    </member>
    <member name="F:mx.events.ResizeEvent.oldWidth">
      <summary>The previous <code>width</code> of the object, in pixels.</summary>
    </member>
    <member name="T:mx.events.ResourceEvent">
      <summary>The ResourceEvent class represents an Event object that is dispatched when the ResourceManager loads the resource bundles in a resource module by calling the <code>loadResourceModule()</code> method.</summary>
    </member>
    <member name="E:mx.events.ResourceEvent.error">
      <summary>Dispatched when there is an error loading the resource module SWF file. The ResourceEvent.ERROR constant defines the value of the <code>type</code> property of the event object for a <code>error</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td><code>false</code></td></tr> <tr><td><code>bytesLoaded</code></td><td>Empty</td></tr> <tr><td><code>bytesTotal</code></td><td>Empty</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The object that defines the event listener that handles the event. For example, if you use the <code>myButton.addEventListener()</code> method to register an event listener, <code>myButton</code> is the value of <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td>An error message.<td></td></tr> <tr><td><code>target</code></td><td>The object that dispatched the event; it is not always the object that is listening for the event. Use the <code>currentTarget</code> property to always access the object that listens for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ResourceEvent.progress">
      <summary>Dispatched when the resource module SWF file is loading. The ResourceEvent.PROGRESS constant defines the value of the <code>type</code> property of the event object for a <code>progress</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td><code>false</code></td></tr> <tr><td><code>bytesLoaded</code></td><td>The number of bytes loaded.</td></tr> <tr><td><code>bytesTotal</code></td><td>The total number of bytes to load.</td></tr> <tr><td><code>cancelable</code></td><td><code>false</code></td></tr> <tr><td><code>currentTarget</code></td><td>The object that defines the event listener that handles the event. For example, if you use the <code>myButton.addEventListener()</code> method to register an event listener, <code>myButton</code> is the value of <code>currentTarget</code>.</td></tr> <tr><td><code>errorText</code></td>Empty<td></td></tr> <tr><td><code>target</code></td><td>The object that dispatched the event; it is not always the object that listens for the event. Use the <code>currentTarget</code> property to always access the object that is listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.ResourceEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.UInt32,System.UInt32,Avm.String)">
      <summary>Constructor.</summary>
      <param name="type">The value of the <code>type</code> property of the event object. Possible values are: <ul> <li><code>"progress"</code> (<code>ResourceEvent.PROGRESS</code>)</li> <li><code>"complete"</code> (<code>ResourceEvent.COMPLETE</code>)</li> <li><code>"error"</code> (<code>ResourceEvent.ERROR</code>)</li> </ul></param>
      <param name="bubbles">Determines whether the Event object participates in the bubbling stage of the event flow.</param>
      <param name="cancelable">Determines whether the Event object can be cancelled.</param>
      <param name="bytesLoaded">The number of bytes loaded at the time the listener processes the event.</param>
      <param name="bytesTotal">The total number of bytes that will ultimately be loaded if the loading process succeeds.</param>
      <param name="errorText">The error message of the error when <code>type</code> is <code>ResourceEvent.ERROR</code>.</param>
    </member>
    <member name="F:mx.events.ResourceEvent.ERROR">
      <summary>Dispatched when there is an error loading the resource module SWF file.</summary>
    </member>
    <member name="F:mx.events.ResourceEvent.PROGRESS">
      <summary>Dispatched when the resource module SWF file is loading.</summary>
    </member>
    <member name="F:mx.events.ResourceEvent.errorText">
      <summary>The error message if the <code>type</code> is <code>ERROR</code>; otherwise, it is <code>null</code>.</summary>
    </member>
    <member name="T:mx.events.RSLEvent">
      <summary>The RSLEvent class represents an event object used by the DownloadProgressBar class when an RSL is being downloaded by the Preloader class.</summary>
    </member>
    <member name="E:mx.events.RSLEvent.rslError">
      <summary>Dispatched when there is an error downloading the RSL. The <code>RSLEvent.RSL_ERROR</code> constant defines the value of the <code>type</code> property of the event object for a <code>rslError</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>bytesLoaded</code></td><td>Empty</td></tr> <tr><td><code>bytesTotal</code></td><td>Empty</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td>An error message.<td></td></tr> <tr><td><code>rslIndex</code></td><td>The index number of the RSL currently being downloaded. </td></tr> <tr><td><code>rslTotal</code></td><td>The total number of RSLs being downloaded. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>url</code></td><td>The URLRequest object that represents the location of the RSL being downloaded.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.RSLEvent.rslProgress">
      <summary>Dispatched when the RSL is downloading. The <code>RSLEvent.RSL_PROGRESS</code> constant defines the value of the <code>type</code> property of the event object for a <code>rslProgress</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>bytesLoaded</code></td><td>The number of bytes loaded.</td></tr> <tr><td><code>bytesTotal</code></td><td>The total number of bytes to load.</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td>Empty<td></td></tr> <tr><td><code>rslIndex</code></td><td>The index number of the RSL currently being downloaded. </td></tr> <tr><td><code>rslTotal</code></td><td>The total number of RSLs being downloaded. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>url</code></td><td>The URLRequest object that represents the location of the RSL being downloaded.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.RSLEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,flash.net.URLRequest,Avm.String)">
      <summary>Constructor.</summary>
      <param name="type">The type of the event. Possible values are: <ul> <li>"rslProgress" (<code>RSLEvent.RSL_PROGRESS</code>);</li> <li>"rslComplete" (<code>RSLEvent.RSL_COMPLETE</code>);</li> <li>"rslError" (<code>RSLEvent.RSL_ERROR</code>);</li> </ul></param>
      <param name="bubbles">Determines whether the Event object participates in the bubbling stage of the event flow.</param>
      <param name="cancelable">Determines whether the Event object can be cancelled.</param>
      <param name="bytesLoaded">The number of bytes loaded at the time the listener processes the event.</param>
      <param name="bytesTotal">The total number of bytes that will ultimately be loaded if the loading process succeeds.</param>
      <param name="rslIndex">The index number of the RSL relative to the total. This should be a value between 0 and <code>total - 1</code>.</param>
      <param name="rslTotal">The total number of RSLs being loaded.</param>
      <param name="url">The location of the RSL.</param>
      <param name="errorText">The error message of the error when type is RSLEvent.RSL_ERROR.</param>
    </member>
    <member name="F:mx.events.RSLEvent.RSL_ERROR">
      <summary>Dispatched when there is an error downloading the RSL.</summary>
    </member>
    <member name="F:mx.events.RSLEvent.RSL_PROGRESS">
      <summary>Dispatched when the RSL is downloading.</summary>
    </member>
    <member name="F:mx.events.RSLEvent.errorText">
      <summary>The error message if the type is RSL_ERROR; otherwise, it is null;</summary>
    </member>
    <member name="F:mx.events.RSLEvent.rslIndex">
      <summary>The index number of the RSL currently being downloaded.</summary>
    </member>
    <member name="F:mx.events.RSLEvent.rslTotal">
      <summary>The total number of RSLs being downloaded by the preloader</summary>
    </member>
    <member name="F:mx.events.RSLEvent.url">
      <summary>The URLRequest object that represents the location of the RSL being downloaded.</summary>
    </member>
    <member name="T:mx.events.ScrollEvent">
      <summary>Represents events that are dispatched by the ScrollBar class.</summary>
    </member>
    <member name="M:mx.events.ScrollEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,System.Double,Avm.String,System.Double)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Provides the specifics of the type of scroll activity. Constants for the possible values are provided in the ScrollEventDetail class.</param>
      <param name="detail">The new scroll position.</param>
      <param name="position">The scroll direction, either <code>ScrollEventDirection.HORIZONTAL</code> or <code>ScrollEventDirection.VERTICAL</code>.</param>
      <param name="direction">The change in scroll position, expressed in pixels.</param>
      <param name="delta" />
    </member>
    <member name="F:mx.events.ScrollEvent.delta">
      <summary>The change in the scroll position value that resulted from the scroll.</summary>
    </member>
    <member name="F:mx.events.ScrollEvent.detail">
      <summary>Provides the details of the scroll activity.</summary>
    </member>
    <member name="F:mx.events.ScrollEvent.direction">
      <summary>The direction of motion.</summary>
    </member>
    <member name="F:mx.events.ScrollEvent.position">
      <summary>The new scroll position.</summary>
    </member>
    <member name="T:mx.events.ScrollEventDetail">
      <summary>Constants for the values of the <code>detail</code> property of a ScrollEvent.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.AT_LEFT">
      <summary>Indicates that the scroll bar is at the left of its scrolling range.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.AT_RIGHT">
      <summary>Indicates that the scroll bar is at the right of its scrolling range.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.AT_TOP">
      <summary>Indicates that the scroll bar is at the top of its scrolling range.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.LINE_DOWN">
      <summary>Indicates that the scroll bar has moved down by one line.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.LINE_LEFT">
      <summary>Indicates that the scroll bar has moved left by one line.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.LINE_RIGHT">
      <summary>Indicates that the scroll bar has moved right by one line.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.LINE_UP">
      <summary>Indicates that the scroll bar has moved up by one line.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.PAGE_DOWN">
      <summary>Indicates that the scroll bar has moved down by one page.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.PAGE_LEFT">
      <summary>Indicates that the scroll bar has moved left by one page.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.PAGE_RIGHT">
      <summary>Indicates that the scroll bar has moved right by one page.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.PAGE_UP">
      <summary>Indicates that the scroll bar has moved up by one page.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.THUMB_POSITION">
      <summary>Indicates that the scroll bar thumb has stopped moving.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDetail.THUMB_TRACK">
      <summary>Indicates that the scroll bar thumb is moving.</summary>
    </member>
    <member name="T:mx.events.ScrollEventDirection">
      <summary>Constants for the values of the <code>direction</code> property of a ScrollEvent.</summary>
    </member>
    <member name="F:mx.events.ScrollEventDirection.VERTICAL">
      <summary>The user scrolled vertically.</summary>
    </member>
    <member name="T:mx.events.SliderEvent">
      <summary>The SliderEvent class represents the event object passed to the event listener for the <code>change</code>, <code>thumbDrag</code>, <code>thumbPress</code>, and <code>thumbRelease</code> events of the HSlider and VSlider classes.</summary>
    </member>
    <member name="E:mx.events.SliderEvent.thumbDrag">
      <summary>The <code>SliderEvent.THUMB_DRAG</code> constant defines the value of the <code>type</code> property of the event object for a <code>thumbDrag</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>clickTarget</code></td><td>Specifies whether the slider track or a slider thumb was pressed.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>keyCode</code></td><td>If the event was triggered by a key press, the keycode for the key.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>thumbIndex</code></td><td>The zero-based index of the thumb whose position has changed.</td></tr> <tr><td><code>triggerEvent</code></td><td>Contains a value indicating the type of input action. The value is either <code>InteractionInputType.MOUSE</code> or <code>InteractionInputType.KEYBOARD</code>.</td></tr> <tr><td><code>value</code></td><td>The new value of the slider.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.SliderEvent.thumbPress">
      <summary>The <code>SliderEvent.THUMB_PRESS</code> constant defines the value of the <code>type</code> property of the event object for a <code>thumbPress</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>clickTarget</code></td><td>Specifies whether the slider track or a slider thumb was pressed.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>keyCode</code></td><td>If the event was triggered by a key press, the keycode for the key.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>thumbIndex</code></td><td>The zero-based index of the thumb whose position has changed.</td></tr> <tr><td><code>triggerEvent</code></td><td>Contains a value indicating the type of input action. The value is either <code>InteractionInputType.MOUSE</code> or <code>InteractionInputType.KEYBOARD</code>.</td></tr> <tr><td><code>value</code></td><td>The new value of the slider.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.SliderEvent.thumbRelease">
      <summary>The <code>SliderEvent.THUMB_RELEASE</code> constant defines the value of the <code>type</code> property of the event object for a <code>thumbRelease</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>clickTarget</code></td><td>Specifies whether the slider track or a slider thumb was pressed.</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>keyCode</code></td><td>If the event was triggered by a key press, the keycode for the key.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>thumbIndex</code></td><td>The zero-based index of the thumb whose position has changed.</td></tr> <tr><td><code>triggerEvent</code></td><td>Contains a value indicating the type of input action. The value is either <code>InteractionInputType.MOUSE</code> or <code>InteractionInputType.KEYBOARD</code>.</td></tr> <tr><td><code>value</code></td><td>The new value of the slider.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.SliderEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Int32,System.Double,flash.events.Event,Avm.String,System.Int32)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="thumbIndex">The zero-based index of the thumb whose position has changed.</param>
      <param name="value">The type of input action. The value is either <code>InteractionInputType.MOUSE</code> or <code>InteractionInputType.KEYBOARD</code>.</param>
      <param name="triggerEvent">Whether the slider track or a slider thumb was pressed.</param>
      <param name="clickTarget">If the event was triggered by a key press, the keycode for the key.</param>
      <param name="keyCode" />
    </member>
    <member name="F:mx.events.SliderEvent.THUMB_DRAG">
      <summary>The <code>SliderEvent.THUMB_DRAG</code> constant defines the value of the <code>type</code> property of the event object for a <code>thumbDrag</code> event.</summary>
    </member>
    <member name="F:mx.events.SliderEvent.THUMB_PRESS">
      <summary>The <code>SliderEvent.THUMB_PRESS</code> constant defines the value of the <code>type</code> property of the event object for a <code>thumbPress</code> event.</summary>
    </member>
    <member name="F:mx.events.SliderEvent.THUMB_RELEASE">
      <summary>The <code>SliderEvent.THUMB_RELEASE</code> constant defines the value of the <code>type</code> property of the event object for a <code>thumbRelease</code> event.</summary>
    </member>
    <member name="F:mx.events.SliderEvent.clickTarget">
      <summary>Specifies whether the slider track or a slider thumb was pressed.</summary>
    </member>
    <member name="F:mx.events.SliderEvent.keyCode">
      <summary>If the event was triggered by a key press, the keycode for the key.</summary>
    </member>
    <member name="F:mx.events.SliderEvent.thumbIndex">
      <summary>The zero-based index of the thumb whose position has changed.</summary>
    </member>
    <member name="F:mx.events.SliderEvent.triggerEvent">
      <summary>Indicates the type of input action.</summary>
    </member>
    <member name="F:mx.events.SliderEvent.value">
      <summary>The new value of the slider.</summary>
    </member>
    <member name="T:mx.events.SliderEventClickTarget">
      <summary>The SliderEventClickTarget class defines the constants for the values of the <code>clickTarget</code> property of the SliderEvent class.</summary>
    </member>
    <member name="F:mx.events.SliderEventClickTarget.THUMB">
      <summary>Specifies that the Slider's thumb was clicked.</summary>
    </member>
    <member name="T:mx.events.StateChangeEvent">
      <summary>The StateChangeEvent class represents an event that is dispatched when the <code>currentState</code> property of a component changes.</summary>
    </member>
    <member name="E:mx.events.StateChangeEvent.currentStateChanging">
      <summary>The StateChangeEvent.CURRENT_STATE_CHANGING constant defines the value of the <code>type</code> property of the event that is dispatched when the view state is about to change. The value of this constant is "currentStateChanging". <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>newState</code></td><td>The name of the view state that is being entered.</td></tr> <tr><td><code>oldState</code></td><td>The name of the view state that is being exited.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>StateChangeEvent.CURRENT_STATE_CHANGING</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.StateChangeEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,Avm.String)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="oldState">The name of the view state the component is exiting.</param>
      <param name="newState">The name of the view state the component is entering.</param>
    </member>
    <member name="F:mx.events.StateChangeEvent.CURRENT_STATE_CHANGING">
      <summary>The StateChangeEvent.CURRENT_STATE_CHANGING constant defines the value of the <code>type</code> property of the event that is dispatched when the view state is about to change.</summary>
    </member>
    <member name="F:mx.events.StateChangeEvent.newState">
      <summary>The name of the view state that the component is entering.</summary>
    </member>
    <member name="F:mx.events.StateChangeEvent.oldState">
      <summary>The name of the view state that the component is exiting.</summary>
    </member>
    <member name="T:mx.events.StyleEvent">
      <summary>The StyleEvent class represents an event object used by the StyleManager class when a style SWF is being downloaded.</summary>
    </member>
    <member name="E:mx.events.StyleEvent.styleError">
      <summary>Dispatched when there is an error downloading the style SWF. The <code>StyleEvent.ERROR</code> constant defines the value of the <code>type</code> property of the event object for a <code>styleError</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>bytesLoaded</code></td><td>Empty</td></tr> <tr><td><code>bytesTotal</code></td><td>Empty</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td>An error message.<td></td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.StyleEvent.styleProgress">
      <summary>Dispatched when the style SWF is downloading. The <code>StyleEvent.PROGRESS</code> constant defines the value of the <code>type</code> property of the event object for a <code>styleProgress</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>bytesLoaded</code></td><td>The number of bytes loaded.</td></tr> <tr><td><code>bytesTotal</code></td><td>The total number of bytes to load.</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>errorText</code></td>Empty<td></td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.StyleEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.UInt32,System.UInt32,Avm.String)">
      <summary>Constructor.</summary>
      <param name="type">The type of the event. Possible values are: <ul> <li>"progress" (<code>StyleEvent.PROGRESS</code>);</li> <li>"complete" (<code>StyleEvent.COMPLETE</code>);</li> <li>"error" (<code>StyleEvent.ERROR</code>);</li> </ul></param>
      <param name="bubbles">Determines whether the Event object participates in the bubbling stage of the event flow.</param>
      <param name="cancelable">Determines whether the Event object can be cancelled.</param>
      <param name="bytesLoaded">The number of bytes loaded at the time the listener processes the event.</param>
      <param name="bytesTotal">The total number of bytes that will ultimately be loaded if the loading process succeeds.</param>
      <param name="errorText">The error message of the error when type is StyleEvent.ERROR.</param>
    </member>
    <member name="F:mx.events.StyleEvent.ERROR">
      <summary>Dispatched when there is an error downloading the style SWF.</summary>
    </member>
    <member name="F:mx.events.StyleEvent.PROGRESS">
      <summary>Dispatched when the style SWF is downloading.</summary>
    </member>
    <member name="F:mx.events.StyleEvent.errorText">
      <summary>The error message if the <code>type</code> is <code>ERROR</code>; otherwise, it is <code>null</code>.</summary>
    </member>
    <member name="T:mx.events.ToolTipEvent">
      <summary>The ToolTipEvent class represents ToolTip events, which are generated by the ToolTipManager class.</summary>
    </member>
    <member name="E:mx.events.ToolTipEvent.toolTipEnd">
      <summary>The <code>ToolTipEvent.TOOL_TIP_END</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipEnd</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>tooltip</code></td><td>The ToolTip object to which this event applies.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ToolTipEvent.toolTipHide">
      <summary>The <code>ToolTipEvent.TOOL_TIP_HIDE</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipHide</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>tooltip</code></td><td>The ToolTip object to which this event applies.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ToolTipEvent.toolTipShow">
      <summary>The <code>ToolTipEvent.TOOL_TIP_SHOW</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipShow</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>tooltip</code></td><td>The ToolTip object to which this event applies.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ToolTipEvent.toolTipShown">
      <summary>The <code>ToolTipEvent.TOOL_TIP_SHOWN</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipShown</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>tooltip</code></td><td>The ToolTip object to which this event applies.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.ToolTipEvent.toolTipStart">
      <summary>The <code>ToolTipEvent.TOOL_TIP_START</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipStart</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>tooltip</code></td><td>The ToolTip object to which this event applies.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.ToolTipEvent.#ctor(Avm.String,System.Boolean,System.Boolean,mx.core.IToolTip)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="toolTip">The ToolTip object to which this event applies.</param>
    </member>
    <member name="F:mx.events.ToolTipEvent.TOOL_TIP_END">
      <summary>The <code>ToolTipEvent.TOOL_TIP_END</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipEnd</code> event.</summary>
    </member>
    <member name="F:mx.events.ToolTipEvent.TOOL_TIP_HIDE">
      <summary>The <code>ToolTipEvent.TOOL_TIP_HIDE</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipHide</code> event.</summary>
    </member>
    <member name="F:mx.events.ToolTipEvent.TOOL_TIP_SHOW">
      <summary>The <code>ToolTipEvent.TOOL_TIP_SHOW</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipShow</code> event.</summary>
    </member>
    <member name="F:mx.events.ToolTipEvent.TOOL_TIP_SHOWN">
      <summary>The <code>ToolTipEvent.TOOL_TIP_SHOWN</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipShown</code> event.</summary>
    </member>
    <member name="F:mx.events.ToolTipEvent.TOOL_TIP_START">
      <summary>The <code>ToolTipEvent.TOOL_TIP_START</code> constant defines the value of the <code>type</code> property of the event object for a <code>toolTipStart</code> event.</summary>
    </member>
    <member name="F:mx.events.ToolTipEvent.toolTip">
      <summary>The ToolTip object to which this event applies.</summary>
    </member>
    <member name="T:mx.events.TreeEvent">
      <summary>The TreeEvent class represents the event object passed to the event listener for events that are associated with activities in tree, such as when a tree branch opens or closes.</summary>
    </member>
    <member name="E:mx.events.TreeEvent.itemOpen">
      <summary>The TreeEvent.ITEM_OPEN event type constant indicates that a tree branch opened or expanded. <p>The properties of the event object for this event type have the following values. Not all properties are meaningful for all kinds of events. See the detailed property descriptions for more information.</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>itemRenderer</code></td> <td>The ListItemRenderer for the item (node) that opened</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>triggerEvent</code></td> <td>If the item (node) opened in response to a user action, identifies it as a keyboard action or a mouse action.</td></tr> <tr><td><code>item</code></td><td>the Tree node that opened.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>type</code></td><td>TreeEvent.ITEM_OPEN</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.TreeEvent.itemOpening">
      <summary>The TreeEvent.ITEM_OPENING event type constant is dispatched immediately before a tree opens or closes. <p>The properties of the event object for this event type have the following values. Not all properties are meaningful for all kinds of events. See the detailed property descriptions for more information.</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>animate</code></td><td>Whether to animate the opening or closing operation.</td></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>true</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>.</td></tr> <tr><td><code>dispatchEvent</code></td><td>Whether to dispatch an <code>ITEM_OPEN</code> or <code>ITEM_CLOSE</code> event after the open or close animation is complete. true</td></tr> <tr><td><code>itemRenderer</code></td> <td>The ListItemRenderer for the item (node) that opened</td></tr> <tr><td><code>item</code></td><td>the Tree node that opened.</td></tr> <tr><td><code>opening</code></td><td>true if the item is opening, false if it is closing.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>triggerEvent</code></td> <td>If the item opened in response to a user action, identifies it as a keyboard action or a mouse action.</td></tr> <tr><td><code>type</code></td><td>TreeEvent.ITEM_OPENING</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.TreeEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Object,mx.controls.listClasses.IListItemRenderer,flash.events.Event)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="item">The Tree node (item) to which this event applies.</param>
      <param name="itemRenderer">The item renderer object for the cell.</param>
      <param name="triggerEvent">If the node opened or closed in response to a user action, indicates the type of input action.</param>
    </member>
    <member name="F:mx.events.TreeEvent.ITEM_OPEN">
      <summary>The TreeEvent.ITEM_OPEN event type constant indicates that a tree branch opened or expanded.</summary>
    </member>
    <member name="F:mx.events.TreeEvent.ITEM_OPENING">
      <summary>The TreeEvent.ITEM_OPENING event type constant is dispatched immediately before a tree opens or closes.</summary>
    </member>
    <member name="F:mx.events.TreeEvent.animate">
      <summary>Whether to animate an opening or closing operation; used for ITEM_OPENING type events only.</summary>
    </member>
    <member name="F:mx.events.TreeEvent.dispatchEvent">
      <summary>Whether to dispatch an event (<code>ITEM_OPEN</code> or <code>ITEM_CLOSE</code>) after the open or close animation is complete.</summary>
    </member>
    <member name="F:mx.events.TreeEvent.item">
      <summary>Storage for the item property.</summary>
    </member>
    <member name="F:mx.events.TreeEvent.itemRenderer">
      <summary>The ListItemRenderer for the node that closed or opened.</summary>
    </member>
    <member name="F:mx.events.TreeEvent.opening">
      <summary>Used for an <code>ITEM_OPENING</code> type events only.</summary>
    </member>
    <member name="F:mx.events.TreeEvent.triggerEvent">
      <summary>The low level MouseEvent or KeyboardEvent that triggered this event or <code>null</code> if this event was triggered programatically.</summary>
    </member>
    <member name="T:mx.events.TweenEvent">
      <summary>Represents event objects that are specific to Flex tween effects.</summary>
    </member>
    <member name="E:mx.events.TweenEvent.tweenStart">
      <summary>The <code>TweenEvent.TWEEN_START</code> constant defines the value of the event object's <code>type</code> property for a <code>tweenStart</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>value</code></td><td>The value passed to the <code>onTweenUpdate()</code> method.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.TweenEvent.tweenUpdate">
      <summary>The <code>TweenEvent.TWEEN_UPDATE</code> constant defines the value of the event object's <code>type</code> property for a <code>tweenUpdate</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> <tr><td><code>value</code></td><td>The value passed to the <code>onTweenUpdate()</code> method.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.TweenEvent.#ctor(Avm.String,System.Boolean,System.Boolean,System.Object)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="value">For a <code>tweenStart</code> or <code>tweenUpdate</code> event, the value passed to the <code>onTweenUpdate()</code> method; for a <code>tweenEnd</code> event, the value passed to the <code>onTweenEnd()</code> method.</param>
    </member>
    <member name="F:mx.events.TweenEvent.TWEEN_START">
      <summary>The <code>TweenEvent.TWEEN_START</code> constant defines the value of the event object's <code>type</code> property for a <code>tweenStart</code> event.</summary>
    </member>
    <member name="F:mx.events.TweenEvent.TWEEN_UPDATE">
      <summary>The <code>TweenEvent.TWEEN_UPDATE</code> constant defines the value of the event object's <code>type</code> property for a <code>tweenUpdate</code> event.</summary>
    </member>
    <member name="F:mx.events.TweenEvent.value">
      <summary>For a <code>tweenStart</code> or <code>tweenUpdate</code> event, the value passed to the <code>onTweenUpdate()</code> method; for a <code>tweenEnd</code> event, the value passed to the <code>onTweenEnd()</code> method.</summary>
    </member>
    <member name="T:mx.events.ValidationResultEvent">
      <summary>The ValidationResultEvent class represents the event object passed to the listener for the <code>valid</code> validator event or the <code>invalid</code> validator event.</summary>
    </member>
    <member name="E:mx.events.ValidationResultEvent.valid">
      <summary>The <code>ValidationResultEvent.VALID</code> constant defines the value of the <code>type</code> property of the event object for a <code>valid</code>event. The value of this constant is "valid". <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>field</code></td><td>An empty String.</td></tr> <tr><td><code>message</code></td><td>An empty String.</td></tr> <tr><td><code>results</code></td><td>An empty Array.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.ValidationResultEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,Avm.Array)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="field">The name of the field that failed validation and triggered the event.</param>
      <param name="results">An array of ValidationResult objects, one per validated field.</param>
    </member>
    <member name="F:mx.events.ValidationResultEvent.VALID">
      <summary>The <code>ValidationResultEvent.VALID</code> constant defines the value of the <code>type</code> property of the event object for a <code>valid</code>event.</summary>
    </member>
    <member name="F:mx.events.ValidationResultEvent.field">
      <summary>The name of the field that failed validation and triggered the event.</summary>
    </member>
    <member name="F:mx.events.ValidationResultEvent.results">
      <summary>An array of ValidationResult objects, one per validated field.</summary>
    </member>
    <member name="P:mx.events.ValidationResultEvent.message">
      <summary>A single string that contains every error message from all of the ValidationResult objects in the results Array.</summary>
    </member>
    <member name="T:mx.events.VideoEvent">
      <summary>The VideoEvent class represents the event object passed to the event listener for events dispatched by the VideoDisplay control, and defines the values of the <code>VideoDisplay.state</code> property.</summary>
    </member>
    <member name="E:mx.events.VideoEvent.close">
      <summary>The <code>VideoEvent.CLOSE</code> constant defines the value of the <code>type</code> property of the event object for a <code>close</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>playheadTime</code></td><td>The location of the playhead when the event occurs.</td></tr> <tr><td><code>state</code></td><td>The value of the <code>VideoDisplay.state</code> property when the event occurs.</td></tr> <tr><td><code>stateResponsive</code></td><td>The value of the <code>VideoDisplay.stateResponsive</code> property when the event occurs.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.VideoEvent.complete">
      <summary>The <code>VideoEvent.COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>complete</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>playheadTime</code></td><td>The location of the playhead when the event occurs.</td></tr> <tr><td><code>state</code></td><td>The value of the <code>VideoDisplay.state</code> property when the event occurs.</td></tr> <tr><td><code>stateResponsive</code></td><td>The value of the <code>VideoDisplay.stateResponsive</code> property when the event occurs.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.VideoEvent.playheadUpdate">
      <summary>The <code>VideoEvent.PLAYHEAD_UPDATE</code> constant defines the value of the <code>type</code> property of the event object for a <code>playheadUpdate</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>playheadTime</code></td><td>The location of the playhead when the event occurs.</td></tr> <tr><td><code>state</code></td><td>The value of the <code>VideoDisplay.state</code> property when the event occurs.</td></tr> <tr><td><code>stateResponsive</code></td><td>The value of the <code>VideoDisplay.stateResponsive</code> property when the event occurs.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.VideoEvent.ready">
      <summary>The <code>VideoEvent.READY</code> constant defines the value of the <code>type</code> property of the event object for a <code>ready</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>playheadTime</code></td><td>The location of the playhead when the event occurs.</td></tr> <tr><td><code>state</code></td><td>The value of the <code>VideoDisplay.state</code> property when the event occurs.</td></tr> <tr><td><code>stateResponsive</code></td><td>The value of the <code>VideoDisplay.stateResponsive</code> property when the event occurs.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.VideoEvent.rewind">
      <summary>The <code>VideoEvent.REWIND</code> constant defines the value of the <code>type</code> property of the event object for a <code>rewind</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>playheadTime</code></td><td>The location of the playhead when the event occurs.</td></tr> <tr><td><code>state</code></td><td>The value of the <code>VideoDisplay.state</code> property when the event occurs.</td></tr> <tr><td><code>stateResponsive</code></td><td>The value of the <code>VideoDisplay.stateResponsive</code> property when the event occurs.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="E:mx.events.VideoEvent.stateChange">
      <summary>The <code>VideoEvent.STATE_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>stateChange</code> event. <p>The properties of the event object have the following values:</p> <table class="innertable"> <tr><th>Property</th><th>Value</th></tr> <tr><td><code>bubbles</code></td><td>false</td></tr> <tr><td><code>cancelable</code></td><td>false</td></tr> <tr><td><code>currentTarget</code></td><td>The Object that defines the event listener that handles the event. For example, if you use <code>myButton.addEventListener()</code> to register an event listener, myButton is the value of the <code>currentTarget</code>. </td></tr> <tr><td><code>playheadTime</code></td><td>The location of the playhead when the event occurs.</td></tr> <tr><td><code>state</code></td><td>The value of the <code>VideoDisplay.state</code> property when the event occurs.</td></tr> <tr><td><code>stateResponsive</code></td><td>The value of the <code>VideoDisplay.stateResponsive</code> property when the event occurs.</td></tr> <tr><td><code>target</code></td><td>The Object that dispatched the event; it is not always the Object listening for the event. Use the <code>currentTarget</code> property to always access the Object listening for the event.</td></tr> </table></summary>
    </member>
    <member name="M:mx.events.VideoEvent.#ctor(Avm.String,System.Boolean,System.Boolean,Avm.String,System.Double)">
      <summary>Constructor.</summary>
      <param name="type">The event type; indicates the action that caused the event.</param>
      <param name="bubbles">Specifies whether the event can bubble up the display list hierarchy.</param>
      <param name="cancelable">Specifies whether the behavior associated with the event can be prevented.</param>
      <param name="state">The value of the <code>VideoDisplay.state</code> property when the event occurs.</param>
      <param name="playheadTime">The location of the playhead when the event occurs.</param>
    </member>
    <member name="F:mx.events.VideoEvent.CLOSE">
      <summary>The <code>VideoEvent.CLOSE</code> constant defines the value of the <code>type</code> property of the event object for a <code>close</code> event.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.COMPLETE">
      <summary>The <code>VideoEvent.COMPLETE</code> constant defines the value of the <code>type</code> property of the event object for a <code>complete</code> event.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.CONNECTION_ERROR">
      <summary>The value of the <code>VideoDisplay.state</code> property when the VideoDisplay control was unable to load the video stream.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.DISCONNECTED">
      <summary>The value of the <code>VideoDisplay.state</code> property when the video stream has timed out or is idle.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.EXEC_QUEUED_CMD">
      <summary>The value of the <code>VideoDisplay.state</code> property during execution of queued command.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.LOADING">
      <summary>The value of the <code>VideoDisplay.state</code> property immediately after a call to the <code>play()</code> or <code>load()</code> method.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.PAUSED">
      <summary>The value of the <code>VideoDisplay.state</code> property when an FLV file is loaded, but play is paused.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.PLAYHEAD_UPDATE">
      <summary>The <code>VideoEvent.PLAYHEAD_UPDATE</code> constant defines the value of the <code>type</code> property of the event object for a <code>playheadUpdate</code> event.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.PLAYING">
      <summary>The value of the <code>VideoDisplay.state</code> property when an FLV file is loaded and is playing.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.READY">
      <summary>The <code>VideoEvent.READY</code> constant defines the value of the <code>type</code> property of the event object for a <code>ready</code> event.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.RESIZING">
      <summary>The value of the <code>VideoDisplay.state</code> property when the VideoDisplay control is resizing.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.REWIND">
      <summary>The <code>VideoEvent.REWIND</code> constant defines the value of the <code>type</code> property of the event object for a <code>rewind</code> event.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.REWINDING">
      <summary>The value of the <code>VideoDisplay.state</code> property during an autorewind triggered when play stops.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.SEEKING">
      <summary>The value of the <code>VideoDisplay.state</code> property for a seek occurring due to the <code>VideoDisplay.playHeadTime</code> property being set.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.STATE_CHANGE">
      <summary>The <code>VideoEvent.STATE_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>stateChange</code> event.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.STOPPED">
      <summary>The value of the <code>VideoDisplay.state</code> property when an FLV file is loaded but play has stopped.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.playheadTime">
      <summary>The location of the playhead of the VideoDisplay control when the event occurs.</summary>
    </member>
    <member name="F:mx.events.VideoEvent.state">
      <summary>The value of the <code>VideoDisplay.state</code> property when the event occurs.</summary>
    </member>
    <member name="P:mx.events.VideoEvent.stateResponsive">
      <summary>The value of the <code>VideoDisplay.stateResponsive</code> property when the event occurs.</summary>
    </member>
    <member name="N:mx.formatters" />
    <member name="T:mx.formatters.CurrencyFormatter">
      <summary>The CurrencyFormatter class formats a valid number as a currency value.</summary>
    </member>
    <member name="M:mx.formatters.CurrencyFormatter.format(System.Object)">
      <summary>Formats <code>value</code> as currency.</summary>
      <param name="value">Value to format.</param>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.alignSymbol">
      <summary>Aligns currency symbol to the left side or the right side of the formatted number.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.currencySymbol">
      <summary>Character to use as a currency symbol for a formatted number.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.decimalSeparatorFrom">
      <summary>Decimal separator character to use when parsing an input string.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.decimalSeparatorTo">
      <summary>Decimal separator character to use when outputting formatted decimal numbers.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.precision">
      <summary>Number of decimal places to include in the output String.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.rounding">
      <summary>How to round the number.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.thousandsSeparatorFrom">
      <summary>Character to use as the thousands separator in the input String.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.thousandsSeparatorTo">
      <summary>Character to use as the thousands separator in the output string.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.useNegativeSign">
      <summary>If <code>true</code>, format a negative number by preceding it with a minus "-" sign.</summary>
    </member>
    <member name="P:mx.formatters.CurrencyFormatter.useThousandsSeparator">
      <summary>If <code>true</code>, split the number into thousands increments by using a separator character.</summary>
    </member>
    <member name="T:mx.formatters.DateBase">
      <summary>The DateBase class contains the localized string information used by the mx.formatters.DateFormatter class and the parsing function that renders the pattern.</summary>
    </member>
    <member name="P:mx.formatters.DateBase.dayNamesLong">
      <summary>Long format of day names.</summary>
    </member>
    <member name="P:mx.formatters.DateBase.dayNamesShort">
      <summary>Short format of day names.</summary>
    </member>
    <member name="P:mx.formatters.DateBase.monthNamesLong">
      <summary>Long format of month names.</summary>
    </member>
    <member name="P:mx.formatters.DateBase.monthNamesShort">
      <summary>Short format of month names.</summary>
    </member>
    <member name="P:mx.formatters.DateBase.timeOfDay">
      <summary>Time of day names.</summary>
    </member>
    <member name="T:mx.formatters.DateFormatter">
      <summary>The DateFormatter class uses a format String to return a formatted date and time String from an input String or a Date object.</summary>
    </member>
    <member name="M:mx.formatters.DateFormatter.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.formatters.DateFormatter.format(System.Object)">
      <summary>Generates a date-formatted String from either a date-formatted String or a Date object.</summary>
      <param name="value">Date to format. This can be a Date object, or a date-formatted String such as "Thursday, April 22, 2004".</param>
    </member>
    <member name="M:mx.formatters.DateFormatter.parseDateString(Avm.String)">
      <summary>Converts a date that is formatted as a String into a Date object.</summary>
      <param name="str">Date that is formatted as a String.</param>
    </member>
    <member name="P:mx.formatters.DateFormatter.formatString">
      <summary>The mask pattern.</summary>
    </member>
    <member name="T:mx.formatters.Formatter">
      <summary>The Formatter class is the base class for all data formatters.</summary>
    </member>
    <member name="M:mx.formatters.Formatter.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.formatters.Formatter.format(System.Object)">
      <summary>Formats a value and returns a String containing the new, formatted, value.</summary>
      <param name="value">Value to be formatted.</param>
    </member>
    <member name="M:mx.formatters.Formatter.resourcesChanged">
      <summary>This method is called when a Formatter is constructed, and again whenever the ResourceManager dispatches a <code>"change"</code> Event to indicate that the localized resources have changed in some way.</summary>
    </member>
    <member name="F:mx.formatters.Formatter.error">
      <summary>Description saved by the formatter when an error occurs.</summary>
    </member>
    <member name="P:mx.formatters.Formatter.defaultInvalidFormatError">
      <summary>Error message for an invalid format string specified to the formatter.</summary>
    </member>
    <member name="P:mx.formatters.Formatter.defaultInvalidValueError">
      <summary>Error messages for an invalid value specified to the formatter.</summary>
    </member>
    <member name="T:mx.formatters.NumberBase">
      <summary>The NumberBase class is a utility class that contains general number formatting capabilities, including rounding, precision, thousands formatting, and negative sign formatting.</summary>
    </member>
    <member name="M:mx.formatters.NumberBase.formatDecimal(Avm.String)">
      <summary>Formats a number by replacing the default decimal separator, ".", with the decimal separator specified by <code>decimalSeparatorTo</code>.</summary>
      <param name="value">The String value of the Number (formatted American style ####.##).</param>
    </member>
    <member name="M:mx.formatters.NumberBase.formatNegative(Avm.String,System.Boolean)">
      <summary>Formats a negative number with either a minus sign (-) or parentheses ().</summary>
      <param name="value">Value to be formatted.</param>
      <param name="useSign">If <code>true</code>, use a minus sign (-). If <code>false</code>, use parentheses ().</param>
    </member>
    <member name="M:mx.formatters.NumberBase.formatPrecision(Avm.String,System.Int32)">
      <summary>Formats a number by setting its decimal precision by using the <code>decimalSeparatorTo</code> property as the decimal separator.</summary>
      <param name="value">Value to be formatted.</param>
      <param name="precision">Number of decimal points to use.</param>
    </member>
    <member name="M:mx.formatters.NumberBase.formatRounding(Avm.String,Avm.String)">
      <summary>Formats a number by rounding it.</summary>
      <param name="value">Value to be rounded.</param>
      <param name="roundType">The type of rounding to perform: NumberBaseRoundType.NONE, NumberBaseRoundType.UP, NumberBaseRoundType.DOWN, or NumberBaseRoundType.NEAREST.</param>
    </member>
    <member name="M:mx.formatters.NumberBase.formatRoundingWithPrecision(Avm.String,Avm.String,System.Int32)">
      <summary>Formats a number by rounding it and setting the decimal precision.</summary>
      <param name="value">Value to be rounded.</param>
      <param name="roundType">The type of rounding to perform: NumberBaseRoundType.NONE, NumberBaseRoundType.UP, NumberBaseRoundType.DOWN, or NumberBaseRoundType.NEAREST.</param>
      <param name="precision">int of decimal places to use.</param>
    </member>
    <member name="M:mx.formatters.NumberBase.formatThousands(Avm.String)">
      <summary>Formats a number by using the <code>thousandsSeparatorTo</code> property as the thousands separator and the <code>decimalSeparatorTo</code> property as the decimal separator.</summary>
      <param name="value">Value to be formatted.</param>
    </member>
    <member name="M:mx.formatters.NumberBase.parseNumberString(Avm.String)">
      <summary>Extracts a number from a formatted String.</summary>
      <param name="str">String to parse for the numeric value.</param>
    </member>
    <member name="F:mx.formatters.NumberBase.decimalSeparatorFrom">
      <summary>Decimal separator character to use when parsing an input String.</summary>
    </member>
    <member name="F:mx.formatters.NumberBase.decimalSeparatorTo">
      <summary>Decimal separator character to use when outputting formatted decimal numbers.</summary>
    </member>
    <member name="F:mx.formatters.NumberBase.isValid">
      <summary>If <code>true</code>, the format succeeded, otherwise it is <code>false</code>.</summary>
    </member>
    <member name="F:mx.formatters.NumberBase.thousandsSeparatorFrom">
      <summary>Character to use as the thousands separator in the input String.</summary>
    </member>
    <member name="F:mx.formatters.NumberBase.thousandsSeparatorTo">
      <summary>Character to use as the thousands separator in the output String.</summary>
    </member>
    <member name="T:mx.formatters.NumberBaseRoundType">
      <summary>The NumberBaseRoundType class defines the constant values for formatter properties that specify a type of rounding.</summary>
    </member>
    <member name="F:mx.formatters.NumberBaseRoundType.NEAREST">
      <summary>Rounds a number up or down to the nearest integer.</summary>
    </member>
    <member name="F:mx.formatters.NumberBaseRoundType.NONE">
      <summary>Perform no rounding.</summary>
    </member>
    <member name="F:mx.formatters.NumberBaseRoundType.UP">
      <summary>Rounds a number up to an integer value that is both closest to, and greater than or equal to, the input number.</summary>
    </member>
    <member name="T:mx.formatters.NumberFormatter">
      <summary>The NumberFormatter class formats a valid number by adjusting the decimal rounding and precision, the thousands separator, and the negative sign.</summary>
    </member>
    <member name="M:mx.formatters.NumberFormatter.format(System.Object)">
      <summary>Formats the number as a String.</summary>
      <param name="value">Value to format.</param>
    </member>
    <member name="P:mx.formatters.NumberFormatter.decimalSeparatorFrom">
      <summary>Decimal separator character to use when parsing an input String.</summary>
    </member>
    <member name="P:mx.formatters.NumberFormatter.decimalSeparatorTo">
      <summary>Decimal separator character to use when outputting formatted decimal numbers.</summary>
    </member>
    <member name="P:mx.formatters.NumberFormatter.precision">
      <summary>Number of decimal places to include in the output String.</summary>
    </member>
    <member name="P:mx.formatters.NumberFormatter.rounding">
      <summary>Specifies how to round the number.</summary>
    </member>
    <member name="P:mx.formatters.NumberFormatter.thousandsSeparatorFrom">
      <summary>Character to use as the thousands separator in the input String.</summary>
    </member>
    <member name="P:mx.formatters.NumberFormatter.thousandsSeparatorTo">
      <summary>Character to use as the thousands separator in the output String.</summary>
    </member>
    <member name="P:mx.formatters.NumberFormatter.useNegativeSign">
      <summary>If <code>true</code>, format a negative number by preceding it with a minus "-" sign.</summary>
    </member>
    <member name="P:mx.formatters.NumberFormatter.useThousandsSeparator">
      <summary>If <code>true</code>, split the number into thousands increments by using a separator character.</summary>
    </member>
    <member name="T:mx.formatters.PhoneFormatter">
      <summary>The PhoneFormatter class formats a valid number into a phone number format, including international configurations.</summary>
    </member>
    <member name="M:mx.formatters.PhoneFormatter.format(System.Object)">
      <summary>Formats the String as a phone number.</summary>
      <param name="value">Value to format.</param>
    </member>
    <member name="P:mx.formatters.PhoneFormatter.areaCode">
      <summary>Area code number added to a seven-digit United States format phone number to form a 10-digit phone number.</summary>
    </member>
    <member name="P:mx.formatters.PhoneFormatter.areaCodeFormat">
      <summary>Default format for the area code when the <code>areacode</code> property is rendered by a seven-digit format.</summary>
    </member>
    <member name="P:mx.formatters.PhoneFormatter.formatString">
      <summary>String that contains mask characters that represent a specified phone number format.</summary>
    </member>
    <member name="P:mx.formatters.PhoneFormatter.validPatternChars">
      <summary>List of valid characters that can be used in the <code>formatString</code> property.</summary>
    </member>
    <member name="T:mx.formatters.SwitchSymbolFormatter">
      <summary>The SwitchSymbolFormatter class is a utility class that you can use when creating custom formatters.</summary>
    </member>
    <member name="M:mx.formatters.SwitchSymbolFormatter.formatValue(Avm.String,System.Object)">
      <summary>Creates a new String by formatting the source String using the format pattern.</summary>
      <param name="format">String that defines the user-requested pattern including.</param>
      <param name="source">Valid number sequence (alpha characters are allowed if needed).</param>
    </member>
    <member name="T:mx.formatters.ZipCodeFormatter">
      <summary>The ZipCodeFormatter class formats a valid number into one of the following formats, based on a user-supplied <code>formatString</code> property.</summary>
    </member>
    <member name="M:mx.formatters.ZipCodeFormatter.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.formatters.ZipCodeFormatter.format(System.Object)">
      <summary>Formats the String by using the specified format.</summary>
      <param name="value">Value to format.</param>
    </member>
    <member name="P:mx.formatters.ZipCodeFormatter.formatString">
      <summary>The mask pattern.</summary>
    </member>
    <member name="N:mx.graphics" />
    <member name="T:mx.graphics.BitmapFill">
      <summary>Defines a set of values used to fill an area on screen with a bitmap or other DisplayObject.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.offsetX">
      <summary>How far the bitmap is horizontally offset from the origin.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.offsetY">
      <summary>How far the bitmap is vertically offset from the origin.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.originX">
      <summary>The horizontal origin for the bitmap fill.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.originY">
      <summary>The vertical origin for the bitmap fill.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.repeat">
      <summary>Whether the bitmap is repeated to fill the area.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.rotation">
      <summary>The number of degrees to rotate the bitmap.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.scaleX">
      <summary>The percent to horizontally scale the bitmap when filling, from 0.0 to 1.0.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.scaleY">
      <summary>The percent to vertically scale the bitmap when filling, from 0.0 to 1.0.</summary>
    </member>
    <member name="F:mx.graphics.BitmapFill.smooth">
      <summary>A flag indicating whether to smooth the bitmap data when filling with it.</summary>
    </member>
    <member name="P:mx.graphics.BitmapFill.source">
      <summary>The source used for the bitmap fill.</summary>
    </member>
    <member name="N:mx.graphics.codec" />
    <member name="T:mx.graphics.codec.IImageEncoder">
      <summary>The IImageEncoder interface defines the interface that image encoders implement to take BitmapData objects, or ByteArrays containing raw ARGB pixels, as input and convert them to popular image formats such as PNG or JPEG.</summary>
    </member>
    <member name="M:mx.graphics.codec.IImageEncoder.encode(flash.display.BitmapData)">
      <summary>Encodes a BitmapData object as a ByteArray.</summary>
      <param name="bitmapData">The input BitmapData object.</param>
    </member>
    <member name="M:mx.graphics.codec.IImageEncoder.encodeByteArray(flash.utils.ByteArray,System.Int32,System.Int32,System.Boolean)">
      <summary>Encodes a ByteArray object containing raw pixels in 32-bit ARGB (Alpha, Red, Green, Blue) format as a new ByteArray object containing encoded image data.</summary>
      <param name="byteArray">The input ByteArray object containing raw pixels. This ByteArray should contain <code>4 width height</code> bytes. Each pixel is represented by 4 bytes, in the order ARGB. The first four bytes represent the top-left pixel of the image. The next four bytes represent the pixel to its right, etc. Each row follows the previous one without any padding.</param>
      <param name="width">The width of the input image, in pixels.</param>
      <param name="height">The height of the input image, in pixels.</param>
      <param name="transparent">If <code>false</code>, alpha channel information is ignored.</param>
    </member>
    <member name="P:mx.graphics.codec.IImageEncoder.contentType">
      <summary>The MIME type for the image format that this encoder produces.</summary>
    </member>
    <member name="T:mx.graphics.codec.JPEGEncoder">
      <summary>The JPEGEncoder class converts raw bitmap images into encoded images using Joint Photographic Experts Group (JPEG) compression.</summary>
    </member>
    <member name="M:mx.graphics.codec.JPEGEncoder.#ctor(System.Double)">
      <summary>Constructor.</summary>
      <param name="quality">A value between 0.0 and 100.0. The smaller the <code>quality</code> value, the smaller the file size of the resultant image. The value does not affect the encoding speed. Note that even though this value is a number between 0.0 and 100.0, it does not represent a percentage. The default value is 50.0.</param>
    </member>
    <member name="M:mx.graphics.codec.JPEGEncoder.encode(flash.display.BitmapData)">
      <summary>Converts the pixels of BitmapData object to a JPEG-encoded ByteArray object.</summary>
      <param name="bitmapData">The input BitmapData object.</param>
    </member>
    <member name="M:mx.graphics.codec.JPEGEncoder.encodeByteArray(flash.utils.ByteArray,System.Int32,System.Int32,System.Boolean)">
      <summary>Converts a ByteArray object containing raw pixels in 32-bit ARGB (Alpha, Red, Green, Blue) format to a new JPEG-encoded ByteArray object.</summary>
      <param name="byteArray">The input ByteArray object containing raw pixels. This ByteArray should contain <code>4 width height</code> bytes. Each pixel is represented by 4 bytes, in the order ARGB. The first four bytes represent the top-left pixel of the image. The next four bytes represent the pixel to its right, etc. Each row follows the previous one without any padding.</param>
      <param name="width">The width of the input image, in pixels.</param>
      <param name="height">The height of the input image, in pixels.</param>
      <param name="transparent">If <code>false</code>, alpha channel information is ignored.</param>
    </member>
    <member name="P:mx.graphics.codec.JPEGEncoder.contentType">
      <summary>The MIME type for the JPEG encoded image.</summary>
    </member>
    <member name="T:mx.graphics.codec.PNGEncoder">
      <summary>The PNGEncoder class converts raw bitmap images into encoded images using Portable Network Graphics (PNG) lossless compression.</summary>
    </member>
    <member name="M:mx.graphics.codec.PNGEncoder.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.graphics.codec.PNGEncoder.encode(flash.display.BitmapData)">
      <summary>Converts the pixels of a BitmapData object to a PNG-encoded ByteArray object.</summary>
      <param name="bitmapData">The input BitmapData object.</param>
    </member>
    <member name="M:mx.graphics.codec.PNGEncoder.encodeByteArray(flash.utils.ByteArray,System.Int32,System.Int32,System.Boolean)">
      <summary>Converts a ByteArray object containing raw pixels in 32-bit ARGB (Alpha, Red, Green, Blue) format to a new PNG-encoded ByteArray object.</summary>
      <param name="byteArray">The input ByteArray object containing raw pixels. This ByteArray should contain <code>4 width height</code> bytes. Each pixel is represented by 4 bytes, in the order ARGB. The first four bytes represent the top-left pixel of the image. The next four bytes represent the pixel to its right, etc. Each row follows the previous one without any padding.</param>
      <param name="width">The width of the input image, in pixels.</param>
      <param name="height">The height of the input image, in pixels.</param>
      <param name="transparent">If <code>false</code>, alpha channel information is ignored but you still must represent each pixel as four bytes in ARGB format.</param>
    </member>
    <member name="P:mx.graphics.codec.PNGEncoder.contentType">
      <summary>The MIME type for the PNG encoded image.</summary>
    </member>
    <member name="T:mx.graphics.GradientBase">
      <summary>The GradientBase class is the base class for LinearGradient, LinearGradientStroke, and RadialGradient.</summary>
    </member>
    <member name="M:mx.graphics.GradientBase.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:mx.graphics.GradientBase.entries">
      <summary>An Array of GradientEntry objects defining the fill patterns for the gradient fill.</summary>
    </member>
    <member name="T:mx.graphics.GradientEntry">
      <summary>The GradientEntry class defines the objects that control a transition as part of a gradient fill.</summary>
    </member>
    <member name="P:mx.graphics.GradientEntry.alpha">
      <summary>The transparency of a gradient fill.</summary>
    </member>
    <member name="P:mx.graphics.GradientEntry.color">
      <summary>The color value for a gradient fill.</summary>
    </member>
    <member name="P:mx.graphics.GradientEntry.ratio">
      <summary>Where in the graphical element, as a percentage from 0.0 to 1.0, Flex starts the transition to the associated color.</summary>
    </member>
    <member name="T:mx.graphics.IFill">
      <summary>Defines the interface that classes that perform a fill must implement.</summary>
    </member>
    <member name="M:mx.graphics.IFill.begin(flash.display.Graphics,flash.geom.Rectangle)">
      <summary>Starts the fill.</summary>
      <param name="target">The target Graphics object that is being filled.</param>
      <param name="rc">The Rectangle object that defines the size of the fill inside the <code>target</code>. If the dimensions of the Rectangle are larger than the dimensions of the <code>target</code>, the fill is clipped. If the dimensions of the Rectangle are smaller than the dimensions of the <code>target</code>, the fill expands to fill the entire <code>target</code>.</param>
    </member>
    <member name="M:mx.graphics.IFill.end(flash.display.Graphics)">
      <summary>Ends the fill.</summary>
      <param name="target">The Graphics object that is being filled.</param>
    </member>
    <member name="T:mx.graphics.ImageSnapshot">
      <summary>A helper class used to capture a snapshot of any Flash component that implements <code>flash.display.IBitmapDrawable</code>, including Flex UIComponents.</summary>
    </member>
    <member name="M:mx.graphics.ImageSnapshot.#ctor(System.Int32,System.Int32,flash.utils.ByteArray,Avm.String)">
      <summary>Constructor.</summary>
      <param name="width">Width of the image.</param>
      <param name="height">Height of the image.</param>
      <param name="data">A byte array to contain the image.</param>
      <param name="contentType">The encoder format type for the image, either PNGEncoder or JPEGEncoder.</param>
    </member>
    <member name="M:mx.graphics.ImageSnapshot.captureBitmapData(flash.display.IBitmapDrawable,flash.geom.Matrix,flash.geom.ColorTransform,Avm.String,flash.geom.Rectangle,System.Boolean)">
      <summary>A utility method to grab a raw snapshot of a UI component as BitmapData.</summary>
      <param name="source">An object that implements the <code>flash.display.IBitmapDrawable</code> interface.</param>
      <param name="matrix">A Matrix object used to scale, rotate, or translate the coordinates of the captured bitmap. If you do not want to apply a matrix transformation to the image, set this parameter to an identity matrix, created with the default new Matrix() constructor, or pass a null value.</param>
      <param name="colorTransform">A ColorTransform object that you use to adjust the color values of the bitmap. If no object is supplied, the bitmap image's colors are not transformed. If you must pass this parameter but you do not want to transform the image, set this parameter to a ColorTransform object created with the default new ColorTransform() constructor.</param>
      <param name="blendMode">A string value, from the flash.display.BlendMode class, specifying the blend mode to be applied to the resulting bitmap.</param>
      <param name="clipRect">A Rectangle object that defines the area of the source object to draw. If you do not supply this value, no clipping occurs and the entire source object is drawn.</param>
      <param name="smoothing">A Boolean value that determines whether a BitmapData object is smoothed when scaled.</param>
    </member>
    <member name="M:mx.graphics.ImageSnapshot.captureImage(flash.display.IBitmapDrawable,System.Double,mx.graphics.codec.IImageEncoder,System.Boolean)">
      <summary>A utility method to grab a snapshot of a component, scaled to a specific resolution (in dpi) and encoded into a specific image format.</summary>
      <param name="source">An object that implements the <code>flash.display.IBitmapDrawable</code> interface.</param>
      <param name="dpi">The resolution in dots per inch. If a resolution is not provided, the current on-screen resolution is used by default.</param>
      <param name="encoder">The image format used to encode the raw bitmap. The two encoders are PNGEncoder and JPEGEncoder. If an encoder is not provided, the default is PNGEncoder.</param>
      <param name="scaleLimited">The maximum width or height of a bitmap in Flash is 2880 pixels - if scaleLimited is set to true the resolution will be reduced proportionately to fit within 2880 pixels, otherwise, if scaleLimited is false, smaller snapshot windows will be taken and stitched together to capture a larger image. The default is true.</param>
    </member>
    <member name="M:mx.graphics.ImageSnapshot.encodeImageAsBase64(mx.graphics.ImageSnapshot)">
      <summary>A utility method to convert an ImageSnapshot into a Base-64 encoded String for transmission in text based serialization formats such as XML.</summary>
      <param name="snapshot">An image captured as an <code>mx.graphics.ImageSnapshot</code>.</param>
    </member>
    <member name="F:mx.graphics.ImageSnapshot.defaultEncoder">
      <summary>The default <code>mx.graphics.codec.IImageEncoder</code> implementation used to capture images.</summary>
    </member>
    <member name="P:mx.graphics.ImageSnapshot.contentType">
      <summary>The MIME content type for the image encoding format that was used to capture this snapshot.</summary>
    </member>
    <member name="P:mx.graphics.ImageSnapshot.data">
      <summary>The encoded data representing the image snapshot.</summary>
    </member>
    <member name="P:mx.graphics.ImageSnapshot.height">
      <summary>The image height in pixels.</summary>
    </member>
    <member name="P:mx.graphics.ImageSnapshot.properties">
      <summary>An Object containing name/value pairs specifying additional properties of the image.</summary>
    </member>
    <member name="P:mx.graphics.ImageSnapshot.width">
      <summary>The image width in pixels.</summary>
    </member>
    <member name="T:mx.graphics.IStroke">
      <summary>Defines the interface that classes that define a line must implement.</summary>
    </member>
    <member name="M:mx.graphics.IStroke.apply(flash.display.Graphics)">
      <summary>Applies the properties to the specified Graphics object.</summary>
      <param name="g">The Graphics object to apply the properties to.</param>
    </member>
    <member name="P:mx.graphics.IStroke.weight">
      <summary>The line weight, in pixels.</summary>
    </member>
    <member name="T:mx.graphics.LinearGradient">
      <summary>The LinearGradient class lets you specify the fill of a graphical element, where a gradient specifies a gradual color transition  in the fill color.</summary>
    </member>
    <member name="M:mx.graphics.LinearGradient.begin(flash.display.Graphics,flash.geom.Rectangle)">
      <summary>Starts the fill.</summary>
      <param name="target">The target Graphics object that is being filled.</param>
      <param name="rc">The Rectangle object that defines the size of the fill inside the <code>target</code>. If the dimensions of the Rectangle are larger than the dimensions of the <code>target</code>, the fill is clipped. If the dimensions of the Rectangle are smaller than the dimensions of the <code>target</code>, the fill expands to fill the entire <code>target</code>.</param>
    </member>
    <member name="M:mx.graphics.LinearGradient.end(flash.display.Graphics)">
      <summary>Ends the fill.</summary>
      <param name="target">The Graphics object that is being filled.</param>
    </member>
    <member name="P:mx.graphics.LinearGradient.angle">
      <summary>Controls the transition direction.</summary>
    </member>
    <member name="T:mx.graphics.LinearGradientStroke">
      <summary>The LinearGradientStroke class lets you specify a gradient filled stroke.</summary>
    </member>
    <member name="M:mx.graphics.LinearGradientStroke.apply(flash.display.Graphics)">
      <summary>Applies the properties to the specified Graphics object.</summary>
      <param name="g">The Graphics object to which the LinearGradientStroke styles are applied.</param>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.angle">
      <summary>By default, the LinearGradientStroke defines a transition from left to right across the control.</summary>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.caps">
      <summary>A value from the CapsStyle class that specifies the type of caps at the end of lines.</summary>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.interpolationMethod">
      <summary>A value from the InterpolationMethod class that specifies which interpolation method to use.</summary>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.joints">
      <summary>A value from the JointStyle class that specifies the type of joint appearance used at angles.</summary>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.miterLimit">
      <summary>A number that indicates the limit at which a miter is cut off.</summary>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.pixelHinting">
      <summary>A Boolean value that specifies whether to hint strokes to full pixels.</summary>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.scaleMode">
      <summary>A value from the LineScaleMode class that  specifies which scale mode to use.</summary>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.spreadMethod">
      <summary>A value from the SpreadMethod class that specifies which spread method to use.</summary>
    </member>
    <member name="P:mx.graphics.LinearGradientStroke.weight">
      <summary>The line weight, in pixels.</summary>
    </member>
    <member name="T:mx.graphics.RadialGradient">
      <summary>The RadialGradient class lets you specify a gradual color transition in the fill color.</summary>
    </member>
    <member name="M:mx.graphics.RadialGradient.begin(flash.display.Graphics,flash.geom.Rectangle)">
      <summary>Starts the fill.</summary>
      <param name="target">The target Graphics object that is being filled.</param>
      <param name="rc">The Rectangle object that defines the size of the fill inside the <code>target</code>. If the dimensions of the Rectangle are larger than the dimensions of the <code>target</code>, the fill is clipped. If the dimensions of the Rectangle are smaller than the dimensions of the <code>target</code>, the fill expands to fill the entire <code>target</code>.</param>
    </member>
    <member name="M:mx.graphics.RadialGradient.end(flash.display.Graphics)">
      <summary>Ends the fill.</summary>
      <param name="target">The Graphics object that is being filled.</param>
    </member>
    <member name="P:mx.graphics.RadialGradient.angle">
      <summary>Sets the location of the start of the radial fill.</summary>
    </member>
    <member name="P:mx.graphics.RadialGradient.focalPointRatio">
      <summary>Sets the location of the start of the radial fill.</summary>
    </member>
    <member name="T:mx.graphics.RectangularDropShadow">
      <summary>Drop shadows are typically created using the DropShadowFilter class.</summary>
    </member>
    <member name="M:mx.graphics.RectangularDropShadow.drawShadow(flash.display.Graphics,System.Double,System.Double,System.Double,System.Double)">
      <summary>Renders the shadow on the screen.</summary>
      <param name="g">The Graphics object on which to draw the shadow.</param>
      <param name="x">The horizontal offset of the drop shadow, based on the Graphics object's position.</param>
      <param name="y">The vertical offset of the drop shadow, based on the Graphics object's position.</param>
      <param name="width">The width of the shadow, in pixels.</param>
      <param name="height">The height of the shadow, in pixels.</param>
    </member>
    <member name="P:mx.graphics.RectangularDropShadow.alpha">
      <summary />
    </member>
    <member name="P:mx.graphics.RectangularDropShadow.angle">
      <summary />
    </member>
    <member name="P:mx.graphics.RectangularDropShadow.blRadius">
      <summary>The corner radius of the bottom left corner of the rounded rectangle that is casting the shadow.</summary>
    </member>
    <member name="P:mx.graphics.RectangularDropShadow.brRadius">
      <summary>The corner radius of the bottom right corner of the rounded rectangle that is casting the shadow.</summary>
    </member>
    <member name="P:mx.graphics.RectangularDropShadow.color">
      <summary />
    </member>
    <member name="P:mx.graphics.RectangularDropShadow.distance">
      <summary />
    </member>
    <member name="P:mx.graphics.RectangularDropShadow.tlRadius">
      <summary>The corner radius of the top left corner of the rounded rectangle that is casting the shadow.</summary>
    </member>
    <member name="P:mx.graphics.RectangularDropShadow.trRadius">
      <summary>The corner radius of the top right corner of the rounded rectangle that is casting the shadow.</summary>
    </member>
    <member name="T:mx.graphics.RoundedRectangle">
      <summary>RoundedRectangle represents a Rectangle with curved corners</summary>
    </member>
    <member name="F:mx.graphics.RoundedRectangle.cornerRadius">
      <summary>The radius of each corner (in pixels).</summary>
    </member>
    <member name="T:mx.graphics.SolidColor">
      <summary>Defines a representation for a color, including a color and an alpha value.</summary>
    </member>
    <member name="M:mx.graphics.SolidColor.begin(flash.display.Graphics,flash.geom.Rectangle)">
      <summary>Starts the fill.</summary>
      <param name="target">The target Graphics object that is being filled.</param>
      <param name="rc">The Rectangle object that defines the size of the fill inside the <code>target</code>. If the dimensions of the Rectangle are larger than the dimensions of the <code>target</code>, the fill is clipped. If the dimensions of the Rectangle are smaller than the dimensions of the <code>target</code>, the fill expands to fill the entire <code>target</code>.</param>
    </member>
    <member name="M:mx.graphics.SolidColor.end(flash.display.Graphics)">
      <summary>Ends the fill.</summary>
      <param name="target">The Graphics object that is being filled.</param>
    </member>
    <member name="P:mx.graphics.SolidColor.alpha">
      <summary>The transparency of a color.</summary>
    </member>
    <member name="P:mx.graphics.SolidColor.color">
      <summary>A color value.</summary>
    </member>
    <member name="T:mx.graphics.Stroke">
      <summary>The Stroke class defines the properties for a line.</summary>
    </member>
    <member name="M:mx.graphics.Stroke.apply(flash.display.Graphics)">
      <summary>Applies the properties to the specified Graphics object.</summary>
      <param name="g">The Graphics object to which the Stroke's styles are applied.</param>
    </member>
    <member name="P:mx.graphics.Stroke.alpha">
      <summary>The transparency of a line.</summary>
    </member>
    <member name="P:mx.graphics.Stroke.caps">
      <summary>Specifies the type of caps at the end of lines.</summary>
    </member>
    <member name="P:mx.graphics.Stroke.color">
      <summary>The line color.</summary>
    </member>
    <member name="P:mx.graphics.Stroke.joints">
      <summary>Specifies the type of joint appearance used at angles.</summary>
    </member>
    <member name="P:mx.graphics.Stroke.miterLimit">
      <summary>Indicates the limit at which a miter is cut off.</summary>
    </member>
    <member name="P:mx.graphics.Stroke.pixelHinting">
      <summary>Specifies whether to hint strokes to full pixels.</summary>
    </member>
    <member name="P:mx.graphics.Stroke.scaleMode">
      <summary>Specifies how to scale a stroke.</summary>
    </member>
    <member name="P:mx.graphics.Stroke.weight">
      <summary>The line weight, in pixels.</summary>
    </member>
    <member name="N:mx.logging" />
    <member name="T:mx.logging.AbstractTarget">
      <summary>This class provides the basic functionality required by the logging framework for a target implementation.</summary>
    </member>
    <member name="M:mx.logging.AbstractTarget.addLogger(mx.logging.ILogger)">
      <summary>Sets up this target with the specified logger.</summary>
      <param name="logger">The ILogger that this target should listen to.</param>
    </member>
    <member name="M:mx.logging.AbstractTarget.initialized(System.Object,Avm.String)">
      <summary>Called after the implementing object has been created and all properties specified on the tag have been assigned.</summary>
      <param name="document">MXML document that created this object.</param>
      <param name="id">Used by the document to refer to this object. If the object is a deep property on the document, id is null.</param>
    </member>
    <member name="M:mx.logging.AbstractTarget.logEvent(mx.logging.LogEvent)">
      <summary>This method handles a <code>LogEvent</code> from an associated logger.</summary>
      <param name="event" />
    </member>
    <member name="M:mx.logging.AbstractTarget.removeLogger(mx.logging.ILogger)">
      <summary>Stops this target from receiving events from the specified logger.</summary>
      <param name="logger">The ILogger that this target should ignore.</param>
    </member>
    <member name="P:mx.logging.AbstractTarget.filters">
      <summary>In addition to the <code>level</code> setting, filters are used to provide a psuedo-hierarchical mapping for processing only those events for a given category.</summary>
    </member>
    <member name="P:mx.logging.AbstractTarget.id">
      <summary>Provides access to the id of this target.</summary>
    </member>
    <member name="P:mx.logging.AbstractTarget.level">
      <summary>Provides access to the level this target is currently set at.</summary>
    </member>
    <member name="N:mx.logging.errors" />
    <member name="T:mx.logging.errors.InvalidCategoryError">
      <summary>This error is thrown when a category specified for a logger contains invalid characters or is malformed.</summary>
    </member>
    <member name="M:mx.logging.errors.InvalidCategoryError.toString">
      <summary>Returns the messge as a String.</summary>
    </member>
    <member name="T:mx.logging.errors.InvalidFilterError">
      <summary>This error is thrown when a filter specified for a target contains invalid characters or is malformed.</summary>
    </member>
    <member name="M:mx.logging.errors.InvalidFilterError.toString">
      <summary>Returns the messge as a String.</summary>
    </member>
    <member name="T:mx.logging.ILogger">
      <summary>All loggers within the logging framework must implement this interface.</summary>
    </member>
    <member name="M:mx.logging.ILogger.debug(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEventLevel.DEBUG</code> level.</summary>
      <param name="message">The information to log. This string can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.ILogger.error(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEventLevel.ERROR</code> level.</summary>
      <param name="message">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.ILogger.fatal(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEventLevel.FATAL</code> level.</summary>
      <param name="message">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.ILogger.info(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEvent.INFO</code> level.</summary>
      <param name="message">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.ILogger.log(System.Int32,Avm.String,System.Object)">
      <summary>Logs the specified data at the given level.</summary>
      <param name="level">The level this information should be logged at. Valid values are: <ul> <li><code>LogEventLevel.FATAL</code> designates events that are very harmful and will eventually lead to application failure</li> <li><code>LogEventLevel.ERROR</code> designates error events that might still allow the application to continue running.</li> <li><code>LogEventLevel.WARN</code> designates events that could be harmful to the application operation</li> <li><code>LogEventLevel.INFO</code> designates informational messages that highlight the progress of the application at coarse-grained level.</li> <li><code>LogEventLevel.DEBUG</code> designates informational level messages that are fine grained and most helpful when debugging an application.</li> <li><code>LogEventLevel.ALL</code> intended to force a target to process all messages.</li> </ul></param>
      <param name="message">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.ILogger.warn(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEventLevel.WARN</code> level.</summary>
      <param name="message">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Aadditional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="P:mx.logging.ILogger.category">
      <summary>The category value for the logger.</summary>
    </member>
    <member name="T:mx.logging.ILoggingTarget">
      <summary>All logger target implementations within the logging framework must implement this interface.</summary>
    </member>
    <member name="M:mx.logging.ILoggingTarget.addLogger(mx.logging.ILogger)">
      <summary>Sets up this target with the specified logger.</summary>
      <param name="logger">The ILogger that this target listens to.</param>
    </member>
    <member name="M:mx.logging.ILoggingTarget.removeLogger(mx.logging.ILogger)">
      <summary>Stops this target from receiving events from the specified logger.</summary>
      <param name="logger">The ILogger that this target ignores.</param>
    </member>
    <member name="P:mx.logging.ILoggingTarget.filters">
      <summary>In addition to the <code>level</code> setting, filters are used to provide a psuedo-hierarchical mapping for processing only those events for a given category.</summary>
    </member>
    <member name="P:mx.logging.ILoggingTarget.level">
      <summary>Provides access to the level this target is currently set at.</summary>
    </member>
    <member name="T:mx.logging.Log">
      <summary>Provides pseudo-hierarchical logging capabilities with multiple format and output options.</summary>
    </member>
    <member name="M:mx.logging.Log.addTarget(mx.logging.ILoggingTarget)">
      <summary>Allows the specified target to begin receiving notification of log events.</summary>
      <param name="target">specific target that should capture log events.</param>
    </member>
    <member name="M:mx.logging.Log.flush">
      <summary>This method removes all of the current loggers from the cache.</summary>
    </member>
    <member name="M:mx.logging.Log.getLogger(Avm.String)">
      <summary>Returns the logger associated with the specified category.</summary>
      <param name="category">The category of the logger that should be returned.</param>
    </member>
    <member name="M:mx.logging.Log.hasIllegalCharacters(Avm.String)">
      <summary>This method checks the specified string value for illegal characters.</summary>
      <param name="value">The String to check for illegal characters. The following characters are not valid: []~$^&amp;\/(){}&lt;&gt;+=`!#%?,:;'"&#64;</param>
    </member>
    <member name="M:mx.logging.Log.isDebug">
      <summary>Indicates whether a debug level log event will be processed by a log target.</summary>
    </member>
    <member name="M:mx.logging.Log.isError">
      <summary>Indicates whether an error level log event will be processed by a log target.</summary>
    </member>
    <member name="M:mx.logging.Log.isFatal">
      <summary>Indicates whether a fatal level log event will be processed by a log target.</summary>
    </member>
    <member name="M:mx.logging.Log.isInfo">
      <summary>Indicates whether an info level log event will be processed by a log target.</summary>
    </member>
    <member name="M:mx.logging.Log.isWarn">
      <summary>Indicates whether a warn level log event will be processed by a log target.</summary>
    </member>
    <member name="M:mx.logging.Log.removeTarget(mx.logging.ILoggingTarget)">
      <summary>Stops the specified target from receiving notification of log events.</summary>
      <param name="target">specific target that should capture log events.</param>
    </member>
    <member name="T:mx.logging.LogEvent">
      <summary>Represents the log information for a single logging event.</summary>
    </member>
    <member name="M:mx.logging.LogEvent.#ctor(Avm.String,System.Int32)">
      <summary>Constructor.</summary>
      <param name="message">String containing the log data.</param>
      <param name="level">The level for this log event. Valid values are: <ul> <li><code>LogEventLevel.FATAL</code> designates events that are very harmful and will eventually lead to application failure</li> <li><code>LogEventLevel.ERROR</code> designates error events that might still allow the application to continue running.</li> <li><code>LogEventLevel.WARN</code> designates events that could be harmful to the application operation</li> <li><code>LogEventLevel.INFO</code> designates informational messages that highlight the progress of the application at coarse-grained level.</li> <li><code>LogEventLevel.DEBUG</code> designates informational level messages that are fine grained and most helpful when debugging an application.</li> <li><code>LogEventLevel.ALL</code> intended to force a target to process all messages.</li> </ul></param>
    </member>
    <member name="M:mx.logging.LogEvent.getLevelString(System.UInt32)">
      <summary>Returns a string value representing the level specified.</summary>
      <param name="value">level a string is desired for.</param>
    </member>
    <member name="F:mx.logging.LogEvent.level">
      <summary>Provides access to the level for this log event.</summary>
    </member>
    <member name="F:mx.logging.LogEvent.message">
      <summary>Provides access to the message that was logged.</summary>
    </member>
    <member name="T:mx.logging.LogEventLevel">
      <summary>Static class containing constants for use in the <code>level</code> property.</summary>
    </member>
    <member name="F:mx.logging.LogEventLevel.ALL">
      <summary>Tells a target to process all messages.</summary>
    </member>
    <member name="F:mx.logging.LogEventLevel.DEBUG">
      <summary>Designates informational level messages that are fine grained and most helpful when debugging an application.</summary>
    </member>
    <member name="F:mx.logging.LogEventLevel.ERROR">
      <summary>Designates error events that might still allow the application to continue running.</summary>
    </member>
    <member name="F:mx.logging.LogEventLevel.INFO">
      <summary>Designates informational messages that highlight the progress of the application at coarse-grained level.</summary>
    </member>
    <member name="F:mx.logging.LogEventLevel.WARN">
      <summary>Designates events that could be harmful to the application operation.</summary>
    </member>
    <member name="T:mx.logging.LogLogger">
      <summary>The logger that is used within the logging framework.</summary>
    </member>
    <member name="M:mx.logging.LogLogger.debug(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEventLevel.DEBUG</code> level.</summary>
      <param name="msg">The information to log. This string can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.LogLogger.error(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEventLevel.ERROR</code> level.</summary>
      <param name="msg">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.LogLogger.fatal(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEventLevel.FATAL</code> level.</summary>
      <param name="msg">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.LogLogger.info(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEvent.INFO</code> level.</summary>
      <param name="msg">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.LogLogger.log(System.Int32,Avm.String,System.Object)">
      <summary>Logs the specified data at the given level.</summary>
      <param name="level">The level this information should be logged at. Valid values are: <ul> <li><code>LogEventLevel.FATAL</code> designates events that are very harmful and will eventually lead to application failure</li> <li><code>LogEventLevel.ERROR</code> designates error events that might still allow the application to continue running.</li> <li><code>LogEventLevel.WARN</code> designates events that could be harmful to the application operation</li> <li><code>LogEventLevel.INFO</code> designates informational messages that highlight the progress of the application at coarse-grained level.</li> <li><code>LogEventLevel.DEBUG</code> designates informational level messages that are fine grained and most helpful when debugging an application.</li> <li><code>LogEventLevel.ALL</code> intended to force a target to process all messages.</li> </ul></param>
      <param name="msg">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="M:mx.logging.LogLogger.warn(Avm.String,System.Object)">
      <summary>Logs the specified data using the <code>LogEventLevel.WARN</code> level.</summary>
      <param name="msg">The information to log. This String can contain special marker characters of the form {x}, where x is a zero based index that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Aadditional parameters that can be subsituted in the str parameter at each "{<code>x</code>}" location, where <code>x</code> is an integer (zero based) index value into the Array of values specified.</param>
    </member>
    <member name="P:mx.logging.LogLogger.category">
      <summary>The category this logger send messages for.</summary>
    </member>
    <member name="N:mx.logging.targets" />
    <member name="T:mx.logging.targets.LineFormattedTarget">
      <summary>All logger target implementations that have a formatted line style output should extend this class.</summary>
    </member>
    <member name="M:mx.logging.targets.LineFormattedTarget.logEvent(mx.logging.LogEvent)">
      <summary>This method handles a <code>LogEvent</code> from an associated logger.</summary>
      <param name="event">The <code>LogEvent</code> handled by this method.</param>
    </member>
    <member name="F:mx.logging.targets.LineFormattedTarget.fieldSeparator">
      <summary>The separator string to use between fields (the default is " ")</summary>
    </member>
    <member name="F:mx.logging.targets.LineFormattedTarget.includeCategory">
      <summary>Indicates if the category for this target should added to the trace.</summary>
    </member>
    <member name="F:mx.logging.targets.LineFormattedTarget.includeDate">
      <summary>Indicates if the date should be added to the trace.</summary>
    </member>
    <member name="F:mx.logging.targets.LineFormattedTarget.includeLevel">
      <summary>Indicates if the level for the event should added to the trace.</summary>
    </member>
    <member name="F:mx.logging.targets.LineFormattedTarget.includeTime">
      <summary>Indicates if the time should be added to the trace.</summary>
    </member>
    <member name="T:mx.logging.targets.MiniDebugTarget">
      <summary>Provides a logger target that outputs to a <code>LocalConnection</code>, connected to the MiniDebug application.</summary>
    </member>
    <member name="T:mx.logging.targets.TraceTarget">
      <summary>Provides a logger target that uses the global <code>trace()</code> method to output log messages.</summary>
    </member>
    <member name="N:mx.managers" />
    <member name="T:mx.managers.BrowserManager">
      <summary>The BrowserManager is a Singleton manager that acts as a proxy between the browser and the application.</summary>
    </member>
    <member name="M:mx.managers.BrowserManager.getInstance">
      <summary>Returns the sole instance of this Singleton class; creates it if it does not already exist.</summary>
    </member>
    <member name="T:mx.managers.CursorManager">
      <summary>The CursorManager class controls a prioritized list of cursors, where the cursor with the highest priority is currently visible.</summary>
    </member>
    <member name="M:mx.managers.CursorManager.getInstance">
      <summary>Each mx.core.Window instance in an AIR application has its own CursorManager instance.</summary>
    </member>
    <member name="M:mx.managers.CursorManager.hideCursor">
      <summary>Makes the cursor invisible.</summary>
    </member>
    <member name="M:mx.managers.CursorManager.removeAllCursors">
      <summary>Removes all of the cursors from the cursor list and restores the system cursor.</summary>
    </member>
    <member name="M:mx.managers.CursorManager.removeBusyCursor">
      <summary>Removes the busy cursor from the cursor list.</summary>
    </member>
    <member name="M:mx.managers.CursorManager.removeCursor(System.Int32)">
      <summary>Removes a cursor from the cursor list.</summary>
      <param name="cursorID">ID of cursor to remove.</param>
    </member>
    <member name="M:mx.managers.CursorManager.setBusyCursor">
      <summary>Displays the busy cursor.</summary>
    </member>
    <member name="M:mx.managers.CursorManager.setCursor(Avm.Class,System.Int32,System.Double,System.Double)">
      <summary>Creates a new cursor and sets an optional priority for the cursor.</summary>
      <param name="cursorClass">Class of the cursor to display.</param>
      <param name="priority">Integer that specifies the priority level of the cursor. Possible values are <code>CursorManagerPriority.HIGH</code>, <code>CursorManagerPriority.MEDIUM</code>, and <code>CursorManagerPriority.LOW</code>.</param>
      <param name="xOffset">Number that specifies the x offset of the cursor, in pixels, relative to the mouse pointer.</param>
      <param name="yOffset">Number that specifies the y offset of the cursor, in pixels, relative to the mouse pointer.</param>
    </member>
    <member name="M:mx.managers.CursorManager.showCursor">
      <summary>Makes the cursor visible.</summary>
    </member>
    <member name="P:mx.managers.CursorManager.currentCursorID">
      <summary>ID of the current custom cursor, or NO_CURSOR if the system cursor is showing.</summary>
    </member>
    <member name="P:mx.managers.CursorManager.currentCursorXOffset">
      <summary>The x offset of the custom cursor, in pixels, relative to the mouse pointer.</summary>
    </member>
    <member name="P:mx.managers.CursorManager.currentCursorYOffset">
      <summary>The y offset of the custom cursor, in pixels, relative to the mouse pointer.</summary>
    </member>
    <member name="T:mx.managers.CursorManagerPriority">
      <summary>The CursorManagerPriority class defines the constant values for the <code>priority</code> argument to the <code>CursorManager.setCursor()</code> method.</summary>
    </member>
    <member name="F:mx.managers.CursorManagerPriority.LOW">
      <summary>Constant that specifies the lowest cursor priority when passed as the <code>priority</code> argument to <code>setCursor()</code>.</summary>
    </member>
    <member name="F:mx.managers.CursorManagerPriority.MEDIUM">
      <summary>Constant that specifies a medium cursor priority when passed as the <code>priority</code> argument to <code>setCursor()</code>.</summary>
    </member>
    <member name="T:mx.managers.DragManager">
      <summary>The DragManager class manages drag and drop operations, which let you move data from one place to another in a Flex application.</summary>
    </member>
    <member name="M:mx.managers.DragManager.acceptDragDrop(mx.core.IUIComponent)">
      <summary>Call this method from your <code>dragEnter</code> event handler if you accept the drag/drop data.</summary>
      <param name="target">The drop target accepting the drag.</param>
    </member>
    <member name="M:mx.managers.DragManager.doDrag(mx.core.IUIComponent,mx.core.DragSource,flash.events.MouseEvent,mx.core.IFlexDisplayObject,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>Initiates a drag and drop operation.</summary>
      <param name="dragInitiator">IUIComponent that specifies the component initiating the drag.</param>
      <param name="dragSource">DragSource object that contains the data being dragged.</param>
      <param name="mouseEvent">The MouseEvent that contains the mouse information for the start of the drag.</param>
      <param name="dragImage">The image to drag. This argument is optional. If omitted, a standard drag rectangle is used during the drag and drop operation. If you specify an image, you must explicitly set a height and width of the image or else it will not appear.</param>
      <param name="xOffset">Number that specifies the x offset, in pixels, for the <code>dragImage</code>. This argument is optional. If omitted, the drag proxy is shown at the upper-left corner of the drag initiator. The offset is expressed in pixels from the left edge of the drag proxy to the left edge of the drag initiator, and is usually a negative number.</param>
      <param name="yOffset">Number that specifies the y offset, in pixels, for the <code>dragImage</code>. This argument is optional. If omitted, the drag proxy is shown at the upper-left corner of the drag initiator. The offset is expressed in pixels from the top edge of the drag proxy to the top edge of the drag initiator, and is usually a negative number.</param>
      <param name="imageAlpha">Number that specifies the alpha value used for the drag image. This argument is optional. If omitted, the default alpha value is 0.5. A value of 0.0 indicates that the image is transparent; a value of 1.0 indicates it is fully opaque.</param>
      <param name="allowMove" />
    </member>
    <member name="M:mx.managers.DragManager.getFeedback">
      <summary>Returns the current drag and drop feedback.</summary>
    </member>
    <member name="M:mx.managers.DragManager.showFeedback(Avm.String)">
      <summary>Sets the feedback indicator for the drag and drop operation.</summary>
      <param name="feedback">The type of feedback indicator to display.</param>
    </member>
    <member name="F:mx.managers.DragManager.COPY">
      <summary>Constant that specifies that the type of drag action is "copy".</summary>
    </member>
    <member name="F:mx.managers.DragManager.LINK">
      <summary>Constant that specifies that the type of drag action is "link".</summary>
    </member>
    <member name="F:mx.managers.DragManager.MOVE">
      <summary>Constant that specifies that the type of drag action is "move".</summary>
    </member>
    <member name="P:mx.managers.DragManager.isDragging">
      <summary>Read-only property that returns <code>true</code> if a drag is in progress.</summary>
    </member>
    <member name="T:mx.managers.FocusManager">
      <summary>The FocusManager class manages the focus on components in response to mouse activity or keyboard activity (Tab key).</summary>
    </member>
    <member name="M:mx.managers.FocusManager.activate">
      <summary>The SystemManager activates and deactivates a FocusManager if more than one IFocusManagerContainer is visible at the same time.</summary>
    </member>
    <member name="M:mx.managers.FocusManager.deactivate">
      <summary>The SystemManager activates and deactivates a FocusManager if more than one IFocusManagerContainer is visible at the same time.</summary>
    </member>
    <member name="M:mx.managers.FocusManager.findFocusManagerComponent(flash.display.InteractiveObject)">
      <summary>Returns the IFocusManagerComponent that contains the given object, if any.</summary>
      <param name="o">An object that can have player-level focus.</param>
    </member>
    <member name="M:mx.managers.FocusManager.getFocus">
      <summary>Gets the IFocusManagerComponent component that currently has the focus.</summary>
    </member>
    <member name="M:mx.managers.FocusManager.getNextFocusManagerComponent(System.Boolean)">
      <summary>Returns the IFocusManagerComponent that would receive focus if the user pressed the Tab key to navigate to another component.</summary>
      <param name="backward">If <code>true</code>, return the object as if the Shift-Tab keys were pressed.</param>
    </member>
    <member name="M:mx.managers.FocusManager.hideFocus">
      <summary>Sets <code>showFocusIndicator</code> to <code>false</code> and removes the visual focus indicator from the focused object, if any.</summary>
    </member>
    <member name="M:mx.managers.FocusManager.setFocus(mx.managers.IFocusManagerComponent)">
      <summary>Sets focus to an IFocusManagerComponent component.</summary>
      <param name="o">A component that can receive focus.</param>
    </member>
    <member name="M:mx.managers.FocusManager.showFocus">
      <summary>Sets <code>showFocusIndicator</code> to <code>true</code> and draws the visual focus indicator on the focused object, if any.</summary>
    </member>
    <member name="M:mx.managers.FocusManager.toString">
      <summary>Returns a String representation of the component hosting the FocusManager object, with the String <code>".focusManager"</code> appended to the end of the String.</summary>
    </member>
    <member name="P:mx.managers.FocusManager.defaultButton">
      <summary>A reference to the original default Button control.</summary>
    </member>
    <member name="P:mx.managers.FocusManager.defaultButtonEnabled">
      <summary>A flag that indicates whether the FocusManager should check for the Enter key being pressed to activate the default button.</summary>
    </member>
    <member name="P:mx.managers.FocusManager.focusPane">
      <summary>A single Sprite that is moved from container to container as the focus moves to those containers.</summary>
    </member>
    <member name="P:mx.managers.FocusManager.nextTabIndex">
      <summary>The next unique tab index to use in this tab loop.</summary>
    </member>
    <member name="P:mx.managers.FocusManager.showFocusIndicator">
      <summary>A flag that indicates whether to display an indicator that a component has focus.</summary>
    </member>
    <member name="T:mx.managers.HistoryManager">
      <summary>History management lets users navigate through a Flex application using the web browser's Back and Forward navigation commands.</summary>
    </member>
    <member name="M:mx.managers.HistoryManager.initialize(mx.managers.ISystemManager)">
      <summary>DEPRECATED - Initializes the HistoryManager.</summary>
      <param name="sm">SystemManager for this application.</param>
    </member>
    <member name="M:mx.managers.HistoryManager.register(mx.managers.IHistoryManagerClient)">
      <summary>Registers an object with the HistoryManager.</summary>
      <param name="obj">Object to register.</param>
    </member>
    <member name="M:mx.managers.HistoryManager.save">
      <summary>Saves the application's current state so it can be restored later.</summary>
    </member>
    <member name="M:mx.managers.HistoryManager.unregister(mx.managers.IHistoryManagerClient)">
      <summary>Unregisters an object with the HistoryManager.</summary>
      <param name="obj">Object to unregister.</param>
    </member>
    <member name="T:mx.managers.IBrowserManager">
      <summary>The interface that the shared instance of the BrowserManager implements.</summary>
    </member>
    <member name="E:mx.managers.IBrowserManager.urlChange">
      <summary>Dispatched when the URL is changed by the application.</summary>
    </member>
    <member name="E:mx.managers.IBrowserManager.browserURLChange">
      <summary>Dispatched when the URL is changed by the browser.</summary>
    </member>
    <member name="E:mx.managers.IBrowserManager.change">
      <summary>Dispatched when the URL is changed either by the user interacting with the browser, invoking an application in AIR, or by setting the property programmatically.</summary>
    </member>
    <member name="M:mx.managers.IBrowserManager.init(Avm.String,Avm.String)">
      <summary>Initializes the BrowserManager.</summary>
      <param name="value">The fragment to use if no fragment is in the initial URL.</param>
      <param name="title">The title to use if no fragment is in the initial URL.</param>
    </member>
    <member name="M:mx.managers.IBrowserManager.initForHistoryManager">
      <summary>Initializes the BrowserManager.</summary>
    </member>
    <member name="M:mx.managers.IBrowserManager.setFragment(Avm.String)">
      <summary>Changes the fragment of the URL after the '#' in the browser.</summary>
      <param name="value" />
    </member>
    <member name="M:mx.managers.IBrowserManager.setTitle(Avm.String)">
      <summary>Changes the text in the browser's title bar.</summary>
      <param name="value" />
    </member>
    <member name="P:mx.managers.IBrowserManager.base">
      <summary>The portion of current URL before the '#' as it appears in the browser address bar.</summary>
    </member>
    <member name="P:mx.managers.IBrowserManager.fragment">
      <summary>The portion of current URL after the '#' as it appears in the browser address bar.</summary>
    </member>
    <member name="P:mx.managers.IBrowserManager.title">
      <summary>The title of the application as it should appear in the browser history.</summary>
    </member>
    <member name="P:mx.managers.IBrowserManager.url">
      <summary>The current URL as it appears in the browser address bar.</summary>
    </member>
    <member name="T:mx.managers.IFocusManager">
      <summary>The IFocusManager interface defines the interface that components must implement to manage the focus on components in response to mouse activity or keyboard activity (Tab key), and to support a default button.</summary>
    </member>
    <member name="M:mx.managers.IFocusManager.activate">
      <summary>The SystemManager activates and deactivates a FocusManager if more than one IFocusManagerContainer is visible at the same time.</summary>
    </member>
    <member name="M:mx.managers.IFocusManager.deactivate">
      <summary>The SystemManager activates and deactivates a FocusManager if more than one IFocusManagerContainer is visible at the same time.</summary>
    </member>
    <member name="M:mx.managers.IFocusManager.findFocusManagerComponent(flash.display.InteractiveObject)">
      <summary>Returns the IFocusManagerComponent that contains the given object, if any.</summary>
      <param name="o">An object that can have player-level focus.</param>
    </member>
    <member name="M:mx.managers.IFocusManager.getFocus">
      <summary>Gets the IFocusManagerComponent component that currently has the focus.</summary>
    </member>
    <member name="M:mx.managers.IFocusManager.getNextFocusManagerComponent(System.Boolean)">
      <summary>Returns the IFocusManagerComponent that would receive focus if the user pressed the Tab key to navigate to another component.</summary>
      <param name="backward">If <code>true</code>, return the object as if the Shift-Tab keys were pressed.</param>
    </member>
    <member name="M:mx.managers.IFocusManager.hideFocus">
      <summary>Sets <code>showFocusIndicator</code> to <code>false</code> and removes the visual focus indicator from the focused object, if any.</summary>
    </member>
    <member name="M:mx.managers.IFocusManager.setFocus(mx.managers.IFocusManagerComponent)">
      <summary>Sets focus to an IFocusManagerComponent component.</summary>
      <param name="o">A component that can receive focus.</param>
    </member>
    <member name="M:mx.managers.IFocusManager.showFocus">
      <summary>Sets <code>showFocusIndicator</code> to <code>true</code> and draws the visual focus indicator on the focused object, if any.</summary>
    </member>
    <member name="P:mx.managers.IFocusManager.defaultButton">
      <summary>A reference to the original default Button control.</summary>
    </member>
    <member name="P:mx.managers.IFocusManager.defaultButtonEnabled">
      <summary>A flag that indicates whether the FocusManager should check for the Enter key being pressed to activate the default button.</summary>
    </member>
    <member name="P:mx.managers.IFocusManager.focusPane">
      <summary>A single Sprite that is moved from container to container as the focus moves to those containers.</summary>
    </member>
    <member name="P:mx.managers.IFocusManager.nextTabIndex">
      <summary>The next unique tab index to use in this tab loop.</summary>
    </member>
    <member name="P:mx.managers.IFocusManager.showFocusIndicator">
      <summary>A flag that indicates whether to display an indicator that a component has focus.</summary>
    </member>
    <member name="T:mx.managers.IFocusManagerComplexComponent">
      <summary>The IFocusManagerComplexComponent interface defines the interface that components that can have more than one internal focus target should implement in order to receive focus from the FocusManager.</summary>
    </member>
    <member name="M:mx.managers.IFocusManagerComplexComponent.assignFocus(Avm.String)">
      <summary>Called by the FocusManager when the component receives focus.</summary>
      <param name="direction">"bottom" if TAB used with SHIFT key, "top" otherwise</param>
    </member>
    <member name="P:mx.managers.IFocusManagerComplexComponent.hasFocusableContent">
      <summary>A flag that indicates whether the component currently has internal focusable targets</summary>
    </member>
    <member name="T:mx.managers.IFocusManagerComponent">
      <summary>The IFocusManagerComponent interface defines the interface that focusable components must implement in order to receive focus from the FocusManager.</summary>
    </member>
    <member name="M:mx.managers.IFocusManagerComponent.drawFocus(System.Boolean)">
      <summary>Called by the FocusManager when the component receives focus.</summary>
      <param name="isFocused">If <code>true</code>, draw the focus indicator, otherwise hide it.</param>
    </member>
    <member name="M:mx.managers.IFocusManagerComponent.setFocus">
      <summary>Called by the FocusManager when the component receives focus.</summary>
    </member>
    <member name="P:mx.managers.IFocusManagerComponent.focusEnabled">
      <summary>A flag that indicates whether the component can receive focus when selected.</summary>
    </member>
    <member name="P:mx.managers.IFocusManagerComponent.mouseFocusEnabled">
      <summary>A flag that indicates whether the component can receive focus when selected with the mouse.</summary>
    </member>
    <member name="P:mx.managers.IFocusManagerComponent.tabEnabled">
      <summary>A flag that indicates whether pressing the Tab key eventually moves focus to this component.</summary>
    </member>
    <member name="P:mx.managers.IFocusManagerComponent.tabIndex">
      <summary>If <code>tabEnabled</code>, the order in which the component receives focus.</summary>
    </member>
    <member name="T:mx.managers.IFocusManagerContainer">
      <summary>The IFocusManagerContainer interface defines the interface that containers implement to host a FocusManager.</summary>
    </member>
    <member name="M:mx.managers.IFocusManagerContainer.contains(flash.display.DisplayObject)">
      <summary>Determines whether the specified display object is a child of the container instance or the instance itself.</summary>
      <param name="child">The child object to test.</param>
    </member>
    <member name="P:mx.managers.IFocusManagerContainer.focusManager">
      <summary>The FocusManager for this component.</summary>
    </member>
    <member name="P:mx.managers.IFocusManagerContainer.systemManager">
      <summary />
    </member>
    <member name="T:mx.managers.IFocusManagerGroup">
      <summary>The IFocusManagerGroup interface defines the interface that any component must implement if it is grouped in sets, where only one member of the set can be selected at any given time.</summary>
    </member>
    <member name="P:mx.managers.IFocusManagerGroup.groupName">
      <summary>The name of the group of controls to which the control belongs.</summary>
    </member>
    <member name="P:mx.managers.IFocusManagerGroup.selected">
      <summary>A flag that indicates whether this control is selected.</summary>
    </member>
    <member name="T:mx.managers.IHistoryManagerClient">
      <summary>Interface that must be implemented by objects registered with the History Manager.</summary>
    </member>
    <member name="M:mx.managers.IHistoryManagerClient.loadState(System.Object)">
      <summary>Loads the state of this object.</summary>
      <param name="state">State of this object to load. This will be null when loading the initial state of the application.</param>
    </member>
    <member name="M:mx.managers.IHistoryManagerClient.saveState">
      <summary>Saves the state of this object.</summary>
    </member>
    <member name="M:mx.managers.IHistoryManagerClient.toString">
      <summary>Converts this object to a unique string.</summary>
    </member>
    <member name="T:mx.managers.ILayoutManager">
      <summary>The LayoutManager is the engine behind Flex's measurement and layout strategy.</summary>
    </member>
    <member name="M:mx.managers.ILayoutManager.invalidateDisplayList(mx.managers.ILayoutManagerClient)">
      <summary>Called when a component changes in some way that its layout and/or visuals need to be changed.</summary>
      <param name="obj">The object that changed.</param>
    </member>
    <member name="M:mx.managers.ILayoutManager.invalidateProperties(mx.managers.ILayoutManagerClient)">
      <summary>Adds an object to the list of components that want their <code>validateProperties()</code> method called.</summary>
      <param name="obj">The object whose property changed.</param>
    </member>
    <member name="M:mx.managers.ILayoutManager.invalidateSize(mx.managers.ILayoutManagerClient)">
      <summary>Adds an object to the list of components that want their <code>validateSize()</code> method called.</summary>
      <param name="obj">The object whose size changed.</param>
    </member>
    <member name="M:mx.managers.ILayoutManager.isInvalid">
      <summary>Returns <code>true</code> if there are components that need validating; <code>false</code> if all components have been validated.</summary>
    </member>
    <member name="M:mx.managers.ILayoutManager.validateClient(mx.managers.ILayoutManagerClient,System.Boolean)">
      <summary>When properties are changed, components generally do not apply those changes immediately.</summary>
      <param name="target">The component passed in is used to test which components should be validated.  All components contained by this component will have their <code>validateProperties()</code>, <code>commitProperties()</code>, <code>validateSize()</code>, <code>measure()</code>, <code>validateDisplayList()</code>, and <code>updateDisplayList()</code> methods called.</param>
      <param name="skipDisplayList">If <code>true</code>, does not call the <code>validateDisplayList()</code> and <code>updateDisplayList()</code> methods.</param>
    </member>
    <member name="M:mx.managers.ILayoutManager.validateNow">
      <summary>When properties are changed, components generally do not apply those changes immediately.</summary>
    </member>
    <member name="P:mx.managers.ILayoutManager.usePhasedInstantiation">
      <summary>A flag that indicates whether the LayoutManager allows screen updates between phases.</summary>
    </member>
    <member name="T:mx.managers.ILayoutManagerClient">
      <summary>The ILayoutManagerClient interface defines the interface that a component must implement to participate in the LayoutManager's commit/measurement/layout sequence.</summary>
    </member>
    <member name="M:mx.managers.ILayoutManagerClient.validateDisplayList">
      <summary>Validates the position and size of children and draws other visuals.</summary>
    </member>
    <member name="M:mx.managers.ILayoutManagerClient.validateProperties">
      <summary>Validates the properties of a component.</summary>
    </member>
    <member name="M:mx.managers.ILayoutManagerClient.validateSize(System.Boolean)">
      <summary>Validates the measured size of the component If the <code>LayoutManager.invalidateSize()</code> method is called with this ILayoutManagerClient, then the <code>validateSize()</code> method is called when it's time to do measurements.</summary>
      <param name="recursive">If <code>true</code>, call this method on the objects children.</param>
    </member>
    <member name="P:mx.managers.ILayoutManagerClient.initialized">
      <summary>A flag that determines if an object has been through all three phases of layout validation (provided that any were required) This flag should only be modified by the LayoutManager.</summary>
    </member>
    <member name="P:mx.managers.ILayoutManagerClient.nestLevel">
      <summary>The top-level SystemManager has a nestLevel of 1.</summary>
    </member>
    <member name="P:mx.managers.ILayoutManagerClient.processedDescriptors">
      <summary />
    </member>
    <member name="P:mx.managers.ILayoutManagerClient.updateCompletePendingFlag">
      <summary>A flag that determines if an object is waiting to have its <code>updateComplete</code> event dispatched.</summary>
    </member>
    <member name="T:mx.managers.ISystemManager">
      <summary>An ISystemManager manages an "application window".</summary>
    </member>
    <member name="M:mx.managers.ISystemManager.activate(mx.managers.IFocusManagerContainer)">
      <summary>Activates the FocusManager in an IFocusManagerContainer.</summary>
      <param name="f">IFocusManagerContainer the top-level window whose FocusManager should be activated.</param>
    </member>
    <member name="M:mx.managers.ISystemManager.addFocusManager(mx.managers.IFocusManagerContainer)">
      <summary>Registers a top-level window containing a FocusManager.</summary>
      <param name="f">The top-level window in the application.</param>
    </member>
    <member name="M:mx.managers.ISystemManager.deactivate(mx.managers.IFocusManagerContainer)">
      <summary>Deactivates the FocusManager in an IFocusManagerContainer, and activate the FocusManager of the next highest window that is an IFocusManagerContainer.</summary>
      <param name="f">IFocusManagerContainer the top-level window whose FocusManager should be deactivated.</param>
    </member>
    <member name="M:mx.managers.ISystemManager.getDefinitionByName(Avm.String)">
      <summary>Converts the given String to a Class or package-level Function.</summary>
      <param name="name">Name of class, for example "mx.video.VideoManager".</param>
    </member>
    <member name="M:mx.managers.ISystemManager.isFontFaceEmbedded(flash.text.TextFormat)">
      <summary>Returns <code>true</code> if the required font face is embedded in this application, or has been registered globally by using the <code>Font.registerFont()</code> method.</summary>
      <param name="tf">The TextFormat class representing character formatting information.</param>
    </member>
    <member name="M:mx.managers.ISystemManager.isTopLevel">
      <summary>Returns <code>true</code> if this ISystemManager is responsible for an application window, and <code>false</code> if this application has been loaded into another application.</summary>
    </member>
    <member name="M:mx.managers.ISystemManager.removeFocusManager(mx.managers.IFocusManagerContainer)">
      <summary>Unregisters a top-level window containing a FocusManager.</summary>
      <param name="f">The top-level window in the application.</param>
    </member>
    <member name="P:mx.managers.ISystemManager.cursorChildren">
      <summary>An list of the custom cursors being parented by this ISystemManager.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.document">
      <summary>A reference to the document object.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.focusPane">
      <summary>A single Sprite shared among components used as an overlay for drawing focus.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.loaderInfo">
      <summary>The LoaderInfo object that represents information about the application.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.numModalWindows">
      <summary>The number of modal windows.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.popUpChildren">
      <summary>An list of the topMost (popup) windows being parented by this ISystemManager.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.rawChildren">
      <summary>A list of all children being parented by this ISystemManager.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.screen">
      <summary>The size and position of the application window.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.stage">
      <summary>The flash.display.Stage that represents the application window mapped to this SystemManager</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.toolTipChildren">
      <summary>A list of the tooltips being parented by this ISystemManager.</summary>
    </member>
    <member name="P:mx.managers.ISystemManager.topLevelSystemManager">
      <summary>The ISystemManager responsible for the application window.</summary>
    </member>
    <member name="T:mx.managers.IToolTipManagerClient">
      <summary>Components that implement IToolTipManagerClient can have tooltips and must have a toolTip getter/setter.</summary>
    </member>
    <member name="P:mx.managers.IToolTipManagerClient.toolTip">
      <summary>The text of this component's tooltip.</summary>
    </member>
    <member name="T:mx.managers.LayoutManager">
      <summary>The LayoutManager is the engine behind Flex's measurement and layout strategy.</summary>
    </member>
    <member name="M:mx.managers.LayoutManager.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.managers.LayoutManager.getInstance">
      <summary>Returns the sole instance of this singleton class, creating it if it does not already exist.</summary>
    </member>
    <member name="M:mx.managers.LayoutManager.invalidateDisplayList(mx.managers.ILayoutManagerClient)">
      <summary>Called when a component changes in some way that its layout and/or visuals need to be changed.</summary>
      <param name="obj">The object that changed.</param>
    </member>
    <member name="M:mx.managers.LayoutManager.invalidateProperties(mx.managers.ILayoutManagerClient)">
      <summary>Adds an object to the list of components that want their <code>validateProperties()</code> method called.</summary>
      <param name="obj">The object whose property changed.</param>
    </member>
    <member name="M:mx.managers.LayoutManager.invalidateSize(mx.managers.ILayoutManagerClient)">
      <summary>Adds an object to the list of components that want their <code>validateSize()</code> method called.</summary>
      <param name="obj">The object whose size changed.</param>
    </member>
    <member name="M:mx.managers.LayoutManager.isInvalid">
      <summary>Returns <code>true</code> if there are components that need validating; <code>false</code> if all components have been validated.</summary>
    </member>
    <member name="M:mx.managers.LayoutManager.validateClient(mx.managers.ILayoutManagerClient,System.Boolean)">
      <summary>When properties are changed, components generally do not apply those changes immediately.</summary>
      <param name="target">The component passed in is used to test which components should be validated.  All components contained by this component will have their <code>validateProperties()</code>, <code>commitProperties()</code>, <code>validateSize()</code>, <code>measure()</code>, <code>validateDisplayList()</code>, and <code>updateDisplayList()</code> methods called.</param>
      <param name="skipDisplayList">If <code>true</code>, does not call the <code>validateDisplayList()</code> and <code>updateDisplayList()</code> methods.</param>
    </member>
    <member name="M:mx.managers.LayoutManager.validateNow">
      <summary>When properties are changed, components generally do not apply those changes immediately.</summary>
    </member>
    <member name="P:mx.managers.LayoutManager.usePhasedInstantiation">
      <summary>A flag that indicates whether the LayoutManager allows screen updates between phases.</summary>
    </member>
    <member name="T:mx.managers.PopUpManager">
      <summary>The PopUpManager singleton class creates new top-level windows and places or removes those windows from the layer on top of all other visible windows.</summary>
    </member>
    <member name="M:mx.managers.PopUpManager.addPopUp(mx.core.IFlexDisplayObject,flash.display.DisplayObject,System.Boolean,Avm.String)">
      <summary>Pops up a top-level window.</summary>
      <param name="window">The IFlexDisplayObject to be popped up.</param>
      <param name="parent">DisplayObject to be used for determining which SystemManager's layers to use and optionally  the reference point for centering the new top level window.  It may not be the actual parent of the popup as all popups are parented by the SystemManager.</param>
      <param name="modal">If <code>true</code>, the window is modal which means that the user will not be able to interact with other popups until the window is removed.</param>
      <param name="childList">The child list in which to add the pop-up. One of <code>PopUpManagerChildList.APPLICATION</code>, <code>PopUpManagerChildList.POPUP</code>, or <code>PopUpManagerChildList.PARENT</code> (default).</param>
    </member>
    <member name="M:mx.managers.PopUpManager.bringToFront(mx.core.IFlexDisplayObject)">
      <summary>Makes sure a popup window is higher than other objects in its child list The SystemManager does this automatically if the popup is a top level window and is moused on, but otherwise you have to take care of this yourself.</summary>
      <param name="popUp">IFlexDisplayObject representing the popup.</param>
    </member>
    <member name="M:mx.managers.PopUpManager.centerPopUp(mx.core.IFlexDisplayObject)">
      <summary>Centers a popup window over whatever window was used in the call to the <code>createPopUp()</code> or <code>addPopUp()</code> method.</summary>
      <param name="popUp">IFlexDisplayObject representing the popup.</param>
    </member>
    <member name="M:mx.managers.PopUpManager.createPopUp(flash.display.DisplayObject,Avm.Class,System.Boolean,Avm.String)">
      <summary>Creates a top-level window and places it above other windows in the z-order.</summary>
      <param name="parent">DisplayObject to be used for determining which SystemManager's layers to use and optionally the reference point for centering the new top level window.  It may not be the actual parent of the popup as all popups are parented by the SystemManager.</param>
      <param name="className">Class of object that is to be created for the popup. The class must implement IFlexDisplayObject.</param>
      <param name="modal">If <code>true</code>, the window is modal which means that the user will not be able to interact with other popups until the window is removed.</param>
      <param name="childList">The child list in which to add the popup. One of <code>PopUpManagerChildList.APPLICATION</code>, <code>PopUpManagerChildList.POPUP</code>, or <code>PopUpManagerChildList.PARENT</code> (default).</param>
    </member>
    <member name="M:mx.managers.PopUpManager.removePopUp(mx.core.IFlexDisplayObject)">
      <summary>Removes a popup window popped up by the <code>createPopUp()</code> or <code>addPopUp()</code> method.</summary>
      <param name="popUp">The IFlexDisplayObject representing the popup window.</param>
    </member>
    <member name="T:mx.managers.PopUpManagerChildList">
      <summary>The PopUpManagerChildList class defines the constant values for the <code>detail</code> property of the PopUpManager <code>addPopUp()</code> and <code>createPopUp()</code> methods.</summary>
    </member>
    <member name="F:mx.managers.PopUpManagerChildList.PARENT">
      <summary>Indicates that the popup is placed in whatever child list the parent component is in.</summary>
    </member>
    <member name="F:mx.managers.PopUpManagerChildList.POPUP">
      <summary>Indicates that the popup is placed in the popup child list which will cause it to float over other popups in the application layer.</summary>
    </member>
    <member name="T:mx.managers.SystemManager">
      <summary>The SystemManager class manages an application window.</summary>
    </member>
    <member name="E:mx.managers.SystemManager.resize">
      <summary>Dispatched when the Stage is resized.</summary>
    </member>
    <member name="E:mx.managers.SystemManager.idle">
      <summary>Dispatched every 100 milliseconds when there has been no keyboard or mouse activity for 1 second.</summary>
    </member>
    <member name="E:mx.managers.SystemManager.applicationComplete">
      <summary>Dispatched when the application has finished initializing</summary>
    </member>
    <member name="M:mx.managers.SystemManager.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.managers.SystemManager.activate(mx.managers.IFocusManagerContainer)">
      <summary>Activates the FocusManager in an IFocusManagerContainer.</summary>
      <param name="f">IFocusManagerContainer the top-level window whose FocusManager should be activated.</param>
    </member>
    <member name="M:mx.managers.SystemManager.addFocusManager(mx.managers.IFocusManagerContainer)">
      <summary>Registers a top-level window containing a FocusManager.</summary>
      <param name="f">The top-level window in the application.</param>
    </member>
    <member name="M:mx.managers.SystemManager.create(System.Object)">
      <summary>This method is overridden in the autogenerated subclass.</summary>
      <param name="params" />
    </member>
    <member name="M:mx.managers.SystemManager.deactivate(mx.managers.IFocusManagerContainer)">
      <summary>Deactivates the FocusManager in an IFocusManagerContainer, and activate the FocusManager of the next highest window that is an IFocusManagerContainer.</summary>
      <param name="f">IFocusManagerContainer the top-level window whose FocusManager should be deactivated.</param>
    </member>
    <member name="M:mx.managers.SystemManager.getDefinitionByName(Avm.String)">
      <summary>Converts the given String to a Class or package-level Function.</summary>
      <param name="name">Name of class, for example "mx.video.VideoManager".</param>
    </member>
    <member name="M:mx.managers.SystemManager.getExplicitOrMeasuredHeight">
      <summary>A convenience method for determining whether to use the explicit or measured height.</summary>
    </member>
    <member name="M:mx.managers.SystemManager.getExplicitOrMeasuredWidth">
      <summary>A convenience method for determining whether to use the explicit or measured width.</summary>
    </member>
    <member name="M:mx.managers.SystemManager.getSWFRoot(System.Object)">
      <summary>Returns the root DisplayObject of the SWF that contains the code for the given object.</summary>
      <param name="object">Any Object.</param>
    </member>
    <member name="M:mx.managers.SystemManager.isFontFaceEmbedded(flash.text.TextFormat)">
      <summary>Returns <code>true</code> if the required font face is embedded in this application, or has been registered globally by using the <code>Font.registerFont()</code> method.</summary>
      <param name="textFormat">The TextFormat class representing character formatting information.</param>
    </member>
    <member name="M:mx.managers.SystemManager.isTopLevel">
      <summary>Returns <code>true</code> if this ISystemManager is responsible for an application window, and <code>false</code> if this application has been loaded into another application.</summary>
    </member>
    <member name="M:mx.managers.SystemManager.isTopLevelWindow(flash.display.DisplayObject)">
      <summary>Returns <code>true</code> if the given DisplayObject is the top-level window.</summary>
      <param name="object" />
    </member>
    <member name="M:mx.managers.SystemManager.move(System.Double,System.Double)">
      <summary>Calling the <code>move()</code> method has no effect as it is directly mapped to the application window or the loader.</summary>
      <param name="x">The new x coordinate.</param>
      <param name="y">The new y coordinate.</param>
    </member>
    <member name="M:mx.managers.SystemManager.removeFocusManager(mx.managers.IFocusManagerContainer)">
      <summary>Unregisters a top-level window containing a FocusManager.</summary>
      <param name="f">The top-level window in the application.</param>
    </member>
    <member name="M:mx.managers.SystemManager.setActualSize(System.Double,System.Double)">
      <summary>Calling the <code>setActualSize()</code> method has no effect if it is directly mapped to the application window and if it is the top-level window.</summary>
      <param name="newWidth">The new width.</param>
      <param name="newHeight">The new height.</param>
    </member>
    <member name="P:mx.managers.SystemManager.application">
      <summary>The application parented by this SystemManager.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.cursorChildren">
      <summary>An list of the custom cursors being parented by this ISystemManager.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.document">
      <summary>A reference to the document object.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.embeddedFontList">
      <summary>A table of embedded fonts in this application.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.explicitHeight">
      <summary>The explicit width of this object.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.explicitWidth">
      <summary>The explicit width of this object.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.focusPane">
      <summary />
    </member>
    <member name="P:mx.managers.SystemManager.height">
      <summary>The height of this object.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.measuredHeight">
      <summary>The measuredHeight is the explicit or measuredHeight of the main mx.core.Application window or the starting height of the SWF if the main window has not yet been created or does not exist.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.measuredWidth">
      <summary>The measuredWidth is the explicit or measuredWidth of the main mx.core.Application window, or the starting width of the SWF if the main window has not yet been created or does not exist.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.numChildren">
      <summary>The number of non-floating windows.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.numModalWindows">
      <summary>The number of modal windows.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.popUpChildren">
      <summary>An list of the topMost (popup) windows being parented by this ISystemManager.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.preloaderBackgroundAlpha">
      <summary>The background alpha used by the child of the preloader.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.preloaderBackgroundColor">
      <summary>The background color used by the child of the preloader.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.preloaderBackgroundImage">
      <summary>The background color used by the child of the preloader.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.preloaderBackgroundSize">
      <summary>The background size used by the child of the preloader.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.rawChildren">
      <summary>A list of all children being parented by this ISystemManager.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.screen">
      <summary>The size and position of the application window.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.toolTipChildren">
      <summary>A list of the tooltips being parented by this ISystemManager.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.topLevelSystemManager">
      <summary>Returns the SystemManager responsible for the application window.</summary>
    </member>
    <member name="P:mx.managers.SystemManager.width">
      <summary>The width of this object.</summary>
    </member>
    <member name="T:mx.managers.ToolTipManager">
      <summary>The ToolTipManager lets you set basic ToolTip and error tip functionality, such as display delay and the disabling of ToolTips.</summary>
    </member>
    <member name="M:mx.managers.ToolTipManager.createToolTip(Avm.String,System.Double,System.Double,Avm.String,mx.core.IUIComponent)">
      <summary>Creates an instance of the ToolTip class with the specified text and displays it at the specified location in stage coordinates.</summary>
      <param name="text">The text to display in the ToolTip instance.</param>
      <param name="x">The horizontal coordinate of the ToolTip in stage coordinates. In case of multiple stages, the relevant stage is determined from the <code>context</code> argument.</param>
      <param name="y">The vertical coordinate of the ToolTip in stage coordinates. In case of multiple stages, the relevant stage is determined from the <code>context</code> argument.</param>
      <param name="errorTipBorderStyle">The border style of an error tip. This method argument can be null, "errorTipRight", "errorTipAbove", or "errorTipBelow". If it is null, then the <code>createToolTip()</code> method creates a normal ToolTip. If it is "errorTipRight", "errorTipAbove", or "errorTipBelow", then the <code>createToolTip()</code> method creates an error tip, and this parameter determines where the arrow of the error tip points to (the error's target). For example, if you pass "errorTipRight", Flex positions the error tip (via the x and y arguments) to the right of the error target; the arrow is on the left edge of the error tip.</param>
      <param name="context">This property is not currently used.</param>
    </member>
    <member name="M:mx.managers.ToolTipManager.destroyToolTip(mx.core.IToolTip)">
      <summary>Destroys a specified ToolTip that was created by the <code>createToolTip()</code> method.</summary>
      <param name="toolTip">The ToolTip instance to destroy.</param>
    </member>
    <member name="P:mx.managers.ToolTipManager.currentTarget">
      <summary>The UIComponent that is currently displaying a ToolTip, or <code>null</code> if none is.</summary>
    </member>
    <member name="P:mx.managers.ToolTipManager.currentToolTip">
      <summary>The ToolTip object that is currently visible, or <code>null</code> if none is shown.</summary>
    </member>
    <member name="P:mx.managers.ToolTipManager.enabled">
      <summary>If <code>true</code>, the ToolTipManager will automatically show ToolTips when the user moves the mouse pointer over components.</summary>
    </member>
    <member name="P:mx.managers.ToolTipManager.hideDelay">
      <summary>The amount of time, in milliseconds, that Flex waits to hide the ToolTip after it appears.</summary>
    </member>
    <member name="P:mx.managers.ToolTipManager.hideEffect">
      <summary>The effect that plays when a ToolTip is hidden, or <code>null</code> if the ToolTip should disappear with no effect.</summary>
    </member>
    <member name="P:mx.managers.ToolTipManager.scrubDelay">
      <summary>The amount of time, in milliseconds, that a user can take when moving the mouse between controls before Flex again waits for the duration of <code>showDelay</code> to display a ToolTip.</summary>
    </member>
    <member name="P:mx.managers.ToolTipManager.showDelay">
      <summary>The amount of time, in milliseconds, that Flex waits before displaying the ToolTip box once a user moves the mouse over a component that has a ToolTip.</summary>
    </member>
    <member name="P:mx.managers.ToolTipManager.showEffect">
      <summary>The effect that plays when a ToolTip is shown, or <code>null</code> if the ToolTip should appear with no effect.</summary>
    </member>
    <member name="P:mx.managers.ToolTipManager.toolTipClass">
      <summary>The class to use for creating ToolTips.</summary>
    </member>
    <member name="N:mx.modules" />
    <member name="T:mx.modules.IModuleInfo">
      <summary>An interface that acts as a handle for a particular module.</summary>
    </member>
    <member name="E:mx.modules.IModuleInfo.unload">
      <summary>Dispatched by the backing ModuleInfo when the module data is unloaded.</summary>
    </member>
    <member name="E:mx.modules.IModuleInfo.setup">
      <summary>Dispatched by the backing ModuleInfo once the module is sufficiently loaded to call the <code>IModuleInfo.factory()</code> method and the <code>IFlexModuleFactory.info()</code> method.</summary>
    </member>
    <member name="E:mx.modules.IModuleInfo.ready">
      <summary>Dispatched by the backing ModuleInfo once the module is sufficiently loaded to call the <code>IModuleInfo.factory()</code> method and the <code>IFlexModuleFactory.create()</code> method.</summary>
    </member>
    <member name="E:mx.modules.IModuleInfo.progress">
      <summary>Dispatched by the backing ModuleInfo at regular intervals while the module is being loaded.</summary>
    </member>
    <member name="E:mx.modules.IModuleInfo.error">
      <summary>Dispatched by the backing ModuleInfo if there was an error during module loading.</summary>
    </member>
    <member name="M:mx.modules.IModuleInfo.load(flash.system.ApplicationDomain,flash.system.SecurityDomain)">
      <summary>Requests that the module be loaded.</summary>
      <param name="applicationDomain">The current application domain in which your code is executing.</param>
      <param name="securityDomain">The current security "sandbox".</param>
    </member>
    <member name="M:mx.modules.IModuleInfo.publish(mx.core.IFlexModuleFactory)">
      <summary>Publishes an interface to the ModuleManager.</summary>
      <param name="factory">The class that implements the module's IFlexModuleFactory interface.</param>
    </member>
    <member name="M:mx.modules.IModuleInfo.release">
      <summary>Releases the current reference to the module.</summary>
    </member>
    <member name="M:mx.modules.IModuleInfo.unload">
      <summary>Unloads the module.</summary>
    </member>
    <member name="P:mx.modules.IModuleInfo.data">
      <summary>User data that can be associated with the singleton IModuleInfo for a given URL.</summary>
    </member>
    <member name="P:mx.modules.IModuleInfo.error">
      <summary>A flag that is <code>true</code> if there was an error during module loading.</summary>
    </member>
    <member name="P:mx.modules.IModuleInfo.factory">
      <summary>The IFlexModuleFactory implementation defined in the module.</summary>
    </member>
    <member name="P:mx.modules.IModuleInfo.loaded">
      <summary>A flag that is <code>true</code> if the <code>load()</code> method has been called on this module.</summary>
    </member>
    <member name="P:mx.modules.IModuleInfo.ready">
      <summary>A flag that is <code>true</code> if the module is sufficiently loaded to get a handle to its associated IFlexModuleFactory implementation and call its <code>create()</code> method.</summary>
    </member>
    <member name="P:mx.modules.IModuleInfo.setup">
      <summary>A flag that is <code>true</code> if the module is sufficiently loaded to get a handle to its associated IFlexModuleFactory implementation and call its <code>info()</code> method.</summary>
    </member>
    <member name="P:mx.modules.IModuleInfo.url">
      <summary>The URL associated with this module (for example, "MyImageModule.swf" or "http://somedomain.com/modules/MyImageModule.swf".</summary>
    </member>
    <member name="T:mx.modules.Module">
      <summary>The base class for MXML-based dynamically-loadable modules.</summary>
    </member>
    <member name="T:mx.modules.ModuleBase">
      <summary>The base class for ActionScript-based dynamically-loadable modules.</summary>
    </member>
    <member name="T:mx.modules.ModuleLoader">
      <summary>ModuleLoader is a component that behaves much like a SWFLoader except that it follows a contract with the loaded content.</summary>
    </member>
    <member name="E:mx.modules.ModuleLoader.unload">
      <summary>Dispatched when the module data is unloaded.</summary>
    </member>
    <member name="E:mx.modules.ModuleLoader.progress">
      <summary>Dispatched at regular intervals as the module loads.</summary>
    </member>
    <member name="E:mx.modules.ModuleLoader.error">
      <summary>Dispatched when the module throws an error.</summary>
    </member>
    <member name="E:mx.modules.ModuleLoader.ready">
      <summary>Dispatched when the module is finished loading.</summary>
    </member>
    <member name="E:mx.modules.ModuleLoader.setup">
      <summary>Dispatched when information about the module is available (with the <code>info()</code> method), but the module is not yet ready.</summary>
    </member>
    <member name="E:mx.modules.ModuleLoader.urlChanged">
      <summary>Dispatched when the ModuleLoader is given a new URL.</summary>
    </member>
    <member name="E:mx.modules.ModuleLoader.loading">
      <summary>Dispatched when the ModuleLoader starts to load a URL.</summary>
    </member>
    <member name="M:mx.modules.ModuleLoader.loadModule">
      <summary>Loads the module.</summary>
    </member>
    <member name="M:mx.modules.ModuleLoader.unloadModule">
      <summary>Unloads the module and sets it to <code>null</code>.</summary>
    </member>
    <member name="F:mx.modules.ModuleLoader.applicationDomain">
      <summary>The application domain to load your module into.</summary>
    </member>
    <member name="F:mx.modules.ModuleLoader.child">
      <summary>The DisplayObject created from the module factory.</summary>
    </member>
    <member name="P:mx.modules.ModuleLoader.url">
      <summary>The location of the module, expressed as a URL.</summary>
    </member>
    <member name="T:mx.modules.ModuleManager">
      <summary>The ModuleManager class centrally manages dynamically loaded modules.</summary>
    </member>
    <member name="M:mx.modules.ModuleManager.getAssociatedFactory(System.Object)">
      <summary>See if the referenced object is associated with (or, in the managed ApplicationDomain of) a known IFlexModuleFactory implementation.</summary>
      <param name="object">The object that the ModuleManager tries to create.</param>
    </member>
    <member name="N:mx.preloaders" />
    <member name="T:mx.preloaders.DownloadProgressBar">
      <summary>The DownloadProgressBar class displays download progress.</summary>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.center(System.Double,System.Double)">
      <summary>Centers the download progress bar based on the passed in dimensions.</summary>
      <param name="width">The width of the area in which to center the download progress bar.</param>
      <param name="height">The height of the area in which to center the download progress bar.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.completeHandler(flash.events.Event)">
      <summary>Event listener for the <code>Event.COMPLETE</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.createChildren">
      <summary>Creates the subcomponents of the display.</summary>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.getPercentLoaded(System.Double,System.Double)">
      <summary>Returns the percentage value of the application loaded.</summary>
      <param name="loaded">Number of bytes of the application SWF file that have been downloaded.</param>
      <param name="total">Size of the application SWF file in bytes.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.initProgressHandler(flash.events.Event)">
      <summary>Event listener for the <code>FlexEvent.INIT_PROGRESS</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.initialize">
      <summary>Called by the Preloader after the download progress bar has been added as a child of the Preloader.</summary>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.progressHandler(flash.events.ProgressEvent)">
      <summary>Event listener for the <code>ProgressEvent.PROGRESS</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.rslCompleteHandler(mx.events.RSLEvent)">
      <summary>Event listener for the <code>RSLEvent.RSL_COMPLETE</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.rslErrorHandler(mx.events.RSLEvent)">
      <summary>Event listener for the <code>RSLEvent.RSL_ERROR</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.rslProgressHandler(mx.events.RSLEvent)">
      <summary>Event listener for the <code>RSLEvent.RSL_PROGRESS</code> event.</summary>
      <param name="event">The event object.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.setProgress(System.Double,System.Double)">
      <summary>Updates the display of the download progress bar with the current download information.</summary>
      <param name="completed">Number of bytes of the application SWF file that have been downloaded.</param>
      <param name="total">Size of the application SWF file in bytes.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.showDisplayForDownloading(System.Int32,flash.events.ProgressEvent)">
      <summary>Defines the algorithm for determining whether to show the download progress bar while in the download phase.</summary>
      <param name="elapsedTime">number of milliseconds that have elapsed since the start of the download phase.</param>
      <param name="event">The ProgressEvent object that contains the <code>bytesLoaded</code> and <code>bytesTotal</code> properties.</param>
    </member>
    <member name="M:mx.preloaders.DownloadProgressBar.showDisplayForInit(System.Int32,System.Int32)">
      <summary>Defines the algorithm for determining whether to show the download progress bar while in the initialization phase, assuming that the display is not currently visible.</summary>
      <param name="elapsedTime">number of milliseconds that have elapsed since the start of the download phase.</param>
      <param name="count">number of times that the <code>initProgress</code> event has been received from the application.</param>
    </member>
    <member name="F:mx.preloaders.DownloadProgressBar.DOWNLOAD_PERCENTAGE">
      <summary>The percentage of the progress bar that the downloading phase fills when the SWF file is fully downloaded.</summary>
    </member>
    <member name="F:mx.preloaders.DownloadProgressBar.MINIMUM_DISPLAY_TIME">
      <summary>The minimum number of milliseconds that the display should appear visible.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.backgroundAlpha">
      <summary>Alpha level of the SWF file or image defined by the <code>backgroundImage</code> property, or the color defined by the <code>backgroundColor</code> property.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.backgroundColor">
      <summary>Background color of a download progress bar.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.backgroundImage">
      <summary>The background image of the application, which is passed in by the preloader.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.backgroundSize">
      <summary>Scales the image specified by <code>backgroundImage</code> to different percentage sizes.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.barFrameRect">
      <summary>The dimensions of the progress bar border.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.barRect">
      <summary>The dimensions of the progress bar.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.borderRect">
      <summary>The dimensions of the border of the display.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.downloadingLabel">
      <summary>The string to display as the label while in the downloading phase.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.initializingLabel">
      <summary>The string to display as the label while in the initializing phase.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.label">
      <summary>Text to display when the progress bar is active.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.labelFormat">
      <summary>The TextFormat object of the TextField component of the label.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.labelRect">
      <summary>The dimensions of the TextField component for the label.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.percentFormat">
      <summary>The TextFormat of the TextField component for displaying the percent.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.percentRect">
      <summary>The dimensions of the TextField component for displaying the percent.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.showLabel">
      <summary>Controls whether to display the label, <code>true</code>, or not, <code>false</code>.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.showPercentage">
      <summary>Controls whether to display the percentage, <code>true</code>, or not, <code>false</code>.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.stageHeight">
      <summary>The height of the stage, which is passed in by the Preloader class.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.stageWidth">
      <summary>The width of the stage, which is passed in by the Preloader class.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.visible">
      <summary>Specifies whether the download progress bar is visible.</summary>
    </member>
    <member name="P:mx.preloaders.DownloadProgressBar.preloader">
      <summary>The Preloader class passes in a reference to itself to the display class so that it can listen for events from the preloader.</summary>
    </member>
    <member name="T:mx.preloaders.IPreloaderDisplay">
      <summary>Defines the interface that a class must implement to be used as a download progress bar.</summary>
    </member>
    <member name="M:mx.preloaders.IPreloaderDisplay.initialize">
      <summary />
    </member>
    <member name="P:mx.preloaders.IPreloaderDisplay.backgroundAlpha">
      <summary />
    </member>
    <member name="P:mx.preloaders.IPreloaderDisplay.backgroundColor">
      <summary />
    </member>
    <member name="P:mx.preloaders.IPreloaderDisplay.backgroundImage">
      <summary />
    </member>
    <member name="P:mx.preloaders.IPreloaderDisplay.backgroundSize">
      <summary />
    </member>
    <member name="P:mx.preloaders.IPreloaderDisplay.stageHeight">
      <summary />
    </member>
    <member name="P:mx.preloaders.IPreloaderDisplay.stageWidth">
      <summary />
    </member>
    <member name="P:mx.preloaders.IPreloaderDisplay.preloader">
      <summary />
    </member>
    <member name="T:mx.preloaders.Preloader">
      <summary>The Preloader class is used by the SystemManager to monitor the download and initialization status of a Flex application.</summary>
    </member>
    <member name="M:mx.preloaders.Preloader.initialize(System.Boolean,Avm.Class,System.UInt32,System.Double,System.Object,Avm.String,System.Double,System.Double,Avm.Array,Avm.Array,Avm.Array,Avm.Array)">
      <summary>Called by the SystemManager to initialize a Preloader object.</summary>
      <param name="showDisplay">Determines if the display class should be displayed.</param>
      <param name="displayClassName">The IPreloaderDisplay class to use for displaying the preloader status.</param>
      <param name="backgroundColor">Background color of the application.</param>
      <param name="backgroundAlpha">Background alpha of the application.</param>
      <param name="backgroundImage">Background image of the application.</param>
      <param name="backgroundSize">Background size of the application.</param>
      <param name="displayWidth">Width of the application.</param>
      <param name="displayHeight">Height of the application.</param>
      <param name="libs">Array of string URLs for the runtime shared libraries.</param>
      <param name="sizes">Array of uint values containing the byte size for each URL in the libs argument</param>
      <param name="rslList">Array of object of type RSLItem and CdRSLItem. This array describes all the RSLs to load. The libs and sizes parameters are ignored and must be set to null.</param>
      <param name="resourceModuleURLs">Array of Strings specifying URLs from which to preload resource modules.</param>
    </member>
    <member name="M:mx.preloaders.Preloader.registerApplication(flash.events.IEventDispatcher)">
      <summary>Called by the SystemManager after it has finished instantiating an instance of the application class.</summary>
      <param name="app">The application object.</param>
    </member>
    <member name="N:mx.printing" />
    <member name="T:mx.printing.FlexPrintJob">
      <summary>The FlexPrintJob class is a wrapper for the flash.printing.PrintJob class.</summary>
    </member>
    <member name="M:mx.printing.FlexPrintJob.addObject(mx.core.IUIComponent,Avm.String)">
      <summary>Adds a UIComponent object to the list of objects being printed.</summary>
      <param name="obj">The Object to be printed.</param>
      <param name="scaleType">The scaling technique to use to control how the object fits on one or more printed pages. Must be one of the constant values defined in the FlexPrintJobScaleType class.</param>
    </member>
    <member name="M:mx.printing.FlexPrintJob.send">
      <summary>Sends the added objects to the printer to start printing.</summary>
    </member>
    <member name="M:mx.printing.FlexPrintJob.start">
      <summary>Initializes the PrintJob object.</summary>
    </member>
    <member name="P:mx.printing.FlexPrintJob.pageHeight">
      <summary>The height  of the printable area on the printer page; it does not include any user-set margins.</summary>
    </member>
    <member name="P:mx.printing.FlexPrintJob.pageWidth">
      <summary>The width of the printable area on the printer page; it does not include any user-set margins.</summary>
    </member>
    <member name="P:mx.printing.FlexPrintJob.printAsBitmap">
      <summary>Specifies whether to print the job content as a bitmap (<code>true</code>) or in vector format (<code>false</code>).</summary>
    </member>
    <member name="T:mx.printing.FlexPrintJobScaleType">
      <summary>Values for the <code>scaleType</code> property of the FlexPrintJob.addObject() method parameter.</summary>
    </member>
    <member name="F:mx.printing.FlexPrintJobScaleType.MATCH_HEIGHT">
      <summary>Scales the object to fill the available page height.</summary>
    </member>
    <member name="F:mx.printing.FlexPrintJobScaleType.MATCH_WIDTH">
      <summary>Scales the object to fill the available page width.</summary>
    </member>
    <member name="F:mx.printing.FlexPrintJobScaleType.NONE">
      <summary>Does not scale the output.</summary>
    </member>
    <member name="F:mx.printing.FlexPrintJobScaleType.SHOW_ALL">
      <summary>Scales the object to fit on a single page, filling one dimension; that is, it selects the smaller of the MATCH_WIDTH or MATCH_HEIGHT scale types.</summary>
    </member>
    <member name="T:mx.printing.PrintDataGrid">
      <summary>The PrintDataGrid control is a DataGrid subclass that is styled to show a table with line borders and is optimized for printing.</summary>
    </member>
    <member name="M:mx.printing.PrintDataGrid.nextPage">
      <summary>Puts the next set of data rows in view; that is, it sets the PrintDataGrid <code>verticalScrollPosition</code> property to equal <code>verticalScrollPosition</code> + (number of scrollable rows).</summary>
    </member>
    <member name="F:mx.printing.PrintDataGrid.sizeToPage">
      <summary>If <code>true</code>, the PrintDataGrid readjusts its height to display only completely viewable rows.</summary>
    </member>
    <member name="P:mx.printing.PrintDataGrid.currentPageHeight">
      <summary>The height of PrintDataGrid that would be, if <code>sizeToPage</code> property is <code>true</code> and PrintDataGrid displays only completely viewable rows and no partial rows.</summary>
    </member>
    <member name="P:mx.printing.PrintDataGrid.originalHeight">
      <summary>The height of PrintDataGrid as set by the user.</summary>
    </member>
    <member name="P:mx.printing.PrintDataGrid.validNextPage">
      <summary>Indicates the data provider contains additional data rows that follow the rows that the PrintDataGrid control currently displays.</summary>
    </member>
    <member name="N:mx.resources" />
    <member name="T:mx.resources.IResourceBundle">
      <summary>The IResourceBundle and IResourceManager interfaces work together to provide localization support for Flex applications.</summary>
    </member>
    <member name="P:mx.resources.IResourceBundle.bundleName">
      <summary>A name that identifies this resource bundle, such as <code>"MyResources"</code>.</summary>
    </member>
    <member name="P:mx.resources.IResourceBundle.content">
      <summary>An object containing key-value pairs for the resources in this resource bundle.</summary>
    </member>
    <member name="P:mx.resources.IResourceBundle.locale">
      <summary>The locale for which this bundle's resources have been localized.</summary>
    </member>
    <member name="T:mx.resources.IResourceManager">
      <summary>The APIs of the IResourceManager interface provide localization support for Flex applications.</summary>
    </member>
    <member name="M:mx.resources.IResourceManager.addResourceBundle(mx.resources.IResourceBundle)">
      <summary>Adds the specified ResourceBundle to the ResourceManager so that its resources can be accessed by ResourceManager methods such as <code>getString()</code>.</summary>
      <param name="resourceBundle">The resource bundle to be added.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.findResourceBundleWithResource(Avm.String,Avm.String)">
      <summary>Searches the locales in the <code>localeChain</code> for the specified resource and returns the first resource bundle in which it is found.</summary>
      <param name="bundleName">A bundle name such as <code>"MyResources"</code>.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getBoolean(Avm.String,Avm.String,Avm.String)">
      <summary>Gets the value of a specified resource as a Boolean.</summary>
      <param name="bundleName">The name of a resource bundle.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
      <param name="locale">A specific locale to be used for the lookup, or <code>null</code> to search all locales in the <code>localeChain</code>. This parameter is optional and defaults to <code>null</code>; you should seldom need to specify it.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getBundleNamesForLocale(Avm.String)">
      <summary>Returns an Array of Strings specifying the bundle names for all ResourceBundle objects that exist in the ResourceManager and that belong to the specified locale.</summary>
      <param name="locale">A locale string such as <code>"en_US"</code>.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getClass(Avm.String,Avm.String,Avm.String)">
      <summary>Gets the value of a specified resource as a Class.</summary>
      <param name="bundleName">The name of a resource bundle.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
      <param name="locale">A specific locale to be used for the lookup, or <code>null</code> to search all locales in the <code>localeChain</code>. This parameter is optional and defaults to <code>null</code>; you should seldom need to specify it.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getInt(Avm.String,Avm.String,Avm.String)">
      <summary>Gets the value of a specified resource as an int.</summary>
      <param name="bundleName">The name of a resource bundle.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
      <param name="locale">A specific locale to be used for the lookup, or <code>null</code> to search all locales in the <code>localeChain</code>. This parameter is optional and defaults to <code>null</code>; you should seldom need to specify it.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getLocales">
      <summary>Returns an Array of Strings specifying all locales for which ResourceBundle objects exist in the ResourceManager.</summary>
    </member>
    <member name="M:mx.resources.IResourceManager.getNumber(Avm.String,Avm.String,Avm.String)">
      <summary>Gets the value of a specified resource as a Number.</summary>
      <param name="bundleName">The name of a resource bundle.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
      <param name="locale">A specific locale to be used for the lookup, or <code>null</code> to search all locales in the <code>localeChain</code>. This parameter is optional and defaults to <code>null</code>; you should seldom need to specify it.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getObject(Avm.String,Avm.String,Avm.String)">
      <summary>Gets the value of a specified resource as an Object.</summary>
      <param name="bundleName">The name of a resource bundle.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
      <param name="locale">A specific locale to be used for the lookup, or <code>null</code> to search all locales in the <code>localeChain</code>. This parameter is optional and defaults to <code>null</code>; you should seldom need to specify it.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getResourceBundle(Avm.String,Avm.String)">
      <summary>Returns a ResourceBundle with the specified <code>locale</code> and <code>bundleName</code> that has been previously added to the ResourceManager with <code>addResourceBundle()</code>.</summary>
      <param name="locale">A locale string such as <code>"en_US"</code>.</param>
      <param name="bundleName">A bundle name such as <code>"MyResources"</code>.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getString(Avm.String,Avm.String,Avm.Array,Avm.String)">
      <summary>Gets the value of a specified resource as a String, after substituting specified values for placeholders.</summary>
      <param name="bundleName">The name of a resource bundle.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
      <param name="parameters">An Array of parameters that are substituted for the placeholders. Each parameter is converted to a String with the <code>toString()</code> method before being substituted.</param>
      <param name="locale">A specific locale to be used for the lookup, or <code>null</code> to search all locales in the <code>localeChain</code>. This parameter is optional and defaults to <code>null</code>; you should seldom need to specify it.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getStringArray(Avm.String,Avm.String,Avm.String)">
      <summary>Gets the value of a specified resource as an Array of Strings.</summary>
      <param name="bundleName">The name of a resource bundle.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
      <param name="locale">A specific locale to be used for the lookup, or <code>null</code> to search all locales in the <code>localeChain</code>. This parameter is optional and defaults to <code>null</code>; you should seldom need to specify it.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.getUint(Avm.String,Avm.String,Avm.String)">
      <summary>Gets the value of a specified resource as a uint.</summary>
      <param name="bundleName">The name of a resource bundle.</param>
      <param name="resourceName">The name of a resource in the resource bundle.</param>
      <param name="locale">A specific locale to be used for the lookup, or <code>null</code> to search all locales in the <code>localeChain</code>. This parameter is optional and defaults to <code>null</code>; you should seldom need to specify it.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.installCompiledResourceBundles(flash.system.ApplicationDomain,Avm.Array,Avm.Array)">
      <summary>Used by modules loaders only.</summary>
      <param name="applicationDomain" />
      <param name="locales" />
      <param name="bundleNames" />
    </member>
    <member name="M:mx.resources.IResourceManager.loadResourceModule(Avm.String,System.Boolean,flash.system.ApplicationDomain,flash.system.SecurityDomain)">
      <summary>Begins loading a resource module containing resource bundles.</summary>
      <param name="url">The URL from which to load the resource module.</param>
      <param name="update">Whether to call the <code>update()</code> method when the module finishes loading.</param>
      <param name="applicationDomain">The ApplicationDomain passed to the <code>load()</code> method of the IModuleInfo class that loads the resource module. This parameter is optional and defaults to <code>null</code>.</param>
      <param name="securityDomain">The SecurityDomain passed to the <code>load()</code> method of the IModuleInfo class that loads the resource module. This parameter is optional and defaults to <code>null</code>.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.removeResourceBundle(Avm.String,Avm.String)">
      <summary>Removes the specified ResourceBundle from the ResourceManager so that its resources can no longer be accessed by ResourceManager methods such as <code>getString()</code>.</summary>
      <param name="locale">A locale string such as <code>"en_US"</code>.</param>
      <param name="bundleName">A bundle name such as <code>"MyResources"</code>.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.removeResourceBundlesForLocale(Avm.String)">
      <summary>Removes all ResourceBundles for the specified locale from the ResourceManager so that their resources can no longer be accessed by ResourceManager methods such as <code>getString()</code>.</summary>
      <param name="locale">A locale string such as <code>"en_US"</code>.</param>
    </member>
    <member name="M:mx.resources.IResourceManager.unloadResourceModule(Avm.String,System.Boolean)">
      <summary>This method has not yet been implemented.</summary>
      <param name="url" />
      <param name="update" />
    </member>
    <member name="M:mx.resources.IResourceManager.update">
      <summary>Dispatches a <code>change</code> event from the ResourceManager.</summary>
    </member>
    <member name="P:mx.resources.IResourceManager.localeChain">
      <summary>An Array of locale Strings, such as <code>[ "en_US" ]</code>, which specifies one or more locales to be searched for resources.</summary>
    </member>
    <member name="T:mx.resources.Locale">
      <summary>The Locale class can be used to parse a locale String such as <code>"en_US_MAC"</code> into its three parts: a language code, a country code, and a variant.</summary>
    </member>
    <member name="M:mx.resources.Locale.#ctor(Avm.String)">
      <summary>Constructor.</summary>
      <param name="localeString">A 1-, 2-, or 3-part locale String, such as <code>"en"</code>, <code>"en_US"</code>, or <code>"en_US_MAC"</code>. The parts are separated by underscore characters. The first part is a two-letter lowercase language code as defined by ISO-639, such as <code>"en"</code> for English. The second part is a two-letter uppercase country code as defined by ISO-3166, such as <code>"US"</code> for the United States. The third part is a variant String, which can be used to optionally distinguish multiple locales for the same language and country. It is sometimes used to indicate the operating system that the locale should be used with, such as <code>"MAC"</code>, <code>"WIN"</code>, or <code>"UNIX"</code>.</param>
    </member>
    <member name="M:mx.resources.Locale.toString">
      <summary>Returns the locale String that was used to construct this Locale instance.</summary>
    </member>
    <member name="P:mx.resources.Locale.country">
      <summary>The country code of this Locale instance.</summary>
    </member>
    <member name="P:mx.resources.Locale.language">
      <summary>The language code of this Locale instance.</summary>
    </member>
    <member name="P:mx.resources.Locale.variant">
      <summary>The variant part of this Locale instance.</summary>
    </member>
    <member name="T:mx.resources.ResourceBundle">
      <summary>Provides an implementation of the IResourceBundle interface.</summary>
    </member>
    <member name="M:mx.resources.ResourceBundle.#ctor(Avm.String,Avm.String)">
      <summary>Constructor.</summary>
      <param name="locale">A locale string, such as <code>"en_US"</code>.</param>
      <param name="bundleName">A name that identifies this bundle, such as <code>"MyResources"</code>.</param>
    </member>
    <member name="M:mx.resources.ResourceBundle.getContent">
      <summary>When a properties file is compiled into a resource bundle, the MXML compiler autogenerates a subclass of ResourceBundle.</summary>
    </member>
    <member name="P:mx.resources.ResourceBundle.bundleName">
      <summary />
    </member>
    <member name="P:mx.resources.ResourceBundle.content">
      <summary />
    </member>
    <member name="P:mx.resources.ResourceBundle.locale">
      <summary />
    </member>
    <member name="T:mx.resources.ResourceManager">
      <summary>This class is used to get a single instance of the IResourceManager implementation.</summary>
    </member>
    <member name="M:mx.resources.ResourceManager.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.resources.ResourceManager.getInstance">
      <summary>Gets the single instance of the ResourceManager class.</summary>
    </member>
    <member name="N:mx.rpc" />
    <member name="T:mx.rpc.IResponder">
      <summary>This interface provides the contract for any service that needs to respond to remote or asynchronous calls.</summary>
    </member>
    <member name="M:mx.rpc.IResponder.fault(System.Object)">
      <summary>This method is called by a service when an error has been received.</summary>
      <param name="info" />
    </member>
    <member name="M:mx.rpc.IResponder.result(System.Object)">
      <summary>This method is called by a service when the return value has been received.</summary>
      <param name="data" />
    </member>
    <member name="N:mx.skins" />
    <member name="T:mx.skins.Border">
      <summary>The Border class is an abstract base class for various classes that draw borders, either rectangular or non-rectangular, around UIComponents.</summary>
    </member>
    <member name="P:mx.skins.Border.borderMetrics">
      <summary>The thickness of the border edges.</summary>
    </member>
    <member name="N:mx.skins.halo" />
    <member name="T:mx.skins.halo.AccordionHeaderSkin">
      <summary>The skin for all the states of an AccordionHeader in an Accordion.</summary>
    </member>
    <member name="M:mx.skins.halo.AccordionHeaderSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.ActivatorSkin">
      <summary>Defines the up, down, and over states for MenuBarItem objects.</summary>
    </member>
    <member name="M:mx.skins.halo.ActivatorSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.ApplicationBackground">
      <summary>The skin for application background gradient.</summary>
    </member>
    <member name="T:mx.skins.halo.BrokenImageBorderSkin">
      <summary>The skin for the border of a SWFLoader or Image component when the content could not be loaded.</summary>
    </member>
    <member name="T:mx.skins.halo.BusyCursor">
      <summary>Defines the appearance of the cursor that appears while an operation is taking place.</summary>
    </member>
    <member name="T:mx.skins.halo.ButtonBarButtonSkin">
      <summary>The skin for all the states of the ButtonBarButtons in a ButtonBar.</summary>
    </member>
    <member name="M:mx.skins.halo.ButtonBarButtonSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.ButtonSkin">
      <summary>The skin for all the states of a Button.</summary>
    </member>
    <member name="M:mx.skins.halo.ButtonSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.CheckBoxIcon">
      <summary>The skin for all the states of the icon in a CheckBox.</summary>
    </member>
    <member name="M:mx.skins.halo.CheckBoxIcon.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.ColorPickerSkin">
      <summary>The skin for all the states of a ColorPicker.</summary>
    </member>
    <member name="T:mx.skins.halo.ComboBoxArrowSkin">
      <summary>The skin for all the states of the button in a ComboBox.</summary>
    </member>
    <member name="M:mx.skins.halo.ComboBoxArrowSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.DataGridColumnDropIndicator">
      <summary>The skin for the column drop indicator in a DataGrid.</summary>
    </member>
    <member name="T:mx.skins.halo.DataGridColumnResizeSkin">
      <summary>The skin for the column resizer in a DataGrid.</summary>
    </member>
    <member name="T:mx.skins.halo.DataGridHeaderBackgroundSkin">
      <summary>The skin for the background of the column headers in a DataGrid control.</summary>
    </member>
    <member name="T:mx.skins.halo.DataGridHeaderSeparator">
      <summary>The skin for the separator between column headers in a DataGrid.</summary>
    </member>
    <member name="T:mx.skins.halo.DataGridSortArrow">
      <summary>The skin for the sort arrow in a column header in a DataGrid.</summary>
    </member>
    <member name="T:mx.skins.halo.DateChooserIndicator">
      <summary>The skins of the DateChooser's indicators for displaying today, rollover and selected dates.</summary>
    </member>
    <member name="T:mx.skins.halo.DateChooserMonthArrowSkin">
      <summary>The skin for all the states of the next-month and previous-month buttons in a DateChooser.</summary>
    </member>
    <member name="M:mx.skins.halo.DateChooserMonthArrowSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.DateChooserYearArrowSkin">
      <summary>The skin for all the states of the next-year and previous-year buttons in a DateChooser.</summary>
    </member>
    <member name="T:mx.skins.halo.DefaultDragImage">
      <summary>The default drag proxy image for a drag and drop operation.</summary>
    </member>
    <member name="T:mx.skins.halo.HaloBorder">
      <summary>Defines the appearance of the default border for the Halo theme.</summary>
    </member>
    <member name="M:mx.skins.halo.HaloBorder.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.HaloColors">
      <summary>Defines the colors used by components that support the Halo theme.</summary>
    </member>
    <member name="M:mx.skins.halo.HaloColors.addHaloColors(System.Object,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Calculates colors that are used by components that support the Halo theme, such as the colors of beveled edges.</summary>
      <param name="colors" />
      <param name="themeColor">The value of the <code>themeColor</code> style property.</param>
      <param name="fillColor0">The start color of a fill.</param>
      <param name="fillColor1">The end color of a fill.</param>
    </member>
    <member name="M:mx.skins.halo.HaloColors.getCacheKey(System.Object)">
      <summary>Returns a unique hash key based on the colors that are passed in.</summary>
      <param name="colors" />
    </member>
    <member name="T:mx.skins.halo.HaloFocusRect">
      <summary>Defines the skin for the focus indicator.</summary>
    </member>
    <member name="T:mx.skins.halo.LinkButtonSkin">
      <summary>The skin for all the states of a LinkButton.</summary>
    </member>
    <member name="T:mx.skins.halo.LinkSeparator">
      <summary>The skin for the separator between the Links in a LinkBar.</summary>
    </member>
    <member name="T:mx.skins.halo.ListDropIndicator">
      <summary>The skin for the drop indicator of a list-based control.</summary>
    </member>
    <member name="F:mx.skins.halo.ListDropIndicator.direction">
      <summary>Should the skin draw a horizontal line or vertical line.</summary>
    </member>
    <member name="T:mx.skins.halo.MenuBarBackgroundSkin">
      <summary>The skin for the background of a MenuBar.</summary>
    </member>
    <member name="M:mx.skins.halo.MenuBarBackgroundSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.NumericStepperDownSkin">
      <summary>The skin for all the states of the down button in a NumericStepper.</summary>
    </member>
    <member name="M:mx.skins.halo.NumericStepperDownSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.NumericStepperUpSkin">
      <summary>The skin for all the states of the up button in a NumericStepper.</summary>
    </member>
    <member name="M:mx.skins.halo.NumericStepperUpSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.PanelSkin">
      <summary>The PanelSkin class defines the skin for the Panel, TitleWindow, and Alert components.</summary>
    </member>
    <member name="T:mx.skins.halo.PopUpButtonSkin">
      <summary>The skin for all the states of a PopUpButton.</summary>
    </member>
    <member name="M:mx.skins.halo.PopUpButtonSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.PopUpIcon">
      <summary>The skin for all the states of the icon in a PopUpButton.</summary>
    </member>
    <member name="T:mx.skins.halo.PopUpMenuIcon">
      <summary>The skin for all the states of the icon in a PopUpMenuButton.</summary>
    </member>
    <member name="T:mx.skins.halo.ProgressBarSkin">
      <summary>The skin for a ProgressBar.</summary>
    </member>
    <member name="T:mx.skins.halo.ProgressIndeterminateSkin">
      <summary>The skin for the indeterminate state of a ProgressBar.</summary>
    </member>
    <member name="T:mx.skins.halo.ProgressMaskSkin">
      <summary>The skin for the mask of the ProgressBar's determinate and indeterminate bars.</summary>
    </member>
    <member name="T:mx.skins.halo.ProgressTrackSkin">
      <summary>The skin for the track in a ProgressBar.</summary>
    </member>
    <member name="T:mx.skins.halo.RadioButtonIcon">
      <summary>The skin for all the states of the icon in a RadioButton.</summary>
    </member>
    <member name="M:mx.skins.halo.RadioButtonIcon.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.ScrollArrowSkin">
      <summary>The skin for all the states of the up or down button in a ScrollBar.</summary>
    </member>
    <member name="M:mx.skins.halo.ScrollArrowSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.ScrollThumbSkin">
      <summary>The skin for all the states of the thumb in a ScrollBar.</summary>
    </member>
    <member name="M:mx.skins.halo.ScrollThumbSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.ScrollTrackSkin">
      <summary>The skin for the track in a ScrollBar.</summary>
    </member>
    <member name="T:mx.skins.halo.SliderHighlightSkin">
      <summary>The skin for the highlighted state of the track of a Slider.</summary>
    </member>
    <member name="T:mx.skins.halo.SliderThumbSkin">
      <summary>The skin for all the states of a thumb in a Slider.</summary>
    </member>
    <member name="M:mx.skins.halo.SliderThumbSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.skins.halo.SliderThumbSkin.drawThumbState(System.Double,System.Double,Avm.Array,Avm.Array,Avm.Array,System.Boolean,System.Boolean)">
      <param name="w" />
      <param name="h" />
      <param name="borderColors" />
      <param name="fillColors" />
      <param name="fillAlphas" />
      <param name="drawBacking" />
      <param name="drillHole" />
    </member>
    <member name="T:mx.skins.halo.SliderTrackSkin">
      <summary>The skin for the track in a Slider.</summary>
    </member>
    <member name="T:mx.skins.halo.SwatchPanelSkin">
      <summary>The skin for the border of a SwatchPanel.</summary>
    </member>
    <member name="T:mx.skins.halo.SwatchSkin">
      <summary>The skin used for all color swatches in a ColorPicker.</summary>
    </member>
    <member name="T:mx.skins.halo.TabSkin">
      <summary>The skin for all the states of a Tab in a TabNavigator or TabBar.</summary>
    </member>
    <member name="M:mx.skins.halo.TabSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:mx.skins.halo.TitleBackground">
      <summary>The skin for a title bar area of a Panel.</summary>
    </member>
    <member name="T:mx.skins.halo.ToolTipBorder">
      <summary>The skin for a ToolTip.</summary>
    </member>
    <member name="T:mx.skins.ProgrammaticSkin">
      <summary>This class is the base class for skin elements which draw themselves programmatically.</summary>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.drawRoundRect(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object,System.Object,flash.geom.Matrix,Avm.String,Avm.Array,System.Object)">
      <summary>Programatically draws a rectangle into this skin's Graphics object.</summary>
      <param name="x">Horizontal position of upper-left corner of rectangle within this skin.</param>
      <param name="y">Vertical position of upper-left corner of rectangle within this skin.</param>
      <param name="width">Width of rectangle, in pixels.</param>
      <param name="height">Height of rectangle, in pixels.</param>
      <param name="cornerRadius">Corner radius/radii of rectangle. Can be <code>null</code>, a Number, or an Object. If it is <code>null</code>, it specifies that the corners should be square rather than rounded. If it is a Number, it specifies the same radius, in pixels, for all four corners. If it is an Object, it should have properties named <code>tl</code>, <code>tr</code>, <code>bl</code>, and <code>br</code>, whose values are Numbers specifying the radius, in pixels, for the top left, top right, bottom left, and bottom right corners. For example, you can pass a plain Object such as <code>{ tl: 5, tr: 5, bl: 0, br: 0 }</code>. The default value is null (square corners).</param>
      <param name="color">The RGB color(s) for the fill. Can be <code>null</code>, a uint, or an Array. If it is <code>null</code>, the rectangle not filled. If it is a uint, it specifies an RGB fill color. For example, pass <code>0xFF0000</code> to fill with red. If it is an Array, it should contain uints specifying the gradient colors. For example, pass <code>[ 0xFF0000, 0xFFFF00, 0x0000FF ]</code> to fill with a red-to-yellow-to-blue gradient. You can specify up to 15 colors in the gradient. The default value is null (no fill).</param>
      <param name="alpha">Alpha value(s) for the fill. Can be null, a Number, or an Array. This argument is ignored if <code>color</code> is null. If <code>color</code> is a uint specifying an RGB fill color, then <code>alpha</code> should be a Number specifying the transparency of the fill, where 0.0 is completely transparent and 1.0 is completely opaque. You can also pass null instead of 1.0 in this case to specify complete opaqueness. If <code>color</code> is an Array specifying gradient colors, then <code>alpha</code> should be an Array of Numbers, of the same length, that specifies the corresponding alpha values for the gradient. In this case, the default value is <code>null</code> (completely opaque).</param>
      <param name="gradientMatrix">Matrix object used for the gradient fill. The utility methods <code>horizontalGradientMatrix()</code>, <code>verticalGradientMatrix()</code>, and <code>rotatedGradientMatrix()</code> can be used to create the value for this parameter.</param>
      <param name="gradientType">Type of gradient fill. The possible values are <code>GradientType.LINEAR</code> or <code>GradientType.RADIAL</code>. (The GradientType class is in the package flash.display.)</param>
      <param name="gradientRatios">(optional default [0,255]) Specifies the distribution of colors. The number of entries must match the number of colors defined in the <code>color</code> parameter. Each value defines the percentage of the width where the color is sampled at 100%. The value 0 represents the left-hand position in the gradient box, and 255 represents the right-hand position in the gradient box.</param>
      <param name="hole">(optional) A rounded rectangular hole that should be carved out of the middle of the otherwise solid rounded rectangle { x: #, y: #, w: #, h: #, r: # or { br: #, bl: #, tl: #, tr: # } }</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.getStyle(Avm.String)">
      <summary>Returns the value of the specified style property.</summary>
      <param name="styleProp">Name of the style property.</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.horizontalGradientMatrix(System.Double,System.Double,System.Double,System.Double)">
      <summary>Utility function to create a horizontal gradient matrix.</summary>
      <param name="x">The left edge of the gradient.</param>
      <param name="y">The top edge of the gradient.</param>
      <param name="width">The width of the gradient.</param>
      <param name="height">The height of the gradient.</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.invalidateDisplayList">
      <summary />
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.invalidateProperties">
      <summary>Calling this method results in a call to the component's <code>validateProperties()</code> method before the display list is rendered.</summary>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.invalidateSize">
      <summary>Calling this method results in a call to the component's <code>validateSize()</code> method before the display list is rendered.</summary>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.move(System.Double,System.Double)">
      <summary>Moves this object to the specified x and y coordinates.</summary>
      <param name="x">The horizontal position, in pixels.</param>
      <param name="y">The vertical position, in pixels.</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.rotatedGradientMatrix(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Utility function to create a rotated gradient matrix.</summary>
      <param name="x">The left edge of the gradient.</param>
      <param name="y">The top edge of the gradient.</param>
      <param name="width">The width of the gradient.</param>
      <param name="height">The height of the gradient.</param>
      <param name="rotation">The amount to rotate, in degrees.</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.setActualSize(System.Double,System.Double)">
      <summary>Sets the height and width of this object.</summary>
      <param name="newWidth">The width, in pixels, of this object.</param>
      <param name="newHeight">The height, in pixels, of this object.</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.styleChanged(Avm.String)">
      <summary>Whenever any style changes, redraw this skin.</summary>
      <param name="styleProp">The name of the style property that changed, or null if all styles have changed.</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.updateDisplayList(System.Double,System.Double)">
      <summary>Programmatically draws the graphics for this skin.</summary>
      <param name="unscaledWidth">The width, in pixels, of this object before any scaling.</param>
      <param name="unscaledHeight">The height, in pixels, of this object before any scaling.</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.validateDisplayList">
      <summary>This function is called by the LayoutManager when it's time for this control to draw itself.</summary>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.validateNow">
      <summary>Validate and update the properties and layout of this object and redraw it, if necessary.</summary>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.validateProperties">
      <summary>This function is an empty stub so that ProgrammaticSkin can implement the ILayoutManagerClient  interface.</summary>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.validateSize(System.Boolean)">
      <summary>This function is an empty stub so that ProgrammaticSkin can implement the ILayoutManagerClient  interface.</summary>
      <param name="recursive">Determines whether children of this skin are validated.</param>
    </member>
    <member name="M:mx.skins.ProgrammaticSkin.verticalGradientMatrix(System.Double,System.Double,System.Double,System.Double)">
      <summary>Utility function to create a vertical gradient matrix.</summary>
      <param name="x">The left edge of the gradient.</param>
      <param name="y">The top edge of the gradient.</param>
      <param name="width">The width of the gradient.</param>
      <param name="height">The height of the gradient.</param>
    </member>
    <member name="P:mx.skins.ProgrammaticSkin.initialized">
      <summary />
    </member>
    <member name="P:mx.skins.ProgrammaticSkin.measuredHeight">
      <summary>The measured height of this object.</summary>
    </member>
    <member name="P:mx.skins.ProgrammaticSkin.measuredWidth">
      <summary>The measured width of this object.</summary>
    </member>
    <member name="P:mx.skins.ProgrammaticSkin.nestLevel">
      <summary />
    </member>
    <member name="P:mx.skins.ProgrammaticSkin.processedDescriptors">
      <summary />
    </member>
    <member name="P:mx.skins.ProgrammaticSkin.styleName">
      <summary>A parent component used to obtain style values.</summary>
    </member>
    <member name="P:mx.skins.ProgrammaticSkin.updateCompletePendingFlag">
      <summary>A flag that determines if an object has been through all three phases of layout validation (provided that any were required).</summary>
    </member>
    <member name="T:mx.skins.RectangularBorder">
      <summary>The RectangularBorder class is an abstract base class for various classes that draw rectangular borders around UIComponents.</summary>
    </member>
    <member name="M:mx.skins.RectangularBorder.layoutBackgroundImage">
      <summary>Layout the background image.</summary>
    </member>
    <member name="P:mx.skins.RectangularBorder.backgroundImageBounds">
      <summary>Rectangular area within which to draw the background image.</summary>
    </member>
    <member name="P:mx.skins.RectangularBorder.hasBackgroundImage">
      <summary>Contains <code>true</code> if the RectangularBorder instance contains a background image.</summary>
    </member>
    <member name="N:mx.states" />
    <member name="T:mx.states.AddChild">
      <summary>The AddChild class adds a child display object, such as a component, to a container as part of a view state.</summary>
    </member>
    <member name="M:mx.states.AddChild.apply(mx.core.UIComponent)">
      <summary>Applies the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="M:mx.states.AddChild.createInstance">
      <summary>Creates the child instance from the factory.</summary>
    </member>
    <member name="M:mx.states.AddChild.initialize">
      <summary>Initializes the override.</summary>
    </member>
    <member name="M:mx.states.AddChild.remove(mx.core.UIComponent)">
      <summary>Removes the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="F:mx.states.AddChild.position">
      <summary>The position of the child in the display list, relative to the object specified by the <code>relativeTo</code> property.</summary>
    </member>
    <member name="F:mx.states.AddChild.relativeTo">
      <summary>The object relative to which the child is added.</summary>
    </member>
    <member name="P:mx.states.AddChild.creationPolicy">
      <summary>The creation policy for this child.</summary>
    </member>
    <member name="P:mx.states.AddChild.target">
      <summary>The child to be added.</summary>
    </member>
    <member name="P:mx.states.AddChild.targetFactory">
      <summary>The factory that creates the child.</summary>
    </member>
    <member name="T:mx.states.IOverride">
      <summary>The IOverride interface is used for view state overrides.</summary>
    </member>
    <member name="M:mx.states.IOverride.apply(mx.core.UIComponent)">
      <summary>Applies the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="M:mx.states.IOverride.initialize">
      <summary>Initializes the override.</summary>
    </member>
    <member name="M:mx.states.IOverride.remove(mx.core.UIComponent)">
      <summary>Removes the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="T:mx.states.RemoveChild">
      <summary>The RemoveChild class removes a child display object, such as a component, from a container as part of a view state.</summary>
    </member>
    <member name="M:mx.states.RemoveChild.apply(mx.core.UIComponent)">
      <summary>Applies the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="M:mx.states.RemoveChild.initialize">
      <summary>IOverride interface method; this class implements it as an empty method.</summary>
    </member>
    <member name="M:mx.states.RemoveChild.remove(mx.core.UIComponent)">
      <summary>Removes the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="F:mx.states.RemoveChild.target">
      <summary>The child to remove from the view.</summary>
    </member>
    <member name="T:mx.states.SetEventHandler">
      <summary>The SetEventHandler class specifies an event handler that is active only during a particular view state.</summary>
    </member>
    <member name="E:mx.states.SetEventHandler.handler">
      <summary>The event handler function to execute in response to the event that is specified by the <code>name</code> property.</summary>
    </member>
    <member name="M:mx.states.SetEventHandler.apply(mx.core.UIComponent)">
      <summary>Applies the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="M:mx.states.SetEventHandler.initialize">
      <summary>IOverride interface method; this class implements it as an empty method.</summary>
    </member>
    <member name="M:mx.states.SetEventHandler.remove(mx.core.UIComponent)">
      <summary>Removes the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="F:mx.states.SetEventHandler.handlerFunction">
      <summary>The handler function for the event.</summary>
    </member>
    <member name="F:mx.states.SetEventHandler.name">
      <summary>The name of the event whose handler is being set.</summary>
    </member>
    <member name="F:mx.states.SetEventHandler.target">
      <summary>The component that dispatches the event.</summary>
    </member>
    <member name="T:mx.states.SetProperty">
      <summary>The SetProperty class specifies a property value that is in effect only during the parent view state.</summary>
    </member>
    <member name="M:mx.states.SetProperty.#ctor(System.Object,Avm.String,)">
      <summary>Constructor.</summary>
      <param name="target">The object whose property is being set. By default, Flex uses the immediate parent of the State object.</param>
      <param name="name">The property to set.</param>
      <param name="value">The value of the property in the view state.</param>
    </member>
    <member name="M:mx.states.SetProperty.apply(mx.core.UIComponent)">
      <summary>Applies the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="M:mx.states.SetProperty.initialize">
      <summary>IOverride interface method; this class implements it as an empty method.</summary>
    </member>
    <member name="M:mx.states.SetProperty.remove(mx.core.UIComponent)">
      <summary>Removes the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="F:mx.states.SetProperty.name">
      <summary>The name of the property to change.</summary>
    </member>
    <member name="F:mx.states.SetProperty.target">
      <summary>The object containing the property to be changed.</summary>
    </member>
    <member name="F:mx.states.SetProperty.value">
      <summary>The new value for the property.</summary>
    </member>
    <member name="T:mx.states.SetStyle">
      <summary>The SetStyle class specifies a style that is in effect only during the parent view state.</summary>
    </member>
    <member name="M:mx.states.SetStyle.#ctor(mx.styles.IStyleClient,Avm.String,System.Object)">
      <summary>Constructor.</summary>
      <param name="target">The object whose style is being set. By default, Flex uses the immediate parent of the State object.</param>
      <param name="name">The style to set.</param>
      <param name="value">The value of the style in the view state.</param>
    </member>
    <member name="M:mx.states.SetStyle.apply(mx.core.UIComponent)">
      <summary>Applies the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="M:mx.states.SetStyle.initialize">
      <summary>IOverride interface method; this class implements it as an empty method.</summary>
    </member>
    <member name="M:mx.states.SetStyle.remove(mx.core.UIComponent)">
      <summary>Removes the override.</summary>
      <param name="parent">The parent of the state object containing this override. The override should use this as its target if an explicit target was not specified.</param>
    </member>
    <member name="F:mx.states.SetStyle.name">
      <summary>The name of the style to change.</summary>
    </member>
    <member name="F:mx.states.SetStyle.target">
      <summary>The object whose style is being changed.</summary>
    </member>
    <member name="F:mx.states.SetStyle.value">
      <summary>The new value for the style.</summary>
    </member>
    <member name="T:mx.states.State">
      <summary>The State class defines a view state, a particular view of a component.</summary>
    </member>
    <member name="E:mx.states.State.exitState">
      <summary>Dispatched before a view state is exited.</summary>
    </member>
    <member name="E:mx.states.State.enterState">
      <summary>Dispatched when the view state has been entered.</summary>
    </member>
    <member name="F:mx.states.State.basedOn">
      <summary>The name of the view state upon which this view state is based, or <code>null</code> if this view state is not based on a named view state.</summary>
    </member>
    <member name="F:mx.states.State.name">
      <summary>The name of the view state.</summary>
    </member>
    <member name="F:mx.states.State.overrides">
      <summary>The overrides for this view state, as an Array of objects that implement the IOverride interface.</summary>
    </member>
    <member name="T:mx.states.Transition">
      <summary>The Transition class defines a set of effects that play in response to a change of view state.</summary>
    </member>
    <member name="F:mx.states.Transition.effect">
      <summary>The IEffect object to play when you apply the transition.</summary>
    </member>
    <member name="F:mx.states.Transition.fromState">
      <summary>A String specifying the view state that your are changing from when you apply the transition.</summary>
    </member>
    <member name="F:mx.states.Transition.toState">
      <summary>A String specifying the view state that you are changing to when you apply the transition.</summary>
    </member>
    <member name="N:mx.styles" />
    <member name="T:mx.styles.CSSStyleDeclaration">
      <summary>The CSSStyleDeclaration class represents a set of CSS style rules.</summary>
    </member>
    <member name="M:mx.styles.CSSStyleDeclaration.#ctor(Avm.String)">
      <summary>Constructor.</summary>
      <param name="selector">If not null, this CSSStyleDeclaration will be registered with the StyleManager using the selector value.</param>
    </member>
    <member name="M:mx.styles.CSSStyleDeclaration.clearStyle(Avm.String)">
      <summary>Clears a style property on this CSSStyleDeclaration.</summary>
      <param name="styleProp">The name of the style property.</param>
    </member>
    <member name="M:mx.styles.CSSStyleDeclaration.getStyle(Avm.String)">
      <summary>Gets the value for a specified style property, as determined solely by this CSSStyleDeclaration.</summary>
      <param name="styleProp">The name of the style property.</param>
    </member>
    <member name="M:mx.styles.CSSStyleDeclaration.setStyle(Avm.String,)">
      <summary>Sets a style property on this CSSStyleDeclaration.</summary>
      <param name="styleProp">The name of the style property.</param>
      <param name="newValue">The value of the style property. The value may be of any type. The values <code>null</code>, <code>""</code>, <code>false</code>, <code>NaN</code>, and <code>0</code> are all valid style values, but the value <code>undefined</code> is not. Setting a style property to the value <code>undefined</code> is the same as calling the <code>clearStyle()</code> method.</param>
    </member>
    <member name="F:mx.styles.CSSStyleDeclaration.defaultFactory">
      <summary>This function, if it isn't <code>null</code>, is usually autogenerated by the MXML compiler.</summary>
    </member>
    <member name="F:mx.styles.CSSStyleDeclaration.factory">
      <summary>This function, if it isn't <code>null</code>, is usually autogenerated by the MXML compiler.</summary>
    </member>
    <member name="F:mx.styles.CSSStyleDeclaration.overrides">
      <summary>If the <code>setStyle()</code> method is called on a UIComponent or CSSStyleDeclaration at run time, this object stores the name/value pairs that were set; they override the name/value pairs in the objects produced by the  methods specified by the <code>defaultFactory</code> and <code>factory</code> properties.</summary>
    </member>
    <member name="T:mx.styles.ISimpleStyleClient">
      <summary>This interface describes the properties and methods that an object must implement so that it can participate in the style subsystem.</summary>
    </member>
    <member name="M:mx.styles.ISimpleStyleClient.styleChanged(Avm.String)">
      <summary>Called when the value of a style property is changed.</summary>
      <param name="styleProp">The name of the style property that changed.</param>
    </member>
    <member name="P:mx.styles.ISimpleStyleClient.styleName">
      <summary>The source of this object's style values.</summary>
    </member>
    <member name="T:mx.styles.IStyleClient">
      <summary>This interface describes the properties and methods that an object must implement so that it can fully participate in the style subsystem.</summary>
    </member>
    <member name="M:mx.styles.IStyleClient.clearStyle(Avm.String)">
      <summary>Deletes a style property from this component instance.</summary>
      <param name="styleProp">Name of the style property.</param>
    </member>
    <member name="M:mx.styles.IStyleClient.getClassStyleDeclarations">
      <summary>Returns an Array of CSSStyleDeclaration objects for the type selector that applies to this component, or <code>null</code> if none exist.</summary>
    </member>
    <member name="M:mx.styles.IStyleClient.getStyle(Avm.String)">
      <summary>Gets a style property that has been set anywhere in this component's style lookup chain.</summary>
      <param name="styleProp">Name of the style property.</param>
    </member>
    <member name="M:mx.styles.IStyleClient.notifyStyleChangeInChildren(Avm.String,System.Boolean)">
      <summary>Propagates style changes to the children of this component.</summary>
      <param name="styleProp">Name of the style property.</param>
      <param name="recursive">Whether to propagate the style changes to the children's children.</param>
    </member>
    <member name="M:mx.styles.IStyleClient.regenerateStyleCache(System.Boolean)">
      <summary>Sets up the internal style cache values so that the <code>getStyle()</code> method functions.</summary>
      <param name="recursive">Regenerate the proto chains of the children.</param>
    </member>
    <member name="M:mx.styles.IStyleClient.registerEffects(Avm.Array)">
      <summary>Registers the EffectManager as one of the event listeners for each effect event.</summary>
      <param name="effects">An Array of Strings of effect names.</param>
    </member>
    <member name="M:mx.styles.IStyleClient.setStyle(Avm.String,)">
      <summary>Sets a style property on this component instance.</summary>
      <param name="styleProp">Name of the style property.</param>
      <param name="newValue">New value for the style.</param>
    </member>
    <member name="P:mx.styles.IStyleClient.className">
      <summary>The name of the component class.</summary>
    </member>
    <member name="P:mx.styles.IStyleClient.inheritingStyles">
      <summary>An object containing the inheritable styles for this component.</summary>
    </member>
    <member name="P:mx.styles.IStyleClient.nonInheritingStyles">
      <summary>An object containing the noninheritable styles for this component.</summary>
    </member>
    <member name="P:mx.styles.IStyleClient.styleDeclaration">
      <summary>The style declaration used by this object.</summary>
    </member>
    <member name="T:mx.styles.IStyleModule">
      <summary>Simple interface that defines an <code>unload()</code> method.</summary>
    </member>
    <member name="M:mx.styles.IStyleModule.unload">
      <summary>Unloads the style module.</summary>
    </member>
    <member name="T:mx.styles.StyleManager">
      <summary>The StyleManager class manages the following: <ul> <li>Which CSS style properties the class inherits</li> <li>Which style properties are colors, and therefore get special handling</li> <li>A list of strings that are aliases for color values</li> </ul></summary>
    </member>
    <member name="M:mx.styles.StyleManager.clearStyleDeclaration(Avm.String,System.Boolean)">
      <summary>Clears the CSSStyleDeclaration object that stores the rules for the specified CSS selector.</summary>
      <param name="selector">The name of the CSS selector to clear.</param>
      <param name="update">Set to <code>true</code> to force an immediate update of the styles. Set to <code>false</code> to avoid an immediate update of the styles in the application. For more information about this method, see the description in the <code>setStyleDeclaration()</code> method.</param>
    </member>
    <member name="M:mx.styles.StyleManager.getColorName(System.Object)">
      <summary>Returns the numeric RGB color value that corresponds to the specified color string.</summary>
      <param name="colorName">The color name.</param>
    </member>
    <member name="M:mx.styles.StyleManager.getColorNames(Avm.Array)">
      <summary>Converts each element of the colors Array from a color name to a numeric RGB color value.</summary>
      <param name="colors">An Array of color names.</param>
    </member>
    <member name="M:mx.styles.StyleManager.getStyleDeclaration(Avm.String)">
      <summary>Gets the CSSStyleDeclaration object that stores the rules for the specified CSS selector.</summary>
      <param name="selector">The name of the CSS selector.</param>
    </member>
    <member name="M:mx.styles.StyleManager.isColorName(Avm.String)">
      <summary>Tests to see if the given String is an alias for a color value.</summary>
      <param name="colorName">The color name to test. This parameter is not case-sensitive.</param>
    </member>
    <member name="M:mx.styles.StyleManager.isInheritingStyle(Avm.String)">
      <summary>Tests to see if a style is inheriting.</summary>
      <param name="styleName">The name of the style that you test to see if it is inheriting.</param>
    </member>
    <member name="M:mx.styles.StyleManager.isInheritingTextFormatStyle(Avm.String)">
      <summary>Test to see if a TextFormat style is inheriting.</summary>
      <param name="styleName">The name of the style that you test to see if it is inheriting.</param>
    </member>
    <member name="M:mx.styles.StyleManager.isParentDisplayListInvalidatingStyle(Avm.String)">
      <summary>Tests to see if this style affects the component's parent container in such a way as to require that the parent container redraws itself when this style changes.</summary>
      <param name="styleName">The name of the style to test.</param>
    </member>
    <member name="M:mx.styles.StyleManager.isParentSizeInvalidatingStyle(Avm.String)">
      <summary>Tests to see if the style changes the size of the component's parent container.</summary>
      <param name="styleName">The name of the style to test.</param>
    </member>
    <member name="M:mx.styles.StyleManager.isSizeInvalidatingStyle(Avm.String)">
      <summary>Tests to see if a style changes the size of a component.</summary>
      <param name="styleName">The name of the style to test.</param>
    </member>
    <member name="M:mx.styles.StyleManager.isValidStyleValue()">
      <summary>Determines if a specified parameter is a valid style property.</summary>
      <param name="value">The style property to test.</param>
    </member>
    <member name="M:mx.styles.StyleManager.loadStyleDeclarations(Avm.String,System.Boolean,System.Boolean,flash.system.ApplicationDomain,flash.system.SecurityDomain)">
      <summary>Loads a style SWF.</summary>
      <param name="url">Location of the style SWF.</param>
      <param name="update">Set to <code>true</code> to force an immediate update of the styles. Set to <code>false</code> to avoid an immediate update of the styles in the application. This parameter is optional and defaults to <code>true</code> For more information about this parameter, see the description in the <code>setStyleDeclaration()</code> method.</param>
      <param name="trustContent">Obsolete, no longer used. This parameter is optional and defaults to <code>false</code>.</param>
      <param name="applicationDomain">The ApplicationDomain passed to the <code>load()</code> method of the IModuleInfo that loads the style SWF. This parameter is optional and defaults to <code>null</code>.</param>
      <param name="securityDomain">The SecurityDomain passed to the <code>load()</code> method of the IModuleInfo that loads the style SWF. This parameter is optional and defaults to <code>null</code>.</param>
    </member>
    <member name="M:mx.styles.StyleManager.registerColorName(Avm.String,System.UInt32)">
      <summary>Adds a color name to the list of aliases for colors.</summary>
      <param name="colorName">The name of the color to add to the list; for example, "blue". If you later access this color name, the value is not case-sensitive.</param>
      <param name="colorValue">Color value, for example, 0x0000FF.</param>
    </member>
    <member name="M:mx.styles.StyleManager.registerInheritingStyle(Avm.String)">
      <summary>Adds to the list of styles that can inherit values from their parents.</summary>
      <param name="styleName">The name of the style that is added to the list of styles that can inherit values.</param>
    </member>
    <member name="M:mx.styles.StyleManager.registerParentDisplayListInvalidatingStyle(Avm.String)">
      <summary>Adds to the list of styles which may affect the appearance or layout of the component's parent container.</summary>
      <param name="styleName">The name of the style to register.</param>
    </member>
    <member name="M:mx.styles.StyleManager.registerParentSizeInvalidatingStyle(Avm.String)">
      <summary>Adds to the list of styles which may affect the measured size of the component's parent container.</summary>
      <param name="styleName">The name of the style to register.</param>
    </member>
    <member name="M:mx.styles.StyleManager.registerSizeInvalidatingStyle(Avm.String)">
      <summary>Adds to the list of styles which may affect the measured size of the component.</summary>
      <param name="styleName">The name of the style that you add to the list.</param>
    </member>
    <member name="M:mx.styles.StyleManager.setStyleDeclaration(Avm.String,mx.styles.CSSStyleDeclaration,System.Boolean)">
      <summary>Sets the CSSStyleDeclaration object that stores the rules for the specified CSS selector.</summary>
      <param name="selector">The name of the CSS selector.</param>
      <param name="styleDeclaration">The new style declaration.</param>
      <param name="update">Set to <code>true</code> to force an immediate update of the styles; internally, Flex calls the <code>styleChanged()</code> method of UIComponent. Set to <code>false</code> to avoid an immediate update of the styles in the application. <p>The styles will be updated the next time one of the following methods is called with the <code>update</code> property set to <code>true</code>: <ul> <li><code>clearStyleDeclaration()</code></li> <li><code>loadStyleDeclarations()</code></li> <li><code>setStyleDeclaration()</code></li> <li><code>unloadStyleDeclarations()</code></li> </ul> </p> <p>Typically, if you call the one of these methods multiple times, you set this property to <code>true</code> only on the last call, so that Flex does not call the <code>styleChanged()</code> method multiple times.</p> <p>If you call the <code>getStyle()</code> method, Flex returns the style value that was last applied to the UIComponent through a call to the <code>styleChanged()</code> method. The component's appearance might not reflect the value returned by the <code>getStyle()</code> method. This occurs because one of these style declaration methods might not yet have been called with the <code>update</code> property set to <code>true</code>.</p></param>
    </member>
    <member name="M:mx.styles.StyleManager.unloadStyleDeclarations(Avm.String,System.Boolean)">
      <summary>Unloads a style SWF.</summary>
      <param name="url">Location of the style SWF.</param>
      <param name="update">Set to <code>true</code> to force an immediate update of the styles. Set to <code>false</code> to avoid an immediate update of the styles in the application. For more information about this method, see the description in the <code>setStyleDeclaration()</code> method.</param>
    </member>
    <member name="P:mx.styles.StyleManager.selectors">
      <summary>Returns an Array of all the CSS selectors that are registered with the StyleManager.</summary>
    </member>
    <member name="T:mx.styles.StyleProxy">
      <summary>Wraps an object that implements the IStyleClient interface.</summary>
    </member>
    <member name="M:mx.styles.StyleProxy.clearStyle(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="M:mx.styles.StyleProxy.getClassStyleDeclarations">
      <summary />
    </member>
    <member name="M:mx.styles.StyleProxy.getStyle(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="M:mx.styles.StyleProxy.notifyStyleChangeInChildren(Avm.String,System.Boolean)">
      <summary />
      <param name="styleProp" />
      <param name="recursive" />
    </member>
    <member name="M:mx.styles.StyleProxy.regenerateStyleCache(System.Boolean)">
      <summary />
      <param name="recursive" />
    </member>
    <member name="M:mx.styles.StyleProxy.registerEffects(Avm.Array)">
      <summary />
      <param name="effects" />
    </member>
    <member name="M:mx.styles.StyleProxy.setStyle(Avm.String,)">
      <summary />
      <param name="styleProp" />
      <param name="newValue" />
    </member>
    <member name="M:mx.styles.StyleProxy.styleChanged(Avm.String)">
      <summary />
      <param name="styleProp" />
    </member>
    <member name="P:mx.styles.StyleProxy.className">
      <summary />
    </member>
    <member name="P:mx.styles.StyleProxy.filterMap">
      <summary>A set of string pairs.</summary>
    </member>
    <member name="P:mx.styles.StyleProxy.inheritingStyles">
      <summary />
    </member>
    <member name="P:mx.styles.StyleProxy.nonInheritingStyles">
      <summary />
    </member>
    <member name="P:mx.styles.StyleProxy.source">
      <summary>The object that implements the IStyleClient interface.</summary>
    </member>
    <member name="P:mx.styles.StyleProxy.styleDeclaration">
      <summary />
    </member>
    <member name="P:mx.styles.StyleProxy.styleName">
      <summary />
    </member>
    <member name="N:mx.utils" />
    <member name="T:mx.utils.ArrayUtil">
      <summary>The ArrayUtil utility class is an all-static class with methods for working with arrays within Flex.</summary>
    </member>
    <member name="M:mx.utils.ArrayUtil.getItemIndex(System.Object,Avm.Array)">
      <summary>Returns the index of the item in the Array.</summary>
      <param name="item">The item to find in the Array.</param>
      <param name="source">The Array to search for the item.</param>
    </member>
    <member name="T:mx.utils.Base64Decoder">
      <summary>A utility class to decode a Base64 encoded String to a ByteArray.</summary>
    </member>
    <member name="M:mx.utils.Base64Decoder.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.utils.Base64Decoder.decode(Avm.String)">
      <summary>Decodes a Base64 encoded String and adds the result to an internal buffer.</summary>
      <param name="encoded">The Base64 encoded String to decode.</param>
    </member>
    <member name="M:mx.utils.Base64Decoder.reset">
      <summary>Clears all buffers and resets the decoder to its initial state.</summary>
    </member>
    <member name="M:mx.utils.Base64Decoder.toByteArray">
      <summary>Returns the current buffer as a decoded <code>flash.utils.ByteArray</code>.</summary>
    </member>
    <member name="T:mx.utils.Base64Encoder">
      <summary>A utility class to encode a String or ByteArray as a Base64 encoded String.</summary>
    </member>
    <member name="M:mx.utils.Base64Encoder.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.utils.Base64Encoder.encode(Avm.String,System.UInt32,System.UInt32)">
      <summary>Encodes the characters of a String in Base64 and adds the result to an internal buffer.</summary>
      <param name="data">The String to encode.</param>
      <param name="offset">The character position from which to start encoding.</param>
      <param name="length">The number of characters to encode from the offset.</param>
    </member>
    <member name="M:mx.utils.Base64Encoder.encodeBytes(flash.utils.ByteArray,System.UInt32,System.UInt32)">
      <summary>Encodes a ByteArray in Base64 and adds the result to an internal buffer.</summary>
      <param name="data">The ByteArray to encode.</param>
      <param name="offset">The index from which to start encoding.</param>
      <param name="length">The number of bytes to encode from the offset.</param>
    </member>
    <member name="M:mx.utils.Base64Encoder.encodeUTFBytes(Avm.String)">
      <summary>Encodes the UTF-8 bytes of a String in Base64 and adds the result to an internal buffer.</summary>
      <param name="data">The String to encode.</param>
    </member>
    <member name="M:mx.utils.Base64Encoder.reset">
      <summary>Clears all buffers and resets the encoder to its initial state.</summary>
    </member>
    <member name="M:mx.utils.Base64Encoder.toString">
      <summary>Returns the current buffer as a Base64 encoded String.</summary>
    </member>
    <member name="F:mx.utils.Base64Encoder.CHARSET_UTF_8" />
    <member name="F:mx.utils.Base64Encoder.insertNewLines">
      <summary>A Boolean flag to control whether the sequence of characters specified for <code>Base64Encoder.newLine</code> are inserted every 76 characters to wrap the encoded output.</summary>
    </member>
    <member name="F:mx.utils.Base64Encoder.newLine">
      <summary>The character codepoint to be inserted into the encoded output to denote a new line if <code>insertNewLines</code> is true.</summary>
    </member>
    <member name="T:mx.utils.ColorUtil">
      <summary>The ColorUtil class is an all-static class with methods for working with RGB colors within Flex.</summary>
    </member>
    <member name="M:mx.utils.ColorUtil.adjustBrightness2(System.UInt32,System.Double)">
      <summary>Performs a scaled brightness adjustment of an RGB color.</summary>
      <param name="rgb">Original RGB color.</param>
      <param name="brite">The percentage to brighten or darken the original color. If positive, the original color is brightened toward white by this percentage. If negative, it is darkened toward black by this percentage. The range for this parameter is -100 to 100; -100 produces black while 100 produces white. If this parameter is 0, the RGB color returned is the same as the original color.</param>
    </member>
    <member name="M:mx.utils.ColorUtil.rgbMultiply(System.UInt32,System.UInt32)">
      <summary>Performs an RGB multiplication of two RGB colors.</summary>
      <param name="rgb1">First RGB color.</param>
      <param name="rgb2">Second RGB color.</param>
    </member>
    <member name="T:mx.utils.DisplayUtil">
      <summary>The DisplayUtil utility class is an all-static class with utility methods related to DisplayObjects.</summary>
    </member>
    <member name="T:mx.utils.GraphicsUtil">
      <summary>The Graphics class is an all-static class with utility methods related to the Graphics class.</summary>
    </member>
    <member name="T:mx.utils.LoaderUtil">
      <summary>The LoaderUtil class defines a utility method for use with Flex RSLs.</summary>
    </member>
    <member name="M:mx.utils.LoaderUtil.normalizeURL(flash.display.LoaderInfo)">
      <summary>The root URL of a cross-domain RSL contains special text appended to the end of the URL.</summary>
      <param name="loaderInfo">A LoaderInfo instance.</param>
    </member>
    <member name="T:mx.utils.NameUtil">
      <summary>The NameUtil utility class defines static methods for creating names for Flex objects.</summary>
    </member>
    <member name="M:mx.utils.NameUtil.createUniqueName(System.Object)">
      <summary>Creates a unique name for any Object instance, such as "Button12", by combining the unqualified class name with an incrementing counter.</summary>
      <param name="object">Object requiring a name.</param>
    </member>
    <member name="M:mx.utils.NameUtil.displayObjectToString(flash.display.DisplayObject)">
      <summary>Returns a string, such as "MyApplication0.addressForm.lastName.TextField17", for a DisplayObject object that indicates its position in the hierarchy of DisplayObject objects in an application.</summary>
      <param name="displayObject">A DisplayObject object whose hierarchy in the application is desired.</param>
    </member>
    <member name="T:mx.utils.ObjectProxy">
      <summary>This class provides the ability to track changes to an item managed by this proxy.</summary>
    </member>
    <member name="M:mx.utils.ObjectProxy.#ctor(System.Object,Avm.String,System.Int32)">
      <summary>Initializes this proxy with the specified object, id and proxy depth.</summary>
      <param name="item">Object to proxy. If no item is specified, an anonymous object will be constructed and assigned.</param>
      <param name="uid">String containing the unique id for this object instance. Required for IPropertyChangeNotifier compliance as every object must provide a unique way of identifying it. If no value is specified, a random id will be assigned.</param>
      <param name="proxyDepth">An integer indicating how many levels in a complex object graph should have a proxy created during property access. The default is -1, meaning "proxy to infinite depth".</param>
    </member>
    <member name="M:mx.utils.ObjectProxy.addEventListener(Avm.String,Avm.Function,System.Boolean,System.Int32,System.Boolean)">
      <summary>Registers an event listener object so that the listener receives notification of an event.</summary>
      <param name="type" />
      <param name="listener" />
      <param name="useCapture" />
      <param name="priority" />
      <param name="useWeakReference" />
    </member>
    <member name="M:mx.utils.ObjectProxy.callProperty(,System.Object)">
      <summary>Returns the value of the proxied object's method with the specified name.</summary>
      <param name="name">The name of the method being invoked.</param>
      <param name="rest">An array specifying the arguments to the called method.</param>
    </member>
    <member name="M:mx.utils.ObjectProxy.deleteProperty()">
      <summary>Deletes the specified property on the proxied object and sends notification of the delete to the handler.</summary>
      <param name="name">Typically a string containing the name of the property, or possibly a QName where the property name is found by inspecting the <code>localName</code> property.</param>
    </member>
    <member name="M:mx.utils.ObjectProxy.dispatchEvent(flash.events.Event)">
      <summary>Dispatches an event into the event flow.</summary>
      <param name="event" />
    </member>
    <member name="M:mx.utils.ObjectProxy.getComplexProperty(,)">
      <summary>Provides a place for subclasses to override how a complex property that needs to be either proxied or daisy chained for event bubbling is managed.</summary>
      <param name="name">Typically a string containing the name of the property, or possibly a QName where the property name is found by inspecting the <code>localName</code> property.</param>
      <param name="value">The property value.</param>
    </member>
    <member name="M:mx.utils.ObjectProxy.getProperty()">
      <summary>Returns the specified property value of the proxied object.</summary>
      <param name="name">Typically a string containing the name of the property, or possibly a QName where the property name is found by inspecting the <code>localName</code> property.</param>
    </member>
    <member name="M:mx.utils.ObjectProxy.hasEventListener(Avm.String)">
      <summary>Checks whether there are any event listeners registered for a specific type of event.</summary>
      <param name="type" />
    </member>
    <member name="M:mx.utils.ObjectProxy.hasProperty()">
      <summary>This is an internal function that must be implemented by a subclass of flash.utils.Proxy.</summary>
      <param name="name">The property name that should be tested for existence.</param>
    </member>
    <member name="M:mx.utils.ObjectProxy.nextName(System.Int32)">
      <summary>This is an internal function that must be implemented by a subclass of flash.utils.Proxy.</summary>
      <param name="index" />
    </member>
    <member name="M:mx.utils.ObjectProxy.nextNameIndex(System.Int32)">
      <summary>This is an internal function that must be implemented by a subclass of flash.utils.Proxy.</summary>
      <param name="index" />
    </member>
    <member name="M:mx.utils.ObjectProxy.nextValue(System.Int32)">
      <summary>This is an internal function that must be implemented by a subclass of flash.utils.Proxy.</summary>
      <param name="index" />
    </member>
    <member name="M:mx.utils.ObjectProxy.propertyChangeHandler(mx.events.PropertyChangeEvent)">
      <summary>Called when a complex property is updated.</summary>
      <param name="event" />
    </member>
    <member name="M:mx.utils.ObjectProxy.readExternal(flash.utils.IDataInput)">
      <summary>Since Flex only uses ObjectProxy to wrap anonymous objects, the server flex.messaging.io.ObjectProxy instance serializes itself as a Map that will be returned as a plain ActionScript object.</summary>
      <param name="input" />
    </member>
    <member name="M:mx.utils.ObjectProxy.removeEventListener(Avm.String,Avm.Function,System.Boolean)">
      <summary>Removes an event listener.</summary>
      <param name="type" />
      <param name="listener" />
      <param name="useCapture" />
    </member>
    <member name="M:mx.utils.ObjectProxy.setProperty(,)">
      <summary>Updates the specified property on the proxied object and sends notification of the update to the handler.</summary>
      <param name="name">Object containing the name of the property that should be updated on the proxied object.</param>
      <param name="value">Value that should be set on the proxied object.</param>
    </member>
    <member name="M:mx.utils.ObjectProxy.setupPropertyList">
      <summary>This method creates an array of all of the property names for the proxied object.</summary>
    </member>
    <member name="M:mx.utils.ObjectProxy.willTrigger(Avm.String)">
      <summary>Checks whether an event listener is registered with this object or any of its ancestors for the specified event type.</summary>
      <param name="type" />
    </member>
    <member name="M:mx.utils.ObjectProxy.writeExternal(flash.utils.IDataOutput)">
      <summary>Since Flex only serializes the inner ActionScript object that it wraps, the server flex.messaging.io.ObjectProxy populates itself with this anonymous object's contents and appears to the user as a Map.</summary>
      <param name="output" />
    </member>
    <member name="F:mx.utils.ObjectProxy.dispatcher">
      <summary>A reference to the EventDispatcher for this proxy.</summary>
    </member>
    <member name="F:mx.utils.ObjectProxy.notifiers">
      <summary>A hashmap of property change notifiers that this proxy is listening for changes from; the key of the map is the property name.</summary>
    </member>
    <member name="F:mx.utils.ObjectProxy.propertyList">
      <summary>Contains a list of all of the property names for the proxied object.</summary>
    </member>
    <member name="F:mx.utils.ObjectProxy.proxyClass">
      <summary>Indicates what kind of proxy to create when proxying complex properties.</summary>
    </member>
    <member name="P:mx.utils.ObjectProxy.object">
      <summary>The object being proxied.</summary>
    </member>
    <member name="P:mx.utils.ObjectProxy.type">
      <summary>The qualified type name associated with this object.</summary>
    </member>
    <member name="P:mx.utils.ObjectProxy.uid">
      <summary>The unique identifier for this object.</summary>
    </member>
    <member name="T:mx.utils.ObjectUtil">
      <summary>The ObjectUtil class is an all-static class with methods for working with Objects within Flex.</summary>
    </member>
    <member name="M:mx.utils.ObjectUtil.compare(System.Object,System.Object,System.Int32)">
      <summary>Compares the Objects and returns an integer value indicating if the first item is less than greater than or equal to the second item.</summary>
      <param name="a">Object.</param>
      <param name="b">Object.</param>
      <param name="depth">Indicates how many levels should be recursed when performing the comparison. Set this value to 0 for a shallow comparison of only the primitive representation of each property. For example:<pre> var a:Object = {name:"Bob", info:[1,2,3]}; var b:Object = {name:"Alice", info:[5,6,7]}; var c:int = ObjectUtil.compare(a, b, 0);</pre> <p>In the above example the complex properties of <code>a</code> and <code>b</code> will be flattened by a call to <code>toString()</code> when doing the comparison. In this case the <code>info</code> property will be turned into a string when performing the comparison.</p></param>
    </member>
    <member name="M:mx.utils.ObjectUtil.copy(System.Object)">
      <summary>Copies the specified Object and returns a reference to the copy.</summary>
      <param name="value">Object that should be copied.</param>
    </member>
    <member name="M:mx.utils.ObjectUtil.dateCompare(Avm.Date,Avm.Date)">
      <summary>Compares the two Date objects and returns an integer value indicating if the first Date object is before, equal to, or after the second item.</summary>
      <param name="a">Date object.</param>
      <param name="b">Date object.</param>
    </member>
    <member name="M:mx.utils.ObjectUtil.getClassInfo(System.Object,Avm.Array,System.Object)">
      <summary>Returns information about the class, and properties of the class, for the specified Object.</summary>
      <param name="obj">The Object to inspect.</param>
      <param name="excludes">Array of Strings specifying the property names that should be excluded from the returned result. For example, you could specify <code>["currentTarget", "target"]</code> for an Event object since these properties can cause the returned result to become large.</param>
      <param name="options">An Object containing one or more properties that control the information returned by this method. The properties include the following: <ul> <li><code>includeReadOnly</code>: If <code>false</code>, exclude Object properties that are read-only. The default value is <code>true</code>.</li> <li><code>includeTransient</code>: If <code>false</code>, exclude Object properties and variables that have <code>[Transient]</code> metadata. The default value is <code>true</code>.</li> <li><code>uris</code>: Array of Strings of all namespaces that should be included in the output. It does allow for a wildcard of "~~". By default, it is null, meaning no namespaces should be included. For example, you could specify <code>["mx_internal", "mx_object"]</code> or <code>["~~"]</code>.</li> </ul></param>
    </member>
    <member name="M:mx.utils.ObjectUtil.hasMetadata(System.Object,Avm.String,Avm.String,Avm.Array,System.Object)">
      <summary>Uses <code>getClassInfo</code> and examines the metadata information to determine whether a property on a given object has the specified metadata.</summary>
      <param name="obj">The object holding the property.</param>
      <param name="propName">The property to check for metadata.</param>
      <param name="metadataName">The name of the metadata to check on the property.</param>
      <param name="excludes">If any properties need to be excluded when generating class info. (Optional)</param>
      <param name="options">If any options flags need to changed when generating class info. (Optional)</param>
    </member>
    <member name="M:mx.utils.ObjectUtil.isSimple(System.Object)">
      <summary>Returns <code>true</code> if the object reference specified is a simple data type.</summary>
      <param name="value">Object inspected.</param>
    </member>
    <member name="M:mx.utils.ObjectUtil.numericCompare(System.Double,System.Double)">
      <summary>Compares two numeric values.</summary>
      <param name="a">First number.</param>
      <param name="b">Second number.</param>
    </member>
    <member name="M:mx.utils.ObjectUtil.stringCompare(Avm.String,Avm.String,System.Boolean)">
      <summary>Compares two String values.</summary>
      <param name="a">First String value.</param>
      <param name="b">Second String value.</param>
      <param name="caseInsensitive">Specifies to perform a case insensitive compare, <code>true</code>, or not, <code>false</code>.</param>
    </member>
    <member name="M:mx.utils.ObjectUtil.toString(System.Object,Avm.Array,Avm.Array)">
      <summary>Pretty-prints the specified Object into a String.</summary>
      <param name="value">Object to be pretty printed.</param>
      <param name="namespaceURIs">Array of namespace URIs for properties that should be included in the output. By default only properties in the public namespace will be included in the output. To get all properties regardless of namespace pass an array with a single element of ".</param>
      <param name="exclude">Array of the property names that should be excluded from the output. Use this to remove data from the formatted string.</param>
    </member>
    <member name="T:mx.utils.SHA256">
      <summary>Implementation of SHA-256 hash algorithm as described in Federal Information Processing Standards Publication 180-2 at http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf</summary>
    </member>
    <member name="M:mx.utils.SHA256.computeDigest(flash.utils.ByteArray)">
      <summary>Computes the digest of a message using the SHA-256 hash algorithm.</summary>
      <param name="byteArray">- the message, may not be null. return String - 64 character hexidecimal representation of the digest.</param>
    </member>
    <member name="F:mx.utils.SHA256.TYPE_ID">
      <summary>Identifies this hash is of type "SHA-256".</summary>
    </member>
    <member name="T:mx.utils.StringUtil">
      <summary>The StringUtil utility class is an all-static class with methods for working with String objects within Flex.</summary>
    </member>
    <member name="M:mx.utils.StringUtil.isWhitespace(Avm.String)">
      <summary>Returns <code>true</code> if the specified string is a single space, tab, carriage return, newline, or formfeed character.</summary>
      <param name="character">The String that is is being queried.</param>
    </member>
    <member name="M:mx.utils.StringUtil.substitute(Avm.String,System.Object)">
      <summary>Substitutes "{n}" tokens within the specified string with the respective arguments passed in.</summary>
      <param name="str">The string to make substitutions in. This string can contain special tokens of the form <code>{n}</code>, where <code>n</code> is a zero based index, that will be replaced with the additional parameters found at that index if specified.</param>
      <param name="rest">Additional parameters that can be substituted in the <code>str</code> parameter at each <code>{n}</code> location, where <code>n</code> is an integer (zero based) index value into the array of values specified. If the first parameter is an array this array will be used as a parameter list. This allows reuse of this routine in other methods that want to use the ... rest signature. For example <pre> public function myTracer(str:String, ... rest):void { label.text += StringUtil.substitute(str, rest) + "\n"; } </pre></param>
    </member>
    <member name="M:mx.utils.StringUtil.trimArrayElements(Avm.String,Avm.String)">
      <summary>Removes all whitespace characters from the beginning and end of each element in an Array, where the Array is stored as a String.</summary>
      <param name="value">The String whose whitespace should be trimmed.</param>
      <param name="delimiter">The String that delimits each Array element in the string.</param>
    </member>
    <member name="T:mx.utils.UIDUtil">
      <summary>The UIDUtil class is an all-static class with methods for working with UIDs (unique identifiers) within Flex.</summary>
    </member>
    <member name="M:mx.utils.UIDUtil.createUID">
      <summary>Generates a UID (unique identifier) based on ActionScript's pseudo-random number generator and the current time.</summary>
    </member>
    <member name="M:mx.utils.UIDUtil.fromByteArray(flash.utils.ByteArray)">
      <summary>Converts a 128-bit UID encoded as a ByteArray to a String representation.</summary>
      <param name="ba">ByteArray 16 bytes in length representing a 128-bit UID.</param>
    </member>
    <member name="M:mx.utils.UIDUtil.getUID(System.Object)">
      <summary>Returns the UID (unique identifier) for the specified object.</summary>
      <param name="item">Object that we need to find the UID for.</param>
    </member>
    <member name="M:mx.utils.UIDUtil.isUID(Avm.String)">
      <summary>A utility method to check whether a String value represents a correctly formatted UID value.</summary>
      <param name="uid">The value to test whether it is formatted as a UID.</param>
    </member>
    <member name="M:mx.utils.UIDUtil.toByteArray(Avm.String)">
      <summary>Converts a UID formatted String to a ByteArray.</summary>
      <param name="uid">representing a 128-bit UID</param>
    </member>
    <member name="T:mx.utils.XMLNotifier">
      <summary>Used for watching changes to XML and XMLList objects.</summary>
    </member>
    <member name="M:mx.utils.XMLNotifier.#ctor(XMLNotifier.as$1.XMLNotifierSingleton)">
      <summary>Constructor.</summary>
      <param name="x" />
    </member>
    <member name="M:mx.utils.XMLNotifier.getInstance">
      <summary>Get the singleton instance of the XMLNotifier.</summary>
    </member>
    <member name="M:mx.utils.XMLNotifier.unwatchXML(System.Object,mx.utils.IXMLNotifiable)">
      <summary>Given an XML or XMLList, remove the specified notification function.</summary>
      <param name="xml">XML/XMLList object to un-watch.</param>
      <param name="notifiable">Function notification function.</param>
    </member>
    <member name="M:mx.utils.XMLNotifier.watchXML(System.Object,mx.utils.IXMLNotifiable,Avm.String)">
      <summary>Given an XML or XMLList, add the notification function to watch for changes.</summary>
      <param name="xml">XML/XMLList object to watch.</param>
      <param name="notifiable">Function that needs to be called.</param>
      <param name="uid">UID for object</param>
    </member>
    <member name="T:mx.utils.XMLUtil">
      <summary>The XMLUtil class is an all-static class with methods for working with XML within Flex.</summary>
    </member>
    <member name="M:mx.utils.XMLUtil.getAttributeByQName(Avm.XML,Avm.QName)">
      <summary>Returns the XML value of an attribute matching the given QName</summary>
      <param name="xml">the XML object being inspected</param>
      <param name="attrQName">the QName of the attribute to find</param>
    </member>
    <member name="M:mx.utils.XMLUtil.qnameToString(Avm.QName)">
      <summary>Returns the concatenation of a Qname object's <code>uri</code> and <code>localName</code> properties, separated by a colon.</summary>
      <param name="qname">QName object.</param>
    </member>
    <member name="M:mx.utils.XMLUtil.qnamesEqual(Avm.QName,Avm.QName)">
      <summary>Returns <code>true</code> if the two QName parameters have identical <code>uri</code> and <code>localName</code> properties.</summary>
      <param name="qname1">First QName object.</param>
      <param name="qname2">Second QName object.</param>
    </member>
    <member name="N:mx.validators" />
    <member name="T:mx.validators.CreditCardValidator">
      <summary>The CreditCardValidator class validates that a credit card number is the correct length, has the correct prefix, and passes the Luhn mod10 algorithm for the specified card type.</summary>
    </member>
    <member name="M:mx.validators.CreditCardValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.CreditCardValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a credit card number.</summary>
      <param name="value">an Object to validate.</param>
    </member>
    <member name="F:mx.validators.CreditCardValidator.cardNumberProperty">
      <summary>Name of the card number property to validate.</summary>
    </member>
    <member name="F:mx.validators.CreditCardValidator.cardTypeProperty">
      <summary>Name of the card type property to validate.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.allowedFormatChars">
      <summary>The set of formatting characters allowed in the <code>cardNumber</code> field.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.cardNumberListener">
      <summary>The component that listens for the validation result for the card number subfield.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.cardNumberSource">
      <summary>Object that contains the value of the card number field.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.cardTypeListener">
      <summary>The component that listens for the validation result for the card type subfield.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.cardTypeSource">
      <summary>Object that contains the value of the card type field.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.invalidCharError">
      <summary>Error message when the <code>cardNumber</code> field contains invalid characters.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.invalidNumberError">
      <summary>Error message when the credit card number is invalid.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.noNumError">
      <summary>Error message when the <code>cardNumber</code> field is empty.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.noTypeError">
      <summary>Error message when the <code>cardType</code> field is blank.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.wrongLengthError">
      <summary>Error message when the <code>cardNumber</code> field contains the wrong number of digits for the specified credit card type.</summary>
    </member>
    <member name="P:mx.validators.CreditCardValidator.wrongTypeError">
      <summary>Error message the <code>cardType</code> field contains an invalid credit card type.</summary>
    </member>
    <member name="T:mx.validators.CreditCardValidatorCardType">
      <summary>The CreditCardValidatorCardType class defines value constants for specifying the type of credit card to validate.</summary>
    </member>
    <member name="F:mx.validators.CreditCardValidatorCardType.AMERICAN_EXPRESS">
      <summary>Specifies the card type as American Express.</summary>
    </member>
    <member name="F:mx.validators.CreditCardValidatorCardType.DINERS_CLUB">
      <summary>Specifies the card type as Diners Club.</summary>
    </member>
    <member name="F:mx.validators.CreditCardValidatorCardType.DISCOVER">
      <summary>Specifies the card type as Discover.</summary>
    </member>
    <member name="F:mx.validators.CreditCardValidatorCardType.VISA">
      <summary>Specifies the card type as Visa.</summary>
    </member>
    <member name="T:mx.validators.CurrencyValidator">
      <summary>The CurrencyValidator class ensures that a String represents a valid currency expression.</summary>
    </member>
    <member name="M:mx.validators.CurrencyValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.CurrencyValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a currency expression.</summary>
      <param name="value">Object to validate.</param>
    </member>
    <member name="M:mx.validators.CurrencyValidator.validateCurrency(mx.validators.CurrencyValidator,System.Object,Avm.String)">
      <summary>Convenience method for calling a validator.</summary>
      <param name="validator">The CurrencyValidator instance.</param>
      <param name="value">The object to validate.</param>
      <param name="baseField">Text representation of the subfield specified in the <code>value</code> parameter. For example, if the <code>value</code> parameter specifies value.currency, the baseField value is "currency".</param>
    </member>
    <member name="P:mx.validators.CurrencyValidator.alignSymbol">
      <summary>Specifies the alignment of the <code>currencySymbol</code> relative to the rest of the expression.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.allowNegative">
      <summary>Specifies whether negative numbers are permitted.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.currencySymbol">
      <summary>The single-character String used to specify the currency symbol, such as "$" or "&#163;".</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.currencySymbolError">
      <summary>Error message when the currency symbol, defined by <code>currencySymbol</code>, is in the wrong location.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.decimalPointCountError">
      <summary>Error message when the decimal separator character occurs more than once.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.decimalSeparator">
      <summary>The character used to separate the whole from the fractional part of the number.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.exceedsMaxError">
      <summary>Error message when the value is greater than <code>maxValue</code>.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.invalidCharError">
      <summary>Error message when the currency contains invalid characters.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.invalidFormatCharsError">
      <summary>Error message when the value contains an invalid formatting character.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.lowerThanMinError">
      <summary>Error message when the value is less than <code>minValue</code>.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.maxValue">
      <summary>Maximum value for a valid number.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.minValue">
      <summary>Minimum value for a valid number.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.negativeError">
      <summary>Error message when the value is negative and the <code>allowNegative</code> property is <code>false</code>.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.precision">
      <summary>The maximum number of digits allowed to follow the decimal point.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.precisionError">
      <summary>Error message when the value has a precision that exceeds the value defined by the <code>precision</code> property.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.separationError">
      <summary>Error message when the thousands separator is incorrectly placed.</summary>
    </member>
    <member name="P:mx.validators.CurrencyValidator.thousandsSeparator">
      <summary>The character used to separate thousands.</summary>
    </member>
    <member name="T:mx.validators.CurrencyValidatorAlignSymbol">
      <summary>The CurrencyValidatorAlignSymbol class defines value constants for specifying currency symbol alignment.</summary>
    </member>
    <member name="F:mx.validators.CurrencyValidatorAlignSymbol.LEFT">
      <summary>Specifies <code>"left"</code> as the alignment of the currency symbol for the CurrencyValidator class.</summary>
    </member>
    <member name="F:mx.validators.CurrencyValidatorAlignSymbol.RIGHT">
      <summary>Specifies <code>"right"</code> as the alignment of the currency symbol for the CurrencyValidator class.</summary>
    </member>
    <member name="T:mx.validators.DateValidator">
      <summary>The DateValidator class validates that a String, Date, or Object contains a proper date and matches a specified format.</summary>
    </member>
    <member name="M:mx.validators.DateValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.DateValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a date.</summary>
      <param name="value">Either a String or an Object to validate.</param>
    </member>
    <member name="F:mx.validators.DateValidator.dayProperty">
      <summary>Name of the day property to validate.</summary>
    </member>
    <member name="F:mx.validators.DateValidator.monthProperty">
      <summary>Name of the month property to validate.</summary>
    </member>
    <member name="F:mx.validators.DateValidator.yearProperty">
      <summary>Name of the year property to validate.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.allowedFormatChars">
      <summary>The set of formatting characters allowed for separating the month, day, and year values.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.dayListener">
      <summary>The component that listens for the validation result for the day subfield.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.daySource">
      <summary>Object that contains the value of the day field.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.formatError">
      <summary>Error message when the <code>inputFormat</code> property is not in the correct format.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.inputFormat">
      <summary>The date format to validate the value against.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.invalidCharError">
      <summary>Error message when there are invalid characters in the date.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.monthListener">
      <summary>The component that listens for the validation result for the month subfield.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.monthSource">
      <summary>Object that contains the value of the month field.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.validateAsString">
      <summary>Determines how to validate the value.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.wrongDayError">
      <summary>Error message when the day is invalid.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.wrongLengthError">
      <summary>Error message when the length of the date doesn't match that of the <code>inputFormat</code> property.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.wrongMonthError">
      <summary>Error message when the month is invalid.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.wrongYearError">
      <summary>Error message when the year is invalid.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.yearListener">
      <summary>The component that listens for the validation result for the year subfield.</summary>
    </member>
    <member name="P:mx.validators.DateValidator.yearSource">
      <summary>Object that contains the value of the year field.</summary>
    </member>
    <member name="T:mx.validators.EmailValidator">
      <summary>The EmailValidator class validates that a String has a single &#64; sign, a period in the domain name and that the top-level domain suffix has two, three, four, or six characters.</summary>
    </member>
    <member name="M:mx.validators.EmailValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.EmailValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate an e-mail address.</summary>
      <param name="value">Either a String or an Object to validate.</param>
    </member>
    <member name="M:mx.validators.EmailValidator.validateEmail(mx.validators.EmailValidator,System.Object,Avm.String)">
      <summary>Convenience method for calling a validator from within a custom validation function.</summary>
      <param name="validator">The EmailValidator instance.</param>
      <param name="value">A field to validate.</param>
      <param name="baseField">Text representation of the subfield specified in the value parameter. For example, if the <code>value</code> parameter specifies value.email, the <code>baseField</code> value is "email".</param>
    </member>
    <member name="P:mx.validators.EmailValidator.invalidCharError">
      <summary>Error message when there are invalid characters in the e-mail address.</summary>
    </member>
    <member name="P:mx.validators.EmailValidator.invalidDomainError">
      <summary>Error message when the suffix (the top level domain) is not 2, 3, 4 or 6 characters long.</summary>
    </member>
    <member name="P:mx.validators.EmailValidator.invalidIPDomainError">
      <summary>Error message when the IP domain is invalid.</summary>
    </member>
    <member name="P:mx.validators.EmailValidator.invalidPeriodsInDomainError">
      <summary>Error message when there are continuous periods in the domain.</summary>
    </member>
    <member name="P:mx.validators.EmailValidator.missingAtSignError">
      <summary>Error message when there is no at sign in the email address.</summary>
    </member>
    <member name="P:mx.validators.EmailValidator.missingPeriodInDomainError">
      <summary>Error message when there is no period in the domain.</summary>
    </member>
    <member name="P:mx.validators.EmailValidator.missingUsernameError">
      <summary>Error message when there is no username.</summary>
    </member>
    <member name="P:mx.validators.EmailValidator.tooManyAtSignsError">
      <summary>Error message when there is more than one at sign in the e-mail address.</summary>
    </member>
    <member name="T:mx.validators.IValidatorListener">
      <summary>The interface that components implement to support the Flex data validation mechanism.</summary>
    </member>
    <member name="M:mx.validators.IValidatorListener.validationResultHandler(mx.events.ValidationResultEvent)">
      <summary>Handles both the <code>valid</code> and <code>invalid</code> events from a  validator assigned to this component.</summary>
      <param name="event">The event object for the validation.</param>
    </member>
    <member name="P:mx.validators.IValidatorListener.errorString">
      <summary>The text that will be displayed by a component's error tip when a component is monitored by a Validator and validation fails.</summary>
    </member>
    <member name="P:mx.validators.IValidatorListener.validationSubField">
      <summary>Used by a validator to assign a subfield.</summary>
    </member>
    <member name="T:mx.validators.NumberValidator">
      <summary>The NumberValidator class ensures that a String represents a valid number.</summary>
    </member>
    <member name="M:mx.validators.NumberValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.NumberValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a number.</summary>
      <param name="value">Object to validate.</param>
    </member>
    <member name="P:mx.validators.NumberValidator.allowNegative">
      <summary>Specifies whether negative numbers are permitted.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.decimalPointCountError">
      <summary>Error message when the decimal separator character occurs more than once.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.decimalSeparator">
      <summary>The character used to separate the whole from the fractional part of the number.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.domain">
      <summary>Type of number to be validated.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.exceedsMaxError">
      <summary>Error message when the value exceeds the <code>maxValue</code> property.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.integerError">
      <summary>Error message when the number must be an integer, as defined by the <code>domain</code> property.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.invalidCharError">
      <summary>Error message when the value contains invalid characters.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.invalidFormatCharsError">
      <summary>Error message when the value contains invalid format characters, which means that it contains a digit or minus sign (-) as a separator character, or it contains two or more consecutive separator characters.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.lowerThanMinError">
      <summary>Error message when the value is less than <code>minValue</code>.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.maxValue">
      <summary>Maximum value for a valid number.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.minValue">
      <summary>Minimum value for a valid number.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.negativeError">
      <summary>Error message when the value is negative and the <code>allowNegative</code> property is <code>false</code>.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.precision">
      <summary>The maximum number of digits allowed to follow the decimal point.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.precisionError">
      <summary>Error message when the value has a precision that exceeds the value defined by the precision property.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.separationError">
      <summary>Error message when the thousands separator is in the wrong location.</summary>
    </member>
    <member name="P:mx.validators.NumberValidator.thousandsSeparator">
      <summary>The character used to separate thousands in the whole part of the number.</summary>
    </member>
    <member name="T:mx.validators.PhoneNumberValidator">
      <summary>The PhoneNumberValidator class validates that a string is a valid phone number.</summary>
    </member>
    <member name="M:mx.validators.PhoneNumberValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.PhoneNumberValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a phone number.</summary>
      <param name="value">Object to validate.</param>
    </member>
    <member name="P:mx.validators.PhoneNumberValidator.allowedFormatChars">
      <summary>The set of allowable formatting characters.</summary>
    </member>
    <member name="P:mx.validators.PhoneNumberValidator.invalidCharError">
      <summary>Error message when the value contains invalid characters.</summary>
    </member>
    <member name="P:mx.validators.PhoneNumberValidator.wrongLengthError">
      <summary>Error message when the value has fewer than 10 digits.</summary>
    </member>
    <member name="T:mx.validators.RegExpValidationResult">
      <summary>The RegExpValidator class dispatches the <code>valid</code> and <code>invalid</code> events.</summary>
    </member>
    <member name="F:mx.validators.RegExpValidationResult.matchedIndex">
      <summary>An integer that contains the starting index in the input String of the match.</summary>
    </member>
    <member name="F:mx.validators.RegExpValidationResult.matchedString">
      <summary>A String that contains the substring of the input String that matches the regular expression.</summary>
    </member>
    <member name="F:mx.validators.RegExpValidationResult.matchedSubstrings">
      <summary>An Array of Strings that contains parenthesized substring matches, if any.</summary>
    </member>
    <member name="T:mx.validators.RegExpValidator">
      <summary>The RegExpValidator class lets you use a regular expression to validate a field.</summary>
    </member>
    <member name="M:mx.validators.RegExpValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a regular expression.</summary>
      <param name="value">Object to validate.</param>
    </member>
    <member name="P:mx.validators.RegExpValidator.expression">
      <summary>The regular expression to use for validation.</summary>
    </member>
    <member name="P:mx.validators.RegExpValidator.flags">
      <summary>The regular expression flags to use when matching.</summary>
    </member>
    <member name="P:mx.validators.RegExpValidator.noExpressionError">
      <summary>Error message when there is no regular expression specifed.</summary>
    </member>
    <member name="P:mx.validators.RegExpValidator.noMatchError">
      <summary>Error message when there are no matches to the regular expression.</summary>
    </member>
    <member name="T:mx.validators.SocialSecurityValidator">
      <summary>The SocialSecurityValidator class validates that a String is a valid United States Social Security number.</summary>
    </member>
    <member name="M:mx.validators.SocialSecurityValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.SocialSecurityValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a Social Security number.</summary>
      <param name="value">Object to validate.</param>
    </member>
    <member name="P:mx.validators.SocialSecurityValidator.allowedFormatChars">
      <summary>Specifies the set of formatting characters allowed in the input.</summary>
    </member>
    <member name="P:mx.validators.SocialSecurityValidator.invalidCharError">
      <summary>Error message when the value contains characters other than digits and formatting characters defined by the <code>allowedFormatChars</code> property.</summary>
    </member>
    <member name="P:mx.validators.SocialSecurityValidator.wrongFormatError">
      <summary>Error message when the value is incorrectly formatted.</summary>
    </member>
    <member name="P:mx.validators.SocialSecurityValidator.zeroStartError">
      <summary>Error message when the value contains an invalid Social Security number.</summary>
    </member>
    <member name="T:mx.validators.StringValidator">
      <summary>The StringValidator class validates that the length of a String is within a specified range.</summary>
    </member>
    <member name="M:mx.validators.StringValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.StringValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a String.</summary>
      <param name="value">Object to validate.</param>
    </member>
    <member name="P:mx.validators.StringValidator.maxLength">
      <summary>Maximum length for a valid String.</summary>
    </member>
    <member name="P:mx.validators.StringValidator.minLength">
      <summary>Minimum length for a valid String.</summary>
    </member>
    <member name="P:mx.validators.StringValidator.tooLongError">
      <summary>Error message when the String is longer than the <code>maxLength</code> property.</summary>
    </member>
    <member name="P:mx.validators.StringValidator.tooShortError">
      <summary>Error message when the string is shorter than the <code>minLength</code> property.</summary>
    </member>
    <member name="T:mx.validators.ValidationResult">
      <summary>The ValidationResult class contains the results of a validation.</summary>
    </member>
    <member name="F:mx.validators.ValidationResult.errorCode">
      <summary>The validation error code if the value of the <code>isError</code> property is <code>true</code>.</summary>
    </member>
    <member name="F:mx.validators.ValidationResult.errorMessage">
      <summary>The validation error message if the value of the <code>isError</code> property is <code>true</code>.</summary>
    </member>
    <member name="F:mx.validators.ValidationResult.isError">
      <summary>Contains <code>true</code> if the field generated a validation failure.</summary>
    </member>
    <member name="F:mx.validators.ValidationResult.subField">
      <summary>The name of the subfield that the result is associated with.</summary>
    </member>
    <member name="T:mx.validators.Validator">
      <summary>The Validator class is the base class for all Flex validators.</summary>
    </member>
    <member name="E:mx.validators.Validator.invalid">
      <summary>Dispatched when validation fails.</summary>
    </member>
    <member name="E:mx.validators.Validator.valid">
      <summary>Dispatched when validation succeeds.</summary>
    </member>
    <member name="M:mx.validators.Validator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.Validator.addListenerHandler">
      <summary>Sets up all of the listeners for the <code>valid</code> and <code>invalid</code> events dispatched from the validator.</summary>
    </member>
    <member name="M:mx.validators.Validator.doValidation(System.Object)">
      <summary>Executes the validation logic of this validator, including validating that a missing or empty value causes a validation error as defined by the value of the <code>required</code> property.</summary>
      <param name="value">Value to validate.</param>
    </member>
    <member name="M:mx.validators.Validator.getValueFromSource">
      <summary>Returns the Object to validate.</summary>
    </member>
    <member name="M:mx.validators.Validator.handleResults(Avm.Array)">
      <summary>Returns a ValidationResultEvent from the Array of error results.</summary>
      <param name="errorResults">Array of ValidationResult objects.</param>
    </member>
    <member name="M:mx.validators.Validator.initialized(System.Object,Avm.String)">
      <summary>Called automatically by the MXML compiler when the Validator is created using an MXML tag.</summary>
      <param name="document">The MXML document containing this Validator.</param>
      <param name="id">Ignored.</param>
    </member>
    <member name="M:mx.validators.Validator.isRealValue(System.Object)">
      <summary>Returns <code>true</code> if <code>value</code> is not null.</summary>
      <param name="value">The value to test.</param>
    </member>
    <member name="M:mx.validators.Validator.removeListenerHandler">
      <summary>Disconnects all of the listeners for the <code>valid</code> and <code>invalid</code> events dispatched from the validator.</summary>
    </member>
    <member name="M:mx.validators.Validator.resourcesChanged">
      <summary>This method is called when a Validator is constructed, and again whenever the ResourceManager dispatches a <code>"change"</code> Event to indicate that the localized resources have changed in some way.</summary>
    </member>
    <member name="M:mx.validators.Validator.validate(System.Object,System.Boolean)">
      <summary>Performs validation and optionally notifies the listeners of the result.</summary>
      <param name="value">Optional value to validate. If null, then the validator uses the <code>source</code> and <code>property</code> properties to determine the value. If you specify this argument, you should also set the <code>listener</code> property to specify the target component for any validation error messages.</param>
      <param name="suppressEvents">If <code>false</code>, then after validation, the validator will notify the listener of the result.</param>
    </member>
    <member name="M:mx.validators.Validator.validateAll(Avm.Array)">
      <summary>Invokes all the validators in the <code>validators</code> Array.</summary>
      <param name="validators">An Array containing the Validator objects to execute.</param>
    </member>
    <member name="F:mx.validators.Validator.DECIMAL_DIGITS">
      <summary>A String containing the decimal digits 0 through 9.</summary>
    </member>
    <member name="F:mx.validators.Validator.required">
      <summary>If <code>true</code>, specifies that a missing or empty value causes a validation error.</summary>
    </member>
    <member name="F:mx.validators.Validator.subFields">
      <summary>An Array of Strings containing the names for the properties contained in the <code>value</code> Object passed to the <code>validate()</code> method.</summary>
    </member>
    <member name="P:mx.validators.Validator.actualListeners">
      <summary>Contains an Array of listener objects, if any, or the source object.</summary>
    </member>
    <member name="P:mx.validators.Validator.actualTrigger">
      <summary>Contains the trigger object, if any, or the source object.</summary>
    </member>
    <member name="P:mx.validators.Validator.enabled">
      <summary>Setting this value to <code>false</code> will stop the validator from performing validation.</summary>
    </member>
    <member name="P:mx.validators.Validator.listener">
      <summary>Specifies the validation listener.</summary>
    </member>
    <member name="P:mx.validators.Validator.property">
      <summary>A String specifying the name of the property of the <code>source</code> object that contains the value to validate.</summary>
    </member>
    <member name="P:mx.validators.Validator.requiredFieldError">
      <summary>Error message when a value is missing and the <code>required</code> property is <code>true</code>.</summary>
    </member>
    <member name="P:mx.validators.Validator.source">
      <summary>Specifies the object containing the property to validate.</summary>
    </member>
    <member name="P:mx.validators.Validator.trigger">
      <summary>Specifies the component generating the event that triggers the validator.</summary>
    </member>
    <member name="P:mx.validators.Validator.triggerEvent">
      <summary>Specifies the event that triggers the validation.</summary>
    </member>
    <member name="T:mx.validators.ZipCodeValidator">
      <summary>The ZipCodeValidator class validates that a String has the correct length and format for a five-digit ZIP code, a five-digit+four-digit United States ZIP code, or Canadian postal code.</summary>
    </member>
    <member name="M:mx.validators.ZipCodeValidator.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:mx.validators.ZipCodeValidator.doValidation(System.Object)">
      <summary>Override of the base class <code>doValidation()</code> method to validate a ZIP code.</summary>
      <param name="value">Object to validate.</param>
    </member>
    <member name="M:mx.validators.ZipCodeValidator.validateZipCode(mx.validators.ZipCodeValidator,System.Object,Avm.String)">
      <summary>Convenience method for calling a validator.</summary>
      <param name="validator">The ZipCodeValidator instance.</param>
      <param name="value">A field to validate.</param>
      <param name="baseField">Text representation of the subfield specified in the <code>value</code> parameter. For example, if the <code>value</code> parameter specifies value.zipCode, the <code>baseField</code> value is <code>"zipCode"</code>.</param>
    </member>
    <member name="P:mx.validators.ZipCodeValidator.allowedFormatChars">
      <summary>The set of formatting characters allowed in the ZIP code.</summary>
    </member>
    <member name="P:mx.validators.ZipCodeValidator.domain">
      <summary>Type of ZIP code to check.</summary>
    </member>
    <member name="P:mx.validators.ZipCodeValidator.invalidCharError">
      <summary>Error message when the ZIP code contains invalid characters.</summary>
    </member>
    <member name="P:mx.validators.ZipCodeValidator.invalidDomainError">
      <summary>Error message when the <code>domain</code> property contains an invalid value.</summary>
    </member>
    <member name="P:mx.validators.ZipCodeValidator.wrongCAFormatError">
      <summary>Error message for an invalid Canadian postal code.</summary>
    </member>
    <member name="P:mx.validators.ZipCodeValidator.wrongLengthError">
      <summary>Error message for an invalid US ZIP code.</summary>
    </member>
    <member name="P:mx.validators.ZipCodeValidator.wrongUSFormatError">
      <summary>Error message for an incorrectly formatted ZIP code.</summary>
    </member>
    <member name="T:mx.validators.ZipCodeValidatorDomainType">
      <summary>The ZipCodeValidatorDomainType class defines the values for the <code>domain</code> property of the ZipCodeValidator class, which you use to specify the type of ZIP code to validate.</summary>
    </member>
    <member name="F:mx.validators.ZipCodeValidatorDomainType.US_ONLY">
      <summary>Specifies to validate a United States ZIP code.</summary>
    </member>
  </members>
</doc>