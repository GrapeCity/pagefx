using System;
using System.Collections.Generic;
using DataDynamics.PageFX.CodeModel.Syntax;

namespace DataDynamics.PageFX.CodeModel
{
    public sealed class GenericParameter : CustomAttributeProvider, IGenericParameter
    {
        #region ITypeMember Members
        /// <summary>
        /// Gets the kind of this member.
        /// </summary>
        public TypeMemberType MemberType
        {
            get { return TypeMemberType.Type; }
        }

        public string Name { get; set; }

        public string DisplayName
        {
            get { return Name; }
        }

        /// <summary>
        /// Gets visibility of this member.
        /// </summary>
        public Visibility Visibility
        {
            get { return Visibility.Public; }
            set { }
        }

        public bool IsVisible
        {
            get { return true; }
        }

        public bool IsStatic
        {
            get { return false; }
            set { throw new NotSupportedException(); }
        }

        public bool IsSpecialName
        {
            get { return false; }
            set { }
        }

        public bool IsRuntimeSpecialName
        {
            get { return false; }
            set { }
        }

        /// <summary>
        /// Gets or sets value that identifies a metadata element. 
        /// </summary>
        public int MetadataToken
        {
            get;
            set;
        }
        #endregion

        #region IGenericParameter Members
        public IType DeclaringType { get; set; }

        public int Position { get; set; }

        public GenericParameterVariance Variance { get; set; }

        public GenericParameterSpecialConstraints SpecialConstraints { get; set; }

        public long ID { get; set; }
        #endregion

        #region IType Members

        /// <summary>
        /// Gets the assembly in which the type is declared.
        /// </summary>
        public IAssembly Assembly
        {
            get
            {
                var mod = Module;
                if (mod != null)
                    return mod.Assembly;
                return null;
            }
        }

        /// <summary>
        /// Gets the module in which the current type is defined. 
        /// </summary>
        public IModule Module
        {
            get
            {
                if (DeclaringType != null)
                    return DeclaringType.Module;
                if (DeclaringMethod != null)
                    return DeclaringMethod.Module;
                return null;
            }
            set
            {
                throw new NotSupportedException();
            }
        }

        public string Namespace
        {
            get { return string.Empty; }
            set { throw new NotSupportedException(); }
        }

        public string FullName
        {
            get { return Name; }
        }

        public TypeKind TypeKind
        {
            get { return TypeKind.GenericParameter; }
            set { throw new NotSupportedException(); }
        }

        public bool IsAbstract
        {
            get { return false; }
            set { }
        }

        public bool IsSealed
        {
            get { return false; }
            set { }
        }

        public bool IsBeforeFieldInit
        {
            get { return false; }
            set { }
        }

        /// <summary>
        /// Gets or sets the flag indicating wheher the type is generated by compiler.
        /// </summary>
        public bool IsCompilerGenerated
        {
            get { return false; }
            set { throw new NotSupportedException(); }
        }

        /// <summary>
        /// Determines whether this type is interface.
        /// </summary>
        public bool IsInterface
        {
            get { return false; }
        }

        /// <summary>
        /// Determines whether this type is class.
        /// </summary>
        public bool IsClass
        {
            get { return false; }
        }

        public bool IsArray
        {
            get { return false; }
        }

        /// <summary>
        /// Determines whether this type is enum type.
        /// </summary>
        public bool IsEnum
        {
            get { return false; }
        }

        public bool HasIEnumerableInstance { get; set; }

        public IMethod DeclaringMethod { get; set; }

        public IType BaseType { get; set; }

        public ITypeCollection Interfaces
        {
            get { return _interfaces; }
        }
        private readonly SimpleTypeCollection _interfaces = new SimpleTypeCollection();

        public ITypeCollection Types
        {
            get { return EmptyTypeCollection.Instance; }
        }

        public IFieldCollection Fields
        {
            get { return EmptyFieldCollection.Instance; }
        }

        public IMethodCollection Methods
        {
            get { return EmptyMethodCollection.Instance; }
        }

        public IPropertyCollection Properties
        {
            get { return null; }
        }

        public IEventCollection Events
        {
            get { return null; }
        }

        public ITypeMemberCollection Members
        {
            get { return null; }
        }

        public IType ValueType
        {
            get { return null; }
        }

        public SystemType SystemType
        {
            get { return null; }
            set { throw new NotSupportedException(); }
        }

        public IType Type
        {
            get { return null; }
            set { throw new NotSupportedException(); }
        }

        public ClassLayout Layout
        {
            get { return null; }
            set { throw new NotSupportedException(); }
        }

        /// <summary>
        /// Gets or sets members defined with syntax of some language
        /// </summary>
        public string CustomMembers
        {
            get { throw new NotSupportedException(); }
            set { throw new NotSupportedException(); }
        }

        /// <summary>
        /// Gets or sets type source code.
        /// </summary>
        public string SourceCode
        {
            get { throw new NotSupportedException(); }
            set { throw new NotSupportedException(); }
        }

        /// <summary>
        /// Gets c# keyword used for this type
        /// </summary>
        public string CSharpKeyword
        {
            get { return ""; }
        }

        /// <summary>
        /// Gets unique key of this type. Used for <see cref="TypeFactory"/>.
        /// </summary>
        public string Key
        {
            get { return _key ?? (_key = Name + ID); }
        }
        private string _key;

        /// <summary>
        /// Gets name of the type used in signatures.
        /// </summary>
        public string SigName
        {
            get { return Name; }
        }

        /// <summary>
        /// Name with names of enclosing types.
        /// </summary>
        public string NestedName
        {
            get { return Name; }
        }

        #endregion

        #region ICodeNode Members
        public CodeNodeType NodeType
        {
            get { return CodeNodeType.GenericParameter; }
        }

        public IEnumerable<ICodeNode> ChildNodes
        {
            get { return null; }
        }

    	/// <summary>
    	/// Gets or sets user defined data assotiated with this object.
    	/// </summary>
    	public object Tag { get; set; }

    	#endregion

        #region IFormatable Members
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return Name;
        }
        #endregion

        #region IDocumentationProvider Members

    	/// <summary>
    	/// Gets or sets documentation of this member
    	/// </summary>
    	public string Documentation { get; set; }

    	#endregion

        #region Object Override Members
        public override bool Equals(object obj)
        {
            return CMHelper.AreEquals(this, obj as IType);
        }

        public override int GetHashCode()
        {
            return CMHelper.GetHashCode(this);
        }

        public override string ToString()
        {
            return ToString(null, null);
        }
        #endregion
    }

    public sealed class GenericParameterCollection : List<IGenericParameter>, IGenericParameterCollection
    {
        #region IGenericParameterCollection Members

        public IGenericParameter this[string name]
        {
            get { return Find(p => p.Name == name); }
        }

        #endregion

        #region ICodeNode Members

        public CodeNodeType NodeType
        {
            get { return CodeNodeType.GenericParameters; }
        }

        public IEnumerable<ICodeNode> ChildNodes
        {
            get { return CMHelper.Convert(this); }
        }

    	/// <summary>
    	/// Gets or sets user defined data assotiated with this object.
    	/// </summary>
    	public object Tag { get; set; }

    	#endregion

        #region IFormattable Members
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return SyntaxFormatter.Format(this, format, formatProvider);
        }
        #endregion

        #region Object Override Members
        public override string ToString()
        {
            return ToString(null, null);
        }
        #endregion
    }

    internal class EmptyGenericParamaterCollection : EmptyList<IGenericParameter>,
        IGenericParameterCollection
    {
        public static readonly IGenericParameterCollection Instance = new EmptyGenericParamaterCollection();

        public string ToString(string format, IFormatProvider formatProvider)
        {
            return SyntaxFormatter.Format(this, format, formatProvider);
        }

        public CodeNodeType NodeType
        {
            get { return CodeNodeType.GenericParameters; }
        }

        public IEnumerable<ICodeNode> ChildNodes
        {
            get { return CMHelper.Convert(this); }
        }

        public object Tag
        {
            get;
            set;
        }

        public IGenericParameter this[string name]
        {
            get { return null; }
        }
    }
}