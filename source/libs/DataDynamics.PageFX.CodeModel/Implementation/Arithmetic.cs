using System;
using System.Collections.Generic;

namespace DataDynamics.PageFX.CodeModel
{
	using BinFuncs = Dictionary<KeyValuePair<TypeCode, TypeCode>, Func<object, object, object>>;

    public static class Arithmetic
    {
        private static IType Fix(IType type)
        {
            type = type.UnwrapRef();
            if (type.IsEnum)
                return type.ValueType;
            return type;
        }

        public static bool IsNumeric(IType type)
        {
            if (type == null) return false;
            var st = type.SystemType;
            if (st == null) return false;
            return st.IsNumeric;
        }

        public static IType GetResultType(IType left, IType right, BinaryOperator op)
        {
            left = Fix(left);
            right = Fix(right);

            if (!IsNumeric(left))
                throw new ArgumentException("Type is not numeric type", "left");
            if (!IsNumeric(right))
                throw new ArgumentException("Type is not numeric type", "right");

            //decimal, double, float, long, ulong, int, uint

            //The shl and shr instructions return the same type as their first operand
            switch (op)
            {
                case BinaryOperator.LeftShift:
                case BinaryOperator.RightShift:
                    {
                        var l = left.SystemType;
                        if (l.LessThenInt32)
                            return SystemTypes.Int32;
                        return left;
                    }
            }

            {
                var l = left.SystemType;
                var r = right.SystemType;
                if (l.IsDecimal || r.IsDecimal)
                    return SystemTypes.Decimal;
                if (l.IsDouble || r.IsDouble)
                    return SystemTypes.Double;
                if (l.IsSingle || r.IsSingle)
                    return SystemTypes.Single;
                if (l.IsInt64 || l.IsUInt64)
                    return left;
                if (r.IsInt64 || r.IsUInt64)
                    return right;
                if (l.IsInt32 || l.IsUInt32)
                    return left;
                //if (l.IsInt32 || r.IsInt32)
                //    return SystemTypes.Int32;
                //if (l.IsUInt32 || r.IsUInt32)
                //    return SystemTypes.UInt32;
                return SystemTypes.Int32;
            }
        }

        public static IType GetResultType(IType type, UnaryOperator op)
        {
            type = Fix(type);

            if (!IsNumeric(type))
                throw new ArgumentException("Type is not numeric type", "type");

            //The not instruction is unary and returns the same type as the input.
            if (op == UnaryOperator.BitwiseNot)
                return type;

            var st = type.SystemType;

            if (op == UnaryOperator.Negate)
            {
                if (st.IsUnsigned)
                {
                    if (st.Size <= 4)
                        return SystemTypes.Int32;
                    return SystemTypes.Int64;
                }
            }

            if (st.IsIntegral && st.Bits <= 32)
                return SystemTypes.Int32;

            return type;
        }

		public static object Negate(object x, bool checkOverflow)
		{
			switch (Type.GetTypeCode(x.GetType()))
			{
				case TypeCode.Boolean:
					if (checkOverflow)
					{
						checked { return ((bool)x ? false : true); }
					}
					return ((bool)x ? false : true);
				case TypeCode.Char:
					if (checkOverflow)
					{
						checked { return -((char)x); }
					}
					return -((char)x);
				case TypeCode.SByte:
					if (checkOverflow)
					{
						checked { return -((sbyte)x); }
					}
					return -((sbyte)x);
				case TypeCode.Byte:
					if (checkOverflow)
					{
						checked { return -((byte)x); }
					}
					return -((byte)x);
				case TypeCode.Int16:
					if (checkOverflow)
					{
						checked { return -((Int16)x); }
					}
					return -((Int16)x);
				case TypeCode.UInt16:
					if (checkOverflow)
					{
						checked { return -((UInt16)x); }
					}
					return -((UInt16)x);
				case TypeCode.Int32:
					if (checkOverflow)
					{
						checked { return -((Int32)x); }
					}
					return -((Int32)x);
				case TypeCode.UInt32:
					if (checkOverflow)
					{
						checked { return -((UInt32)x); }
					}
					return -((UInt32)x);
				case TypeCode.Int64:
					if (checkOverflow)
					{
						checked { return -((Int64)x); }
					}
					return -((Int64)x);
				case TypeCode.UInt64:
					if (checkOverflow)
					{
						checked { return -((Decimal)(UInt64)x); }
					}
					return -((Decimal)(UInt64)x);
				case TypeCode.Single:
					if (checkOverflow)
					{
						checked { return -((Single)x); }
					}
					return -((Single)x);
				case TypeCode.Double:
					if (checkOverflow)
					{
						checked { return -((Double)x); }
					}
					return -((Double)x);
				case TypeCode.Decimal:
					if (checkOverflow)
					{
						checked { return -((Decimal)x); }
					}
					return -((Decimal)x);
				default:
					throw new ArgumentOutOfRangeException();
			}
		}

		public static object BitwiseNot(object x, bool checkOverflow)
		{
			switch (Type.GetTypeCode(x.GetType()))
			{
				case TypeCode.Boolean:
					return (bool)x ? false : true;
				case TypeCode.Char:
					if (checkOverflow)
					{
						checked { return ~((char)x); }
					}
					return ~((char)x);
				case TypeCode.SByte:
					if (checkOverflow)
					{
						checked { return ~((sbyte)x); }
					}
					return ~((sbyte)x);
				case TypeCode.Byte:
					if (checkOverflow)
					{
						checked { return ~((byte)x); }
					}
					return ~((byte)x);
				case TypeCode.Int16:
					if (checkOverflow)
					{
						checked { return ~((Int16)x); }
					}
					return ~((Int16)x);
				case TypeCode.UInt16:
					if (checkOverflow)
					{
						checked { return ~((UInt16)x); }
					}
					return ~((UInt16)x);
				case TypeCode.Int32:
					if (checkOverflow)
					{
						checked { return ~((Int32)x); }
					}
					return ~((Int32)x);
				case TypeCode.UInt32:
					if (checkOverflow)
					{
						checked { return ~((UInt32)x); }
					}
					return ~((UInt32)x);
				case TypeCode.Int64:
					if (checkOverflow)
					{
						checked { return ~((Int64)x); }
					}
					return ~((Int64)x);
				case TypeCode.UInt64:
					if (checkOverflow)
					{
						checked { return ~((UInt64)x); }
					}
					return ~((UInt64)x);
				case TypeCode.Single:
					//context.Push(~((Single)x));
					throw new InvalidOperationException("Cannot apply ~ operator to operand of type 'float'");
				case TypeCode.Double:
					//context.Push(~((Double)x));
					throw new InvalidOperationException("Cannot apply ~ operator to operand of type 'double'");
				case TypeCode.Decimal:
					//context.Push(~((Decimal)x));
					throw new InvalidOperationException("Cannot apply ~ operator to operand of type 'decimal'");
				default:
					throw new ArgumentOutOfRangeException();
			}
		}

    	public static object Eval(BinaryOperator op, object x, object y)
    	{
			var key = new KeyValuePair<TypeCode, TypeCode>(Type.GetTypeCode(x.GetType()), Type.GetTypeCode(y.GetType()));
    		var funcs = GetFuncs(op);
			Func<object,object,object> func;
			if (funcs.TryGetValue(key, out func))
			{
				return func(x, y);
			}
			throw new InvalidOperationException("Cannot add numbers of given types.");
    	}

		public static object Add(object x, object y)
		{
			return Eval(BinaryOperator.Addition, x, y);
		}

		public static object Subtract(object x, object y)
		{
			return Eval(BinaryOperator.Subtraction, x, y);
		}

		public static object Multiply(object x, object y)
		{
			return Eval(BinaryOperator.Multiply, x, y);
		}

		public static object Divide(object x, object y)
		{
			return Eval(BinaryOperator.Division, x, y);
		}

		public static object Modulus(object x, object y)
		{
			return Eval(BinaryOperator.Modulus, x, y);
		}

		public static object BitwiseAnd(object x, object y)
		{
			return Eval(BinaryOperator.BitwiseAnd, x, y);
		}

		public static object BitwiseOr(object x, object y)
		{
			return Eval(BinaryOperator.BitwiseOr, x, y);
		}

		public static object BitwiseXor(object x, object y)
		{
			return Eval(BinaryOperator.ExclusiveOr, x, y);
		}

		public static object LeftShift(object x, object y)
		{
			return Eval(BinaryOperator.LeftShift, x, y);
		}

		public static object RightShift(object x, object y)
		{
			return Eval(BinaryOperator.RightShift, x, y);
		}

		private static BinFuncs GetFuncs(BinaryOperator op)
		{
			switch (op)
			{
				case BinaryOperator.Addition:
					return AddFuncs;
				case BinaryOperator.Subtraction:
					return SubFuncs;
				case BinaryOperator.Multiply:
					return MulFuncs;
				case BinaryOperator.Division:
					return DivFuncs;
				case BinaryOperator.Modulus:
					return ModFuncs;
				case BinaryOperator.BitwiseAnd:
					return AndFuncs;
				case BinaryOperator.BitwiseOr:
					return OrFuncs;
				case BinaryOperator.ExclusiveOr:
					return XorFuncs;
				case BinaryOperator.LeftShift:
					return LeftShiftFuncs;
				case BinaryOperator.RightShift:
					return RightShiftFuncs;
				default:
					throw new NotImplementedException();
			}
		}

		private static readonly BinFuncs AddFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) + (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x + (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x + (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x + (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x + (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x + (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x + (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x + (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x + (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (UInt64)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (UInt64)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Single)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Single)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Single)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Single)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Single)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Single)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Single)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Single)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Single)x + (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Single)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Single)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Decimal)(Single)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Single)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Double)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Double)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Double)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Double)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Double)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Double)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Double)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Double)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Double)x + (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Double)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Double)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Decimal)(Double)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Double)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Decimal)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Decimal)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Decimal)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Decimal)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Decimal)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Decimal)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Decimal)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Decimal)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Decimal)x + (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Decimal)x + (Decimal)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Decimal)x + (Decimal)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Decimal)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Decimal)x + (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x + ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x + (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x + (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x + (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x + (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x + (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x + (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x + (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x + (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x + (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x + (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x + (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x + (Int32)(Char)y},
		};

		private static readonly BinFuncs SubFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) - (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x - (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x - (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x - (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x - (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x - (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x - (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x - (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x - (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (UInt64)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (UInt64)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Single)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Single)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Single)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Single)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Single)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Single)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Single)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Single)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Single)x - (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Single)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Single)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Decimal)(Single)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Single)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Double)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Double)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Double)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Double)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Double)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Double)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Double)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Double)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Double)x - (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Double)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Double)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Decimal)(Double)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Double)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Decimal)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Decimal)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Decimal)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Decimal)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Decimal)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Decimal)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Decimal)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Decimal)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Decimal)x - (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Decimal)x - (Decimal)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Decimal)x - (Decimal)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Decimal)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Decimal)x - (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x - ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x - (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x - (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x - (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x - (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x - (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x - (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x - (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x - (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x - (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x - (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x - (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x - (Int32)(Char)y},
		};

		private static readonly BinFuncs MulFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) * (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x * (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x * (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x * (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x * (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x * (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x * (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x * (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x * (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (UInt64)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (UInt64)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Single)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Single)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Single)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Single)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Single)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Single)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Single)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Single)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Single)x * (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Single)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Single)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Decimal)(Single)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Single)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Double)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Double)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Double)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Double)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Double)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Double)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Double)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Double)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Double)x * (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Double)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Double)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Decimal)(Double)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Double)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Decimal)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Decimal)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Decimal)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Decimal)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Decimal)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Decimal)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Decimal)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Decimal)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Decimal)x * (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Decimal)x * (Decimal)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Decimal)x * (Decimal)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Decimal)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Decimal)x * (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x * ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x * (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x * (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x * (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x * (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x * (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x * (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x * (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x * (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x * (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x * (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x * (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x * (Int32)(Char)y},
		};

		private static readonly BinFuncs DivFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) / (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x / (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x / (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x / (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x / (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x / (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x / (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x / (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x / (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (UInt64)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (UInt64)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Single)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Single)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Single)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Single)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Single)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Single)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Single)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Single)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Single)x / (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Single)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Single)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Decimal)(Single)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Single)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Double)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Double)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Double)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Double)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Double)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Double)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Double)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Double)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Double)x / (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Double)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Double)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Decimal)(Double)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Double)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Decimal)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Decimal)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Decimal)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Decimal)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Decimal)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Decimal)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Decimal)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Decimal)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Decimal)x / (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Decimal)x / (Decimal)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Decimal)x / (Decimal)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Decimal)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Decimal)x / (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x / ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x / (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x / (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x / (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x / (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x / (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x / (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x / (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x / (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x / (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x / (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x / (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x / (Int32)(Char)y},
		};

		private static readonly BinFuncs ModFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) % (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x % (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x % (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x % (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x % (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x % (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x % (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x % (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x % (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (UInt64)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (UInt64)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Single)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Single)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Single)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Single)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Single)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Single)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Single)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Single)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Single)x % (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Single)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Single)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Decimal)(Single)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Single)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Double)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Double)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Double)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Double)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Double)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Double)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Double)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Double)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Double)x % (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Double)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Double)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Decimal)(Double)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Double)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Decimal)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Decimal)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Decimal)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Decimal)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Decimal)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Decimal)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Decimal)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Decimal)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Decimal)x % (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Decimal)x % (Decimal)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Decimal)x % (Decimal)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Decimal)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Decimal)x % (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x % ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x % (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x % (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x % (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x % (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x % (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x % (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x % (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x % (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x % (Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x % (Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x % (Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x % (Int32)(Char)y},
		};

		private static readonly BinFuncs OrFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x | (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x | (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x | (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x | (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (Int64)(UInt64)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (Int64)(UInt64)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Int32)(Single)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Int32)(Single)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Int32)(Single)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Int32)(Single)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Int32)(Single)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Int32)(Single)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Int32)(Single)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Int32)(Single)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Int32)(Single)x | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Int32)(Single)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Int32)(Single)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Int32)(Single)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Int32)(Single)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Int64)(Double)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Int64)(Double)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Int64)(Double)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Int64)(Double)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Int64)(Double)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Int64)(Double)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Int64)(Double)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Int64)(Double)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Int64)(Double)x | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Int64)(Double)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Int64)(Double)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Int64)(Double)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Int64)(Double)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Int64)(Decimal)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Int64)(Decimal)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Int64)(Decimal)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Int64)(Decimal)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Int64)(Decimal)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Int64)(Decimal)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Int64)(Decimal)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Int64)(Decimal)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Int64)(Decimal)x | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Int64)(Decimal)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Int64)(Decimal)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Int64)(Decimal)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Int64)(Decimal)x | (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x | ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x | (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x | (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x | (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x | (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x | (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x | (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x | (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x | (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x | (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x | (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x | (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x | (Int32)(Char)y},
		};

		private static readonly BinFuncs AndFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x & (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x & (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x & (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x & (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (Int64)(UInt64)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (Int64)(UInt64)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Int32)(Single)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Int32)(Single)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Int32)(Single)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Int32)(Single)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Int32)(Single)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Int32)(Single)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Int32)(Single)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Int32)(Single)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Int32)(Single)x & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Int32)(Single)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Int32)(Single)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Int32)(Single)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Int32)(Single)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Int64)(Double)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Int64)(Double)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Int64)(Double)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Int64)(Double)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Int64)(Double)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Int64)(Double)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Int64)(Double)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Int64)(Double)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Int64)(Double)x & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Int64)(Double)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Int64)(Double)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Int64)(Double)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Int64)(Double)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Int64)(Decimal)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Int64)(Decimal)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Int64)(Decimal)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Int64)(Decimal)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Int64)(Decimal)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Int64)(Decimal)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Int64)(Decimal)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Int64)(Decimal)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Int64)(Decimal)x & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Int64)(Decimal)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Int64)(Decimal)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Int64)(Decimal)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Int64)(Decimal)x & (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x & ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x & (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x & (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x & (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x & (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x & (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x & (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x & (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x & (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x & (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x & (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x & (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x & (Int32)(Char)y},
		};

		private static readonly BinFuncs XorFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x ^ (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x ^ (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x ^ (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x ^ (UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (Int64)(UInt64)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (Int64)(UInt64)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Int32)(Single)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Int32)(Single)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Int32)(Single)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Int32)(Single)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Int32)(Single)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Int32)(Single)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Int32)(Single)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Int32)(Single)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Int32)(Single)x ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Int32)(Single)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Int32)(Single)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Int32)(Single)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Int32)(Single)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Int64)(Double)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Int64)(Double)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Int64)(Double)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Int64)(Double)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Int64)(Double)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Int64)(Double)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Int64)(Double)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Int64)(Double)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Int64)(Double)x ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Int64)(Double)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Int64)(Double)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Int64)(Double)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Int64)(Double)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Int64)(Decimal)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Int64)(Decimal)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Int64)(Decimal)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Int64)(Decimal)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Int64)(Decimal)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Int64)(Decimal)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Int64)(Decimal)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Int64)(Decimal)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Int64)(Decimal)x ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Int64)(Decimal)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Int64)(Decimal)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Int64)(Decimal)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Int64)(Decimal)x ^ (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x ^ ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x ^ (SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x ^ (Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x ^ (Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x ^ (UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x ^ (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x ^ (UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x ^ (Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x ^ (Int64)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x ^ (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x ^ (Int64)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x ^ (Int64)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x ^ (Int32)(Char)y},
		};

		private static readonly BinFuncs LeftShiftFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (UInt64)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (UInt64)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Int32)(Single)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Int32)(Single)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Int32)(Single)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Int32)(Single)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Int32)(Single)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Int32)(Single)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Int32)(Single)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Int32)(Single)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Int32)(Single)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Int32)(Single)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Int32)(Single)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Int32)(Single)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Int32)(Single)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Int64)(Double)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Int64)(Double)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Int64)(Double)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Int64)(Double)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Int64)(Double)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Int64)(Double)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Int64)(Double)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Int64)(Double)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Int64)(Double)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Int64)(Double)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Int64)(Double)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Int64)(Double)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Int64)(Double)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Int64)(Decimal)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Int64)(Decimal)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Int64)(Decimal)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Int64)(Decimal)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Int64)(Decimal)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Int64)(Decimal)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Int64)(Decimal)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Int64)(Decimal)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Int64)(Decimal)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Int64)(Decimal)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Int64)(Decimal)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Int64)(Decimal)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Int64)(Decimal)x << (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x << ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x << (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x << (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x << (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x << (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x << (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x << (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x << (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x << (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x << (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x << (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x << (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x << (Int32)(Char)y},
		};

		private static readonly BinFuncs RightShiftFuncs = new BinFuncs
		{
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Boolean), (x, y) => ((Boolean)x ? 1 : 0) >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.SByte), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Byte), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int16), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt16), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int32), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt32), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Int64), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.UInt64), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Single), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Double), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Decimal), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Boolean, TypeCode.Char), (x, y) => ((Boolean)x ? 1 : 0) >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Boolean), (x, y) => (SByte)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.SByte), (x, y) => (SByte)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Byte), (x, y) => (SByte)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int16), (x, y) => (SByte)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt16), (x, y) => (SByte)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int32), (x, y) => (SByte)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt32), (x, y) => (SByte)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Int64), (x, y) => (SByte)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.UInt64), (x, y) => (SByte)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Single), (x, y) => (SByte)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Double), (x, y) => (SByte)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Decimal), (x, y) => (SByte)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.SByte, TypeCode.Char), (x, y) => (SByte)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Boolean), (x, y) => (Byte)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.SByte), (x, y) => (Byte)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Byte), (x, y) => (Byte)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int16), (x, y) => (Byte)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt16), (x, y) => (Byte)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int32), (x, y) => (Byte)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt32), (x, y) => (Byte)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Int64), (x, y) => (Byte)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.UInt64), (x, y) => (Byte)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Single), (x, y) => (Byte)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Double), (x, y) => (Byte)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Decimal), (x, y) => (Byte)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Byte, TypeCode.Char), (x, y) => (Byte)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Boolean), (x, y) => (Int16)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.SByte), (x, y) => (Int16)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Byte), (x, y) => (Int16)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int16), (x, y) => (Int16)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt16), (x, y) => (Int16)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int32), (x, y) => (Int16)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt32), (x, y) => (Int16)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Int64), (x, y) => (Int16)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.UInt64), (x, y) => (Int16)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Single), (x, y) => (Int16)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Double), (x, y) => (Int16)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Decimal), (x, y) => (Int16)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int16, TypeCode.Char), (x, y) => (Int16)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Boolean), (x, y) => (UInt16)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.SByte), (x, y) => (UInt16)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Byte), (x, y) => (UInt16)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int16), (x, y) => (UInt16)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt16), (x, y) => (UInt16)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int32), (x, y) => (UInt16)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt32), (x, y) => (UInt16)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Int64), (x, y) => (UInt16)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.UInt64), (x, y) => (UInt16)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Single), (x, y) => (UInt16)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Double), (x, y) => (UInt16)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Decimal), (x, y) => (UInt16)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt16, TypeCode.Char), (x, y) => (UInt16)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Boolean), (x, y) => (Int32)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.SByte), (x, y) => (Int32)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Byte), (x, y) => (Int32)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int16), (x, y) => (Int32)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt16), (x, y) => (Int32)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int32), (x, y) => (Int32)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt32), (x, y) => (Int32)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Int64), (x, y) => (Int32)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.UInt64), (x, y) => (Int32)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Single), (x, y) => (Int32)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Double), (x, y) => (Int32)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Decimal), (x, y) => (Int32)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int32, TypeCode.Char), (x, y) => (Int32)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Boolean), (x, y) => (UInt32)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.SByte), (x, y) => (UInt32)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Byte), (x, y) => (UInt32)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int16), (x, y) => (UInt32)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt16), (x, y) => (UInt32)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int32), (x, y) => (UInt32)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt32), (x, y) => (UInt32)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Int64), (x, y) => (UInt32)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.UInt64), (x, y) => (UInt32)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Single), (x, y) => (UInt32)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Double), (x, y) => (UInt32)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Decimal), (x, y) => (UInt32)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt32, TypeCode.Char), (x, y) => (UInt32)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Boolean), (x, y) => (Int64)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.SByte), (x, y) => (Int64)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Byte), (x, y) => (Int64)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int16), (x, y) => (Int64)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt16), (x, y) => (Int64)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int32), (x, y) => (Int64)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt32), (x, y) => (Int64)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Int64), (x, y) => (Int64)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.UInt64), (x, y) => (Int64)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Single), (x, y) => (Int64)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Double), (x, y) => (Int64)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Decimal), (x, y) => (Int64)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Int64, TypeCode.Char), (x, y) => (Int64)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Boolean), (x, y) => (Int64)(UInt64)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.SByte), (x, y) => (Int64)(UInt64)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Byte), (x, y) => (UInt64)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int16), (x, y) => (Int64)(UInt64)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt16), (x, y) => (UInt64)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int32), (x, y) => (Int64)(UInt64)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt32), (x, y) => (UInt64)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Int64), (x, y) => (Int64)(UInt64)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.UInt64), (x, y) => (UInt64)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Single), (x, y) => (Int64)(UInt64)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Double), (x, y) => (UInt64)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Decimal), (x, y) => (UInt64)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.UInt64, TypeCode.Char), (x, y) => (Int64)(UInt64)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Boolean), (x, y) => (Int32)(Single)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.SByte), (x, y) => (Int32)(Single)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Byte), (x, y) => (Int32)(Single)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int16), (x, y) => (Int32)(Single)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt16), (x, y) => (Int32)(Single)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int32), (x, y) => (Int32)(Single)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt32), (x, y) => (Int32)(Single)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Int64), (x, y) => (Int32)(Single)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.UInt64), (x, y) => (Int32)(Single)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Single), (x, y) => (Int32)(Single)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Double), (x, y) => (Int32)(Single)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Decimal), (x, y) => (Int32)(Single)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Single, TypeCode.Char), (x, y) => (Int32)(Single)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Boolean), (x, y) => (Int64)(Double)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.SByte), (x, y) => (Int64)(Double)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Byte), (x, y) => (Int64)(Double)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int16), (x, y) => (Int64)(Double)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt16), (x, y) => (Int64)(Double)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int32), (x, y) => (Int64)(Double)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt32), (x, y) => (Int64)(Double)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Int64), (x, y) => (Int64)(Double)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.UInt64), (x, y) => (Int64)(Double)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Single), (x, y) => (Int64)(Double)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Double), (x, y) => (Int64)(Double)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Decimal), (x, y) => (Int64)(Double)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Double, TypeCode.Char), (x, y) => (Int64)(Double)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Boolean), (x, y) => (Int64)(Decimal)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.SByte), (x, y) => (Int64)(Decimal)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Byte), (x, y) => (Int64)(Decimal)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int16), (x, y) => (Int64)(Decimal)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt16), (x, y) => (Int64)(Decimal)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int32), (x, y) => (Int64)(Decimal)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt32), (x, y) => (Int64)(Decimal)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Int64), (x, y) => (Int64)(Decimal)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.UInt64), (x, y) => (Int64)(Decimal)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Single), (x, y) => (Int64)(Decimal)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Double), (x, y) => (Int64)(Decimal)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Decimal), (x, y) => (Int64)(Decimal)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Decimal, TypeCode.Char), (x, y) => (Int64)(Decimal)x >> (Int32)(Char)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Boolean), (x, y) => (Int32)(Char)x >> ((Boolean)y ? 1 : 0)},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.SByte), (x, y) => (Int32)(Char)x >> (Int32)(SByte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Byte), (x, y) => (Int32)(Char)x >> (Int32)(Byte)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int16), (x, y) => (Int32)(Char)x >> (Int32)(Int16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt16), (x, y) => (Int32)(Char)x >> (Int32)(UInt16)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int32), (x, y) => (Int32)(Char)x >> (Int32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt32), (x, y) => (Int32)(Char)x >> (Int32)(UInt32)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Int64), (x, y) => (Int32)(Char)x >> (Int32)(Int64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.UInt64), (x, y) => (Int32)(Char)x >> (Int32)(UInt64)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Single), (x, y) => (Int32)(Char)x >> (Int32)(Single)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Double), (x, y) => (Int32)(Char)x >> (Int32)(Double)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Decimal), (x, y) => (Int32)(Char)x >> (Int32)(Decimal)y},
			{new KeyValuePair<TypeCode,TypeCode>(TypeCode.Char, TypeCode.Char), (x, y) => (Int32)(Char)x >> (Int32)(Char)y},
		};
    }
}