#define XSLT_PATTERN 
// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
// XPath/XSLT Pattern parser
//
// Author: Piers Haken <piersh@friskit.com>
//         Atsushi Enomoto  <atsushi@ximian.com>
//
// IMPORTANT:
// Do not edit "PatternParser.jay". It is autogenerated from
// Parser.jay. It will be overwritten!
//

using System;
using System.Collections;
using System.Xml;
using System.Xml.XPath;

#if XSLT_PATTERN
namespace Mono.Xml.Xsl
#else
namespace Mono.Xml.XPath
#endif
{
#if XSLT_PATTERN
	internal class XsltPatternParser
#else
	internal class XPathParser
#endif
	{
	
		internal System.Xml.Xsl.IStaticXsltContext Context;
		
#if XSLT_PATTERN
		public XsltPatternParser () : this (null) {}
		internal XsltPatternParser (System.Xml.Xsl.IStaticXsltContext context)
#else
		public XPathParser () : this (null) {}
		internal XPathParser (System.Xml.Xsl.IStaticXsltContext context)
#endif
		{
			Context = context;
			ErrorOutput = System.IO.TextWriter.Null;
//			debug = new yydebug.yyDebugSimple ();
		}
		
		internal Expression Compile (string xpath)
		{
			try {
				Tokenizer tokenizer = new Tokenizer (xpath);
				return (Expression) yyparse (tokenizer);
			} catch (XPathException) {
				throw;
			} catch (Exception e) {
				throw new XPathException ("Error during parse of " + xpath, e);
			}
		}
		static int yacc_verbose_flag;

		private NodeSet CreateNodeTest (Axes axis, object nodeTest, ArrayList plist)
		{
			NodeSet test = CreateNodeTest (axis, nodeTest);
			if (plist != null) {
				for (int i = 0; i < plist.Count; i++)
					test = new ExprFilter (test,
						(Expression) plist [i]);
			}
			return test;
		}

		private NodeTest CreateNodeTest (Axes axis, object test)
		{
			if (test is XPathNodeType)
				return new NodeTypeTest (axis,
					(XPathNodeType) test, null);
			else if (test is string || test == null)
				return new NodeTypeTest (axis,
					XPathNodeType.ProcessingInstruction,
					(string) test);
			XmlQualifiedName q = (XmlQualifiedName) test;
			if (q == XmlQualifiedName.Empty)
				return new NodeTypeTest (axis);
			else
				return new NodeNameTest (axis, q, Context);
		}
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 7;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : Pattern",
    "Pattern : LocationPathPattern",
    "Pattern : Pattern BAR LocationPathPattern",
    "LocationPathPattern : SLASH",
    "LocationPathPattern : SLASH RelativePathPattern",
    "LocationPathPattern : IdKeyPattern",
    "LocationPathPattern : IdKeyPattern SLASH RelativePathPattern",
    "LocationPathPattern : IdKeyPattern SLASH2 RelativePathPattern",
    "LocationPathPattern : SLASH2 RelativePathPattern",
    "LocationPathPattern : RelativePathPattern",
    "IdKeyPattern : FUNCTION_NAME PAREN_OPEN LITERAL PAREN_CLOSE",
    "IdKeyPattern : FUNCTION_NAME PAREN_OPEN LITERAL COMMA LITERAL PAREN_CLOSE",
    "RelativePathPattern : StepPattern",
    "RelativePathPattern : RelativePathPattern SLASH StepPattern",
    "RelativePathPattern : RelativePathPattern SLASH2 StepPattern",
    "StepPattern : ChildOrAttributeAxisSpecifier NodeTest Predicates",
    "ChildOrAttributeAxisSpecifier : AbbreviatedAxisSpecifier",
    "ChildOrAttributeAxisSpecifier : CHILD COLON2",
    "ChildOrAttributeAxisSpecifier : ATTRIBUTE COLON2",
    "Predicates :",
    "Predicates : Predicates Predicate",
    "Expr : OrExpr",
    "OrExpr : AndExpr",
    "OrExpr : OrExpr OR AndExpr",
    "AndExpr : EqualityExpr",
    "AndExpr : AndExpr AND EqualityExpr",
    "EqualityExpr : RelationalExpr",
    "EqualityExpr : EqualityExpr EQ RelationalExpr",
    "EqualityExpr : EqualityExpr NE RelationalExpr",
    "RelationalExpr : AdditiveExpr",
    "RelationalExpr : RelationalExpr LT AdditiveExpr",
    "RelationalExpr : RelationalExpr GT AdditiveExpr",
    "RelationalExpr : RelationalExpr LE AdditiveExpr",
    "RelationalExpr : RelationalExpr GE AdditiveExpr",
    "AdditiveExpr : MultiplicativeExpr",
    "AdditiveExpr : AdditiveExpr PLUS MultiplicativeExpr",
    "AdditiveExpr : AdditiveExpr MINUS MultiplicativeExpr",
    "MultiplicativeExpr : UnaryExpr",
    "MultiplicativeExpr : MultiplicativeExpr MULTIPLY UnaryExpr",
    "MultiplicativeExpr : MultiplicativeExpr DIV UnaryExpr",
    "MultiplicativeExpr : MultiplicativeExpr MOD UnaryExpr",
    "UnaryExpr : UnionExpr",
    "UnaryExpr : MINUS UnaryExpr",
    "UnionExpr : PathExpr",
    "UnionExpr : UnionExpr BAR PathExpr",
    "PathExpr : LocationPath",
    "PathExpr : FilterExpr",
    "PathExpr : FilterExpr SLASH RelativeLocationPath",
    "PathExpr : FilterExpr SLASH2 RelativeLocationPath",
    "LocationPath : RelativeLocationPath",
    "LocationPath : AbsoluteLocationPath",
    "AbsoluteLocationPath : SLASH",
    "AbsoluteLocationPath : SLASH RelativeLocationPath",
    "AbsoluteLocationPath : SLASH2 RelativeLocationPath",
    "RelativeLocationPath : Step",
    "RelativeLocationPath : RelativeLocationPath SLASH Step",
    "RelativeLocationPath : RelativeLocationPath SLASH2 Step",
    "Step : AxisSpecifier NodeTest Predicates",
    "Step : AbbreviatedStep",
    "NodeTest : NameTest",
    "NodeTest : NodeType PAREN_OPEN PAREN_CLOSE",
    "NodeTest : PROCESSING_INSTRUCTION PAREN_OPEN OptionalLiteral PAREN_CLOSE",
    "NameTest : ASTERISK",
    "NameTest : QName",
    "AbbreviatedStep : DOT",
    "AbbreviatedStep : DOT2",
    "Predicates :",
    "Predicates : Predicates Predicate",
    "AxisSpecifier : AxisName COLON2",
    "AxisSpecifier : AbbreviatedAxisSpecifier",
    "AbbreviatedAxisSpecifier :",
    "AbbreviatedAxisSpecifier : AT",
    "NodeType : COMMENT",
    "NodeType : TEXT",
    "NodeType : PROCESSING_INSTRUCTION",
    "NodeType : NODE",
    "FilterExpr : PrimaryExpr",
    "FilterExpr : FilterExpr Predicate",
    "PrimaryExpr : DOLLAR QName",
    "PrimaryExpr : PAREN_OPEN Expr PAREN_CLOSE",
    "PrimaryExpr : LITERAL",
    "PrimaryExpr : NUMBER",
    "PrimaryExpr : FunctionCall",
    "FunctionCall : FUNCTION_NAME PAREN_OPEN OptionalArgumentList PAREN_CLOSE",
    "OptionalArgumentList :",
    "OptionalArgumentList : Expr OptionalArgumentListTail",
    "OptionalArgumentListTail :",
    "OptionalArgumentListTail : COMMA Expr OptionalArgumentListTail",
    "Predicate : BRACKET_OPEN Expr BRACKET_CLOSE",
    "AxisName : ANCESTOR",
    "AxisName : ANCESTOR_OR_SELF",
    "AxisName : ATTRIBUTE",
    "AxisName : CHILD",
    "AxisName : DESCENDANT",
    "AxisName : DESCENDANT_OR_SELF",
    "AxisName : FOLLOWING",
    "AxisName : FOLLOWING_SIBLING",
    "AxisName : NAMESPACE",
    "AxisName : PARENT",
    "AxisName : PRECEDING",
    "AxisName : PRECEDING_SIBLING",
    "AxisName : SELF",
    "OptionalLiteral :",
    "OptionalLiteral : LITERAL",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,"'$'",null,null,
    null,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",null,null,null,
    null,null,null,null,null,null,null,null,null,"'<'","'='","'>'",null,
    "'@'",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,"']'",null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,"'|'",null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "ERROR","EOF","SLASH","SLASH2","\"//\"","DOT","DOT2","\"..\"",
    "COLON2","\"::\"","COMMA","AT","FUNCTION_NAME","BRACKET_OPEN",
    "BRACKET_CLOSE","PAREN_OPEN","PAREN_CLOSE","AND","\"and\"","OR",
    "\"or\"","DIV","\"div\"","MOD","\"mod\"","PLUS","MINUS","ASTERISK",
    "DOLLAR","BAR","EQ","NE","\"!=\"","LE","\"<=\"","GE","\">=\"","LT",
    "GT","ANCESTOR","\"ancestor\"","ANCESTOR_OR_SELF",
    "\"ancstor-or-self\"","ATTRIBUTE","\"attribute\"","CHILD","\"child\"",
    "DESCENDANT","\"descendant\"","DESCENDANT_OR_SELF",
    "\"descendant-or-self\"","FOLLOWING","\"following\"",
    "FOLLOWING_SIBLING","\"sibling\"","NAMESPACE","\"NameSpace\"",
    "PARENT","\"parent\"","PRECEDING","\"preceding\"","PRECEDING_SIBLING",
    "\"preceding-sibling\"","SELF","\"self\"","COMMENT","\"comment\"",
    "TEXT","\"text\"","PROCESSING_INSTRUCTION",
    "\"processing-instruction\"","NODE","\"node\"","MULTIPLY","NUMBER",
    "LITERAL","QName",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected string[] yyExpecting (int state) {
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];

    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }

    string [] result = new string[len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = yyNames[token];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0;                                   // state stack ptr
    int [] yyStates = new int[yyMax];	                // state stack 
    Object yyVal = null;                               // value stack ptr
    Object [] yyVals = new Object[yyMax];	        // value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tks to shift

    /*yyLoop:*/ for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        int[] i = new int[yyStates.Length+yyMax];
        yyStates.CopyTo (i, 0);
        yyStates = i;
        Object[] o = new Object[yyVals.Length+yyMax];
        yyVals.CopyTo (o, 0);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 2:
#line 170 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprUNION ((NodeSet) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 3:
#line 177 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprRoot ();
	}
  break;
case 4:
#line 181 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH (new ExprRoot (), (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 6:
#line 186 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH ((Expression) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 7:
#line 190 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH2 ((Expression) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 8:
#line 194 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH2 (new ExprRoot (), (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 10:
#line 203 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		XmlQualifiedName name = (XmlQualifiedName) yyVals[-3+yyTop];
		if (name.Name != "id" || name.Namespace != String.Empty)
			throw new XPathException (String.Format ("Expected 'id' but got '{0}'", name));
		yyVal = ExprFunctionCall.Factory (name,
			new FunctionArguments (
				new ExprLiteral ((string) yyVals[-1+yyTop]),
				null),
			Context);
	}
  break;
case 11:
#line 214 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		XmlQualifiedName name = (XmlQualifiedName) yyVals[-5+yyTop];
		if (name.Name != "key" || name.Namespace != String.Empty)
			throw new XPathException (String.Format ("Expected 'key' but got '{0}'", name));
		yyVal = Context.TryGetFunction (name,
			new FunctionArguments (
				new ExprLiteral ((string) yyVals[-3+yyTop]),
				new FunctionArguments (
					new ExprLiteral ((string) yyVals[-1+yyTop]),
					null)));
	}
  break;
case 13:
#line 230 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH ((Expression) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 14:
#line 234 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH2 ((Expression) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 15:
#line 241 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = CreateNodeTest ((Axes) yyVals[-2+yyTop], yyVals[-1+yyTop], (ArrayList) yyVals[0+yyTop]);
	}
  break;
case 17:
#line 249 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = Axes.Child;
	}
  break;
case 18:
#line 253 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = Axes.Attribute;
	}
  break;
case 19:
#line 260 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = null;
	}
  break;
case 20:
#line 264 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		ArrayList al = (ArrayList) yyVals[-1+yyTop];
		if (al == null)
			al = new ArrayList ();
		al.Add ((Expression) yyVals[0+yyTop]);
		yyVal = al;
	}
  break;
case 23:
#line 283 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprOR ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 25:
#line 291 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprAND ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 27:
#line 299 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprEQ ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 28:
#line 303 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprNE ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 30:
#line 311 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprLT ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 31:
#line 315 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprGT ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 32:
#line 319 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprLE ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 33:
#line 323 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprGE ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 35:
#line 331 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprPLUS ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 36:
#line 335 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprMINUS ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 38:
#line 343 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprMULT ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 39:
#line 347 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprDIV ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 40:
#line 351 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprMOD ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 42:
#line 359 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprNEG ((Expression) yyVals[0+yyTop]);
	}
  break;
case 44:
#line 367 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprUNION ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 47:
#line 376 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH ((Expression) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 48:
#line 380 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH2 ((Expression) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 51:
#line 392 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprRoot ();
	}
  break;
case 52:
#line 396 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH (new ExprRoot (), (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 53:
#line 400 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH2 (new ExprRoot (), (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 55:
#line 408 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH ((NodeSet) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 56:
#line 412 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprSLASH2 ((NodeSet) yyVals[-2+yyTop], (NodeSet) yyVals[0+yyTop]);
	}
  break;
case 57:
#line 419 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = CreateNodeTest ((Axes) yyVals[-2+yyTop], yyVals[-1+yyTop], (ArrayList) yyVals[0+yyTop]);
	}
  break;
case 60:
#line 428 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = (XPathNodeType) yyVals[-2+yyTop];
	}
  break;
case 61:
#line 432 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = (string) yyVals[-1+yyTop];
	}
  break;
case 62:
#line 439 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = XmlQualifiedName.Empty;
	}
  break;
case 64:
#line 447 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new NodeTypeTest (Axes.Self, XPathNodeType.All);
	}
  break;
case 65:
#line 451 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new NodeTypeTest (Axes.Parent, XPathNodeType.All);
	}
  break;
case 66:
#line 458 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = null;
	}
  break;
case 67:
#line 462 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		ArrayList al = (ArrayList) yyVals[-1+yyTop];
		if (al == null)
			al = new ArrayList ();
		al.Add (yyVals[0+yyTop]);
		yyVal = al;
	}
  break;
case 68:
#line 473 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	}
  break;
case 70:
#line 481 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = Axes.Child;
	}
  break;
case 71:
#line 485 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = Axes.Attribute;
	}
  break;
case 72:
#line 491 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = XPathNodeType.Comment; }
  break;
case 73:
#line 492 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = XPathNodeType.Text; }
  break;
case 74:
#line 493 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = XPathNodeType.ProcessingInstruction; }
  break;
case 75:
#line 494 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = XPathNodeType.All; }
  break;
case 77:
#line 501 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprFilter ((Expression) yyVals[-1+yyTop], (Expression) yyVals[0+yyTop]);
	}
  break;
case 78:
#line 508 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		Expression ret = null;
		if (Context != null)
			ret = Context.TryGetVariable (((XmlQualifiedName) yyVals[0+yyTop]).ToString ());
		
		if (ret == null)
			ret = new ExprVariable ((XmlQualifiedName) yyVals[0+yyTop], Context);
			
		yyVal = ret;
	}
  break;
case 79:
#line 519 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprParens ((Expression) yyVals[-1+yyTop]);
	}
  break;
case 80:
#line 523 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprLiteral ((String) yyVals[0+yyTop]);
	}
  break;
case 81:
#line 527 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new ExprNumber ((double) yyVals[0+yyTop]);
	}
  break;
case 83:
#line 535 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		Expression ret = null;
		if (Context != null)
			ret = Context.TryGetFunction ((XmlQualifiedName) yyVals[-3+yyTop], (FunctionArguments) yyVals[-1+yyTop]);
		if (ret == null)
			ret = ExprFunctionCall.Factory ((XmlQualifiedName) yyVals[-3+yyTop], (FunctionArguments) yyVals[-1+yyTop], Context);
		
		yyVal = ret;
	}
  break;
case 85:
#line 549 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new FunctionArguments ((Expression) yyVals[-1+yyTop], (FunctionArguments) yyVals[0+yyTop]);
	}
  break;
case 87:
#line 557 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = new FunctionArguments ((Expression) yyVals[-1+yyTop], (FunctionArguments) yyVals[0+yyTop]);
	}
  break;
case 88:
#line 564 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	}
  break;
case 89:
#line 570 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Ancestor; }
  break;
case 90:
#line 571 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.AncestorOrSelf; }
  break;
case 91:
#line 572 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Attribute; }
  break;
case 92:
#line 573 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Child; }
  break;
case 93:
#line 574 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Descendant; }
  break;
case 94:
#line 575 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.DescendantOrSelf; }
  break;
case 95:
#line 576 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Following; }
  break;
case 96:
#line 577 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.FollowingSibling; }
  break;
case 97:
#line 578 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Namespace; }
  break;
case 98:
#line 579 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Parent; }
  break;
case 99:
#line 580 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Preceding; }
  break;
case 100:
#line 581 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.PrecedingSibling; }
  break;
case 101:
#line 582 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
  { yyVal = Axes.Self; }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: continue;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: continue;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    3,
    3,    2,    2,    2,    4,    5,    5,    5,    7,    7,
   10,   11,   11,   12,   12,   13,   13,   13,   14,   14,
   14,   14,   14,   15,   15,   15,   16,   16,   16,   16,
   17,   17,   18,   18,   19,   19,   19,   19,   20,   20,
   23,   23,   23,   22,   22,   22,   24,   24,    6,    6,
    6,   27,   27,   26,   26,    7,    7,   25,   25,    8,
    8,   28,   28,   28,   28,   21,   21,   31,   31,   31,
   31,   31,   32,   33,   33,   34,   34,    9,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   29,   29,
  };
   static  short [] yyLen = {           2,
    1,    3,    1,    2,    1,    3,    3,    2,    1,    4,
    6,    1,    3,    3,    3,    1,    2,    2,    0,    2,
    1,    1,    3,    1,    3,    1,    3,    3,    1,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    3,    3,
    1,    2,    1,    3,    1,    1,    3,    3,    1,    1,
    1,    2,    2,    1,    3,    3,    3,    1,    1,    3,
    4,    1,    1,    1,    1,    0,    2,    2,    1,    0,
    1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
    1,    1,    4,    0,    2,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    1,
  };
   static  short [] yyDefRed = {            0,
    0,    0,   71,    0,    0,    0,    0,    1,    0,    0,
   12,    0,   16,    0,    0,    0,   18,   17,    0,    0,
    0,    0,    0,   62,   72,   73,    0,   75,   63,   19,
   59,    0,    0,    2,   13,   14,    0,    0,    0,    0,
    0,    0,   10,  103,    0,    0,   20,   60,    0,   61,
    0,    0,   64,   65,    0,    0,    0,    0,   89,   90,
   91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
  101,   81,   80,   69,    0,    0,    0,    0,    0,    0,
    0,   37,    0,   43,   45,    0,    0,   50,   54,    0,
   58,    0,   76,   82,   11,    0,    0,    0,    0,   42,
   78,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   77,    0,
    0,   19,   68,    0,    0,   79,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   39,   40,   38,   44,
    0,    0,   55,   56,    0,    0,   85,   83,    0,   87,
  };
  protected static  short [] yyDgoto  = {             7,
    8,    9,   10,   11,   12,   30,   40,   74,   47,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
   86,   87,   88,   89,   90,   91,   31,   32,   45,   92,
   93,   94,  125,  147,
  };
  protected static  short [] yySindex = {         -245,
 -251, -251,    0, -261, -221, -218, -256,    0, -231, -219,
    0, -225,    0, -231, -231, -279,    0,    0, -245, -251,
 -251, -251, -251,    0,    0,    0, -211,    0,    0,    0,
    0, -209, -235,    0,    0,    0, -231, -231, -247, -174,
 -167, -220,    0,    0, -159, -250,    0,    0, -157,    0,
  216,  216,    0,    0, -154, -250, -250, -213,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -149, -152, -148, -215,  -16, -203,
 -244,    0, -158,    0,    0, -239,  -50,    0,    0, -225,
    0, -135,    0,    0,    0,  -50,  -50, -250, -141,    0,
    0,    0, -250, -250, -250, -250, -250, -250, -250, -250,
 -250, -250, -250, -250, -250, -185,  216,  216,    0,  216,
  216,    0,    0, -128, -131,    0, -148, -215,  -16,  -16,
 -203, -203, -203, -203, -244, -244,    0,    0,    0,    0,
  -50,  -50,    0,    0, -174, -250,    0,    0, -128,    0,
  };
  protected static  short [] yyRindex = {         -122,
    1, -122,    0,    0,    0,    0,    0,    0,    3,    4,
    0,    0,    0,    5,    6,    0,    0,    0, -122, -122,
 -122, -122, -122,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    7,    8, -124,    2,
    0,    0,    0,    0,    0, -122,    0,    0,    0,    0,
  -97, -122,    0,    0,    0, -122, -122,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -228, -115, -169,  219,  -53,
  264,    0,  193,    0,    0,  -23,   57,    0,    0,    0,
    0,    0,    0,    0,    0,   83,  112, -257,    0,    0,
    0,    0, -122, -122, -122, -122, -122, -122, -122, -122,
 -122, -122, -122, -122, -122, -122, -122, -122,    0, -122,
 -122,    0,    0, -119,    0,    0,  -68, -133,  388,  407,
   10,  342,  352,  378,  290,  316,    0,    0,    0,    0,
  138,  167,    0,    0, -123, -122,    0,    0, -119,    0,
  };
  protected static  short [] yyGindex = {            0,
  126,   87,    0,  192,    0,   76,   46,  548,   89,  -56,
    0,   70,   74,  110,  201,  134,  -20,    0,   64,    0,
    0,  -26,    0,  175,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   33,
  };
  protected static  short [] yyTable = {            99,
    3,   15,    9,    5,    4,    8,    6,    7,   51,   52,
   16,   53,   54,    1,    2,   84,    3,    3,   55,  117,
  118,   56,    3,    4,   96,   97,   70,   20,   21,   19,
   46,   42,   57,  113,   58,  114,  100,   43,   21,   22,
   23,  124,   21,   17,   21,   59,   18,   60,    5,   61,
    6,   62,   33,   63,    5,   64,    6,   65,   24,   66,
   39,   67,   41,   68,   70,   69,   70,   70,   70,   71,
   70,  105,  106,   51,   52,   70,   53,   54,  111,  112,
   72,   73,    3,   55,   44,  115,   56,   14,   15,  149,
  141,  142,  137,  138,  139,   46,   25,   24,   26,   58,
   27,   24,   28,   24,   24,   48,   24,   29,   37,   38,
   59,   49,   60,   50,   61,   95,   62,   98,   63,  101,
   64,  102,   65,  103,   66,  104,   67,  116,   68,  123,
   69,  126,   70,   25,   71,   57,   57,   25,  146,   25,
   25,  148,   25,   57,   34,   72,   73,   57,  102,   57,
   57,   22,   57,   86,   57,   22,   57,   22,   57,   57,
   22,   70,   57,   57,   57,  122,   57,  145,   57,   51,
   57,   57,  127,   51,  119,   51,   51,  128,   51,  140,
   51,  150,   51,    0,   51,   51,   70,    0,   51,   51,
   51,    0,   51,    0,   51,    0,   51,   51,   23,   70,
    0,   70,   23,   70,   23,   70,   57,   23,  120,  121,
   70,   35,   36,   29,  129,  130,    0,   29,    0,   29,
   29,    0,   29,    0,   70,    0,   70,    0,   70,    0,
   70,    0,   51,   29,   29,   70,   29,    0,   29,    0,
   29,   29,    0,   46,  135,  136,    0,   46,    0,   46,
   46,    0,   46,    0,   46,    0,   46,    0,   46,   46,
   15,   15,   46,   46,   46,    0,   46,    0,   46,    0,
   46,   46,    0,  107,    0,  108,   32,  109,  110,    0,
   32,    0,   32,   32,   70,   32,    3,   15,    9,    5,
    4,    8,    6,    7,  143,  144,   32,   32,    0,   32,
    0,   32,    0,   32,   32,    0,   46,  131,  132,  133,
  134,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   70,   49,   70,    0,   70,   49,   70,   49,
   49,    0,   49,   70,   49,    0,   49,    0,   49,   49,
    0,    0,   49,   49,   49,    0,   49,    0,   49,   52,
   49,   49,    0,   52,    0,   52,   52,    0,   52,    0,
   52,    0,   52,    0,   52,   52,    0,    0,   52,   52,
   52,    0,   52,    0,   52,    0,   52,   52,   53,    0,
    0,    0,   53,    0,   53,   53,   49,   53,    0,   53,
    0,   53,    0,   53,   53,    0,    0,   53,   53,   53,
    0,   53,    0,   53,   47,   53,   53,    0,   47,    0,
   47,   47,   52,   47,    0,   47,    0,   47,    0,   47,
   47,    0,    0,   47,   47,   47,    0,   47,    0,   47,
    0,   47,   47,   48,    0,    0,    0,   48,    0,   48,
   48,   53,   48,    0,   48,    0,   48,    0,   48,   48,
    0,    0,   48,   48,   48,    0,   48,    0,   48,   41,
   48,   48,    0,   41,    0,   41,   41,   47,   41,    0,
   41,    0,   41,    0,   41,   41,    0,   53,   54,   41,
   41,    0,   41,    3,   41,   26,   41,   41,    0,   26,
    0,   26,   26,    0,   26,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,   26,   26,    0,    0,    0,
    0,   59,    0,   60,    0,   61,    0,   62,    0,   63,
    0,   64,   41,   65,    0,   66,    0,   67,    0,   68,
   34,   69,    0,   70,   34,   71,   34,   34,    0,   34,
    0,    0,    0,    0,    0,   34,   34,   13,   13,   13,
   34,   34,    0,   34,    0,   34,   35,   34,   34,    0,
   35,    0,   35,   35,    0,   35,   13,   13,   13,   13,
   13,   35,   35,    0,    0,    0,   35,   35,    0,   35,
    0,   35,   36,   35,   35,    0,   36,    0,   36,   36,
    0,   36,    0,    0,    0,    0,    0,   36,   36,    0,
    0,    0,   36,   36,    0,   36,    0,   36,   33,   36,
   36,    0,   33,    0,   33,   33,    0,   33,   30,    0,
    0,    0,   30,    0,   30,   30,    0,   30,   33,   33,
    0,   33,    0,   33,    0,   33,   33,    0,   30,   30,
    0,   30,    0,   30,   31,   30,   30,    0,   31,    0,
   31,   31,    0,   31,   27,    0,    0,    0,   27,    0,
   27,   27,    0,   27,   31,   31,    0,   31,    0,   31,
    0,   31,   31,   28,   27,   27,    0,   28,    0,   28,
   28,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,   28,
  };
  protected static  short [] yyCheck = {            56,
    0,    0,    0,    0,    0,    0,    0,    0,  259,  260,
  272,  262,  263,  259,  260,  273,  268,  268,  269,  259,
  260,  272,  268,  269,   51,   52,  284,  259,  260,  286,
  270,  267,  283,  278,  285,  280,   57,  273,  267,  259,
  260,   98,  271,  265,  273,  296,  265,  298,  300,  300,
  302,  302,  332,  304,  300,  306,  302,  308,  284,  310,
  272,  312,  272,  314,  322,  316,  324,  318,  326,  320,
  328,  287,  288,  259,  260,  333,  262,  263,  282,  283,
  331,  332,  268,  269,  332,  330,  272,    1,    2,  146,
  117,  118,  113,  114,  115,  270,  322,  267,  324,  285,
  326,  271,  328,  273,  274,  273,  276,  333,   22,   23,
  296,  332,  298,  273,  300,  273,  302,  272,  304,  333,
  306,  271,  308,  276,  310,  274,  312,  286,  314,  265,
  316,  273,  318,  267,  320,  259,  260,  271,  267,  273,
  274,  273,  276,  267,   19,  331,  332,  271,  273,  273,
  274,  267,  276,  273,  278,  271,  280,  273,  282,  283,
  276,  284,  286,  287,  288,   90,  290,  122,  292,  267,
  294,  295,  103,  271,   86,  273,  274,  104,  276,  116,
  278,  149,  280,   -1,  282,  283,  284,   -1,  286,  287,
  288,   -1,  290,   -1,  292,   -1,  294,  295,  267,  322,
   -1,  324,  271,  326,  273,  328,  330,  276,  259,  260,
  333,   20,   21,  267,  105,  106,   -1,  271,   -1,  273,
  274,   -1,  276,   -1,  322,   -1,  324,   -1,  326,   -1,
  328,   -1,  330,  287,  288,  333,  290,   -1,  292,   -1,
  294,  295,   -1,  267,  111,  112,   -1,  271,   -1,  273,
  274,   -1,  276,   -1,  278,   -1,  280,   -1,  282,  283,
  259,  260,  286,  287,  288,   -1,  290,   -1,  292,   -1,
  294,  295,   -1,  290,   -1,  292,  267,  294,  295,   -1,
  271,   -1,  273,  274,  284,  276,  286,  286,  286,  286,
  286,  286,  286,  286,  120,  121,  287,  288,   -1,  290,
   -1,  292,   -1,  294,  295,   -1,  330,  107,  108,  109,
  110,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  322,  267,  324,   -1,  326,  271,  328,  273,
  274,   -1,  276,  333,  278,   -1,  280,   -1,  282,  283,
   -1,   -1,  286,  287,  288,   -1,  290,   -1,  292,  267,
  294,  295,   -1,  271,   -1,  273,  274,   -1,  276,   -1,
  278,   -1,  280,   -1,  282,  283,   -1,   -1,  286,  287,
  288,   -1,  290,   -1,  292,   -1,  294,  295,  267,   -1,
   -1,   -1,  271,   -1,  273,  274,  330,  276,   -1,  278,
   -1,  280,   -1,  282,  283,   -1,   -1,  286,  287,  288,
   -1,  290,   -1,  292,  267,  294,  295,   -1,  271,   -1,
  273,  274,  330,  276,   -1,  278,   -1,  280,   -1,  282,
  283,   -1,   -1,  286,  287,  288,   -1,  290,   -1,  292,
   -1,  294,  295,  267,   -1,   -1,   -1,  271,   -1,  273,
  274,  330,  276,   -1,  278,   -1,  280,   -1,  282,  283,
   -1,   -1,  286,  287,  288,   -1,  290,   -1,  292,  267,
  294,  295,   -1,  271,   -1,  273,  274,  330,  276,   -1,
  278,   -1,  280,   -1,  282,  283,   -1,  262,  263,  287,
  288,   -1,  290,  268,  292,  267,  294,  295,   -1,  271,
   -1,  273,  274,   -1,  276,   -1,  330,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,  296,   -1,  298,   -1,  300,   -1,  302,   -1,  304,
   -1,  306,  330,  308,   -1,  310,   -1,  312,   -1,  314,
  267,  316,   -1,  318,  271,  320,  273,  274,   -1,  276,
   -1,   -1,   -1,   -1,   -1,  282,  283,    0,    1,    2,
  287,  288,   -1,  290,   -1,  292,  267,  294,  295,   -1,
  271,   -1,  273,  274,   -1,  276,   19,   20,   21,   22,
   23,  282,  283,   -1,   -1,   -1,  287,  288,   -1,  290,
   -1,  292,  267,  294,  295,   -1,  271,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,  282,  283,   -1,
   -1,   -1,  287,  288,   -1,  290,   -1,  292,  267,  294,
  295,   -1,  271,   -1,  273,  274,   -1,  276,  267,   -1,
   -1,   -1,  271,   -1,  273,  274,   -1,  276,  287,  288,
   -1,  290,   -1,  292,   -1,  294,  295,   -1,  287,  288,
   -1,  290,   -1,  292,  267,  294,  295,   -1,  271,   -1,
  273,  274,   -1,  276,  267,   -1,   -1,   -1,  271,   -1,
  273,  274,   -1,  276,  287,  288,   -1,  290,   -1,  292,
   -1,  294,  295,  267,  287,  288,   -1,  271,   -1,  273,
  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,  288,
  };

#line 591 "E:\src\mono\svn\mcs\class\System.XML\Mono.Xml.Xsl\PatternParser.jay"
	}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int ERROR = 257;
  public const int EOF = 258;
  public const int SLASH = 259;
  public const int SLASH2 = 260;
  public const int DOT = 262;
  public const int DOT2 = 263;
  public const int COLON2 = 265;
  public const int COMMA = 267;
  public const int AT = 268;
  public const int FUNCTION_NAME = 269;
  public const int BRACKET_OPEN = 270;
  public const int BRACKET_CLOSE = 271;
  public const int PAREN_OPEN = 272;
  public const int PAREN_CLOSE = 273;
  public const int AND = 274;
  public const int and = 275;
  public const int OR = 276;
  public const int or = 277;
  public const int DIV = 278;
  public const int div = 279;
  public const int MOD = 280;
  public const int mod = 281;
  public const int PLUS = 282;
  public const int MINUS = 283;
  public const int ASTERISK = 284;
  public const int DOLLAR = 285;
  public const int BAR = 286;
  public const int EQ = 287;
  public const int NE = 288;
  public const int LE = 290;
  public const int GE = 292;
  public const int LT = 294;
  public const int GT = 295;
  public const int ANCESTOR = 296;
  public const int ancestor = 297;
  public const int ANCESTOR_OR_SELF = 298;
  public const int ATTRIBUTE = 300;
  public const int attribute = 301;
  public const int CHILD = 302;
  public const int child = 303;
  public const int DESCENDANT = 304;
  public const int descendant = 305;
  public const int DESCENDANT_OR_SELF = 306;
  public const int FOLLOWING = 308;
  public const int following = 309;
  public const int FOLLOWING_SIBLING = 310;
  public const int sibling = 311;
  public const int NAMESPACE = 312;
  public const int NameSpace = 313;
  public const int PARENT = 314;
  public const int parent = 315;
  public const int PRECEDING = 316;
  public const int preceding = 317;
  public const int PRECEDING_SIBLING = 318;
  public const int SELF = 320;
  public const int self = 321;
  public const int COMMENT = 322;
  public const int comment = 323;
  public const int TEXT = 324;
  public const int text = 325;
  public const int PROCESSING_INSTRUCTION = 326;
  public const int NODE = 328;
  public const int node = 329;
  public const int MULTIPLY = 330;
  public const int NUMBER = 331;
  public const int LITERAL = 332;
  public const int QName = 333;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
