using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using DataDynamics.PageFX.Common.CompilerServices;
using DataDynamics.PageFX.Common.Extensions;
using DataDynamics.PageFX.Common.TypeSystem;
using DataDynamics.PageFX.Flash.Abc;
using DataDynamics.PageFX.Flash.Core.CodeGeneration;
using DataDynamics.PageFX.Flash.Core.Tools;
using DataDynamics.PageFX.Flash.IL;
using DataDynamics.PageFX.Flash.Swf;
using DataDynamics.PageFX.Flash.Swf.Tags.Actions;
using DataDynamics.PageFX.Flash.Swf.Tags.Control;

#region SWF Structure
//FileAttributes
//Metadata
//EnableDebugger2
//DebugID - found in swc components, may be generated by Flex
//ScriptLimits
//SetBackgroundColor
//ProductInfo
//-- Per Frame:
//  FrameLabel
//  {Assets}
//  {DoAbc2}
//  SymbolClass
//ShowFrame
#endregion

#region SWC (zip file) Structure
//library.swf - tags:
//  FileAttributes
//  Metadata
//  EnabledDebugger2
//  DebugID
//  ScriptLimits
//  SetBackgroundColor
//  ProductInfo
//  {Assets}
//  {DoAbc2}
//  SymbolClass - for assets (no zero symbol for root sprite)
//  ShowFrame
//catalog.xml
#endregion

namespace DataDynamics.PageFX.Flash.Core.SwfGeneration
{
    internal partial class SwfCompiler : IDisposable
	{
		private readonly SwfCompilerOptions _options;

	    public SwfCompiler(SwfCompilerOptions options)
        {
	        if (options == null)
				throw new ArgumentNullException("options");

	        _options = options;
        }

	    #region Options
        
        public SwfCompilerOptions Options
        {
            get { return _options; }
        }

        public bool IsSwc
        {
            get { return _options.OutputFormat == OutputFormat.SWC; }
        }
        
        public string RootSprite
        {
            get { return _options.RootSprite; }
        }

        public float PlayerVersion
        {
            get { return _options.FlashVersion; }
        }

        public string OutputPath
        {
            get { return _options.OutputPath; }
        }

        public string OutputDirectory
        {
            get
            {
                if (string.IsNullOrEmpty(_options.OutputPath))
                    return "";
                return Path.GetDirectoryName(_options.OutputPath);
            }
        }

        public string Title
        {
            get { return _options.Title; }
        }

        public string Application
        {
            get { return _options.Application; }
        }

        public float Width
        {
            get { return _options.FrameSize.Width; }
        }

        public float Height
        {
            get { return _options.FrameSize.Height; }
        }

        public string HexBgColor
        {
            get
            {
	            Color color = _options.BackgroundColor;
	            return "#" + color.R.ToString("x2") + color.G.ToString("x2") + color.B.ToString("x2");
            }
        }

        public string RootNamespace
        {
            get { return _options.RootNamespace; }
        }
        #endregion

        #region Shared Members

        public static void Compile(IAssembly assembly, string path, SwfCompilerOptions options)
        {
            if (options == null)
                options = new SwfCompilerOptions();
            options.OutputPath = path;
            using (var compiler = new SwfCompiler(options))
            {
                compiler.Build(assembly);
                compiler.Save(path);
            }
        }

        public static void Compile(IAssembly assembly, Stream output, SwfCompilerOptions options)
        {
            if (options == null)
				options = new SwfCompilerOptions();
            using (var compiler = new SwfCompiler(options))
            {
                compiler.Build(assembly);
                compiler.Save(output);
            }
        }

        #endregion

	    public void Dispose()
        {
        }

		#region Parts
	    internal AssetCompiler Assets
	    {
			get { return _assets ?? (_assets = new AssetCompiler(this)); }
	    }
		private AssetCompiler _assets;

	    internal MixinManager Mixins
	    {
			get { return _mixins ?? (_mixins = new MixinManager(this)); }
	    }
		private MixinManager _mixins;

	    internal FlexTypes FlexTypes
	    {
			get { return _flexTypes ?? (_flexTypes = new FlexTypes(this)); }
	    }
		private FlexTypes _flexTypes;

	    internal FlexInitImpl FlexInit
	    {
			get { return _flexInit ?? (_flexInit = new FlexInitImpl(this)); }
	    }
		private FlexInitImpl _flexInit;

	    internal SystemManagerBuilder FlexSystemManager
	    {
			get { return _flexSystemManager ?? (_flexSystemManager = new SystemManagerBuilder(this)); }
	    }
		private SystemManagerBuilder _flexSystemManager;
		#endregion

		#region Entry Points

		/// <summary>
		/// Output swf file.
		/// </summary>
		internal SwfMovie Swf { get; private set; }

	    public IAssembly AppAssembly { get; private set; }

	    bool GenerateHtmlWrapper = true;

        #region Build
        private void Build(IAssembly assembly)
        {
            AppAssembly = assembly;

            Swf = new SwfMovie
                       {
                           Name = "PageFX Application"
                       };

            InitPrerequisites();
            SetupHeader();
            SetFileAttributes();
            SetupMetadata();
            SetupDebugInfo();
            SetupScriptLimits();
            SetBackgroundColor();
            SetupProductInfo();

            GenearateFrames();
            
            if (IsSwc)
            {
                BuildCatalog();
                BuildSwc();
            }
            else
            {
                if (GenerateHtmlWrapper && !_options.NoHtmlWrapper)
                    HtmlTemplate.Deploy(this);
            }

	        foreach (var abc in AbcFrames)
	        {
		        abc.Generator.ResetMembersData();
	        }
        }
        #endregion

        #region Save
        private void CheckSwf()
        {
            if (Swf == null)
                throw new InvalidOperationException("SWF movie is not generated yet");
        }

        private void Save(string path)
        {
            CheckSwf();

            if (IsSwc)
                SaveSwc(path);
            else
                Swf.Save(path);
        }

		private void Save(Stream output)
        {
            CheckSwf();

            if (IsSwc)
                SaveSwc(output);
            else
                Swf.Save(output);
        }
        #endregion
        #endregion

        #region InitPrerequisites
        void InitPrerequisites()
        {
	        AppAssembly.CustomData().SWF = Swf;

            AssemblyIndex.Setup(AppAssembly);

            LinkRsls();
        }

        IEnumerable<IAssembly> GetRefs()
        {
            return AppAssembly.GetReferences(true);
        }

        void LinkRsls()
        {
            var list = _options.RslList;
            for (int i = 0; i < list.Count; ++i)
            {
                var rsl = list[i];
                var asm = GetRefs().FirstOrDefault(
                    r =>
                        {
                            string rpath = r.Location;
                            if (!Path.IsPathRooted(rpath))
                                rpath = Path.Combine(Environment.CurrentDirectory, rpath);
                            if (rpath.ComparePath(rsl.Library) == 0)
                                return true;
                            return false;
                        });

                if (asm == null)
                {
                    //RSL is not referneced by assembly
                    list.RemoveAt(i);
                    --i;
                }
                else
                {
                    var data = asm.CustomData();

                    data.RSL = rsl;

                    if (data.SWC == null)
                        throw Errors.RSL.SwcIsNotResolved.CreateException(rsl.LocalPath);

                    data.SWC.RSL = rsl;

                    rsl.Swc = data.SWC;
                }
            }
        }
        #endregion

        #region Header
        void SetupHeader()
        {
            Swf.Version = (int)_options.FlashVersion;
            Swf.FrameSize = _options.FrameSize;
            Swf.FrameRate = _options.FrameRate;
            Swf.AllowCompression = _options.Compressed;
            Swf.AutoFrameCount = false;
        }
        #endregion

        #region File Attributes
        void SetFileAttributes()
        {
            //TODO: Customize
            Swf.SetDefaultFileAttributes();
        }
        #endregion

        #region File Metadata
        void SetupMetadata()
        {
            string rdf = typeof(SwfCompiler).GetTextResource("pfc.rdf");
            Swf.Tags.Add(new SwfTagMetadata(rdf));
        }
        #endregion

        #region DebugInfo
        void SetupDebugInfo()
        {
            if (_options.Debug)
            {
                Swf.EnableDebugger(6517, _options.DebugPassword);
                Swf.Tags.Add(new SwfTagDebugID("7ae6b0e5-298b-42a8-01d9-a2a555be7ef8"));
            }
        }
        #endregion

        #region ScriptLimits
        void SetupScriptLimits()
        {
            Swf.SetDefaultScriptLimits();
        }
        #endregion

        #region BackgroundColor
        void SetBackgroundColor()
        {
            Swf.SetBackgroundColor(_options.BackgroundColor);
        }
        #endregion

        #region ProductInfo
        private void SetupProductInfo()
        {
        	Swf.Tags.Add(new SwfTagProductInfo
        	              	{
        	              		ProductId = 1,
        	              		Edition = 0,
        	              		MajorVersion = 1,
        	              		MinorVersion = 0,
        	              		BuildNumber = 0,
        	              		BuildDate = (ulong)DateTime.Now.Ticks
        	              	});
        }
        #endregion

        #region Frames
        internal readonly List<AbcFile> AbcFrames = new List<AbcFile>();

		/// <summary>
		/// Frame with Flex SystemManager.
		/// </summary>
        internal AbcFile FrameWithFlexSystemManager
        {
            get { return _frameWithFlexSystemManager; }
            set
            {
                if (_frameWithFlexSystemManager != null)
                    throw Errors.Internal.CreateException();
                _frameWithFlexSystemManager = value;
                AbcFrames.Add(value);
                AppAssembly.CustomData().AddAbc(value);
            }
        }
        private AbcFile _frameWithFlexSystemManager;

		/// <summary>
		/// Application frame.
		/// </summary>
        internal AbcFile AppFrame
        {
            get { return _appFrame; }
            set
            {
                if (value != _appFrame)
                {
                    _appFrame = value;
                    value.PrevFrame = FrameWithFlexSystemManager;
                    AbcFrames.Add(value);
                }
            }
        }
        private AbcFile _appFrame;

        private void GenearateFrames()
        {
            GenerateFlexSystemManagerFrame();
            GenerateApplicationFrame();
            _lateMethods.Finish();
        }
        #endregion

        #region Application Frame
        void GenerateApplicationFrame()
        {
            Swf.FrameCount++;

            var g = new AbcGenerator {SwfCompiler = this};
            var abc = g.Generate(AppAssembly);

            if (IsSwc)
            {
                var symTable = new SwfTagSymbolClass();

                CreateScripts(abc, symTable);

                if (symTable.Symbols.Count > 0)
                    Swf.Tags.Add(symTable);
            }
            else
            {
                var rootName = IsFlexApplication ? _flexAppType.FullName : g.RootSprite.Instance.FullName;

                //label should be the same as root name
                Swf.SetFrameLabel(rootName);

                if (g.IsNUnit)
                    GenerateHtmlWrapper = false;

                var symTable = new SwfTagSymbolClass();
                //see http://bugs.adobe.com/jira/browse/ASC-3235
                AddAbcTag(abc);
                Assets.ImportLateAssets();
				Assets.FlushAssets(symTable);

                //NOTE: In MX application root sprite is autogenerated subclass of mx.managers.SystemManager.
                if (!IsFlexApplication)
                {
                    //define symbol for root sprite
                    symTable.AddSymbol(0, rootName);
                }

                if (symTable.Symbols.Count > 0)
                    Swf.Tags.Add(symTable);
            }

            Swf.ShowFrame();
        }

        void AddAbcTag(AbcFile abc)
        {
            string frameName = abc.Name;
            if (string.IsNullOrEmpty(frameName))
                frameName = "frame" + Swf.FrameCount;
            Swf.Tags.Add(new SwfTagDoAbc2(frameName, 1, abc));
        }
        #endregion

        #region mx.managers.SystemManager Frame
        // Any dependencies of SystemManager have to load in frame 1,
        // before the preloader, or anything else, can be displayed.

        //We need to autogenerate subclass of mx.managers.SystemManager
        //and override the following methods:
        //create(... params):Object
        //info():Object - default is empty object (i.e {}).

        public IType FlexAppType
        {
            get
            {
                if (IsSwc) return null;
                if (_flexAppType != null)
                    return _flexAppType;
                if (_searchFlexAppType)
                {
                    //TODO: Resolve the situation: assembly can have more than one subclasses of mx.core.Application
                    _searchFlexAppType = false;
                    var apps = AppAssembly.Types.Where(type => InternalTypeExtensions.IsFrom(type, "mx.core.Application")).ToList();
                    int n = apps.Count;
                    if (n > 0)
                    {
                        if (n == 1)
                        {
                            _flexAppType = apps[0];
                        }
                        else
                        {
							_flexAppType = apps.FirstOrDefault(InternalTypeExtensions.IsRootSprite);
                            if (_flexAppType == null)
                                throw new AmbiguousMatchException("Unable to find MX application class");
                        }
                    }
                }
                return _flexAppType;
            }
        }
        private IType _flexAppType;
		private bool _searchFlexAppType = true;

	    internal string FlexAppPrefix
	    {
		    get { return FlexAppType.FullName.Replace('.', '_'); }
	    }

	    /// <summary>
        /// Auto detects whether translated assembly is flex application.
        /// </summary>
        public bool IsFlexApplication
        {
            get 
            {
                if (IsSwc) return false;
                return FlexAppType != null;
            }
        }

        public string[] Locales
        {
            get { return _options.Locales; }
        }

        private void GenerateFlexSystemManagerFrame()
        {
	        if (IsSwc) return;
	        if (!IsFlexApplication) return;

	        var managerFullName = FlexSystemManager.BuildFrame();

	        Debug.Assert(FrameWithFlexSystemManager != null);
	        Swf.FrameCount++;

	        Swf.SetFrameLabel("System Manager");

	        var symTable = new SwfTagSymbolClass();
	        AddAbcTag(FrameWithFlexSystemManager);
	        Assets.ImportLateAssets();
	        Assets.FlushAssets(symTable);

	        symTable.AddSymbol(0, managerFullName);
	        Swf.Tags.Add(symTable);
	        Swf.ShowFrame();
        }

	    #endregion

        #region Late Methods
        private readonly AbcLateMethodCollection _lateMethods = new AbcLateMethodCollection();

        internal void AddLateMethod(AbcMethod method, AbcCoder coder)
        {
            _lateMethods.Add(method, coder);
        }
        #endregion

        #region FinishApplication
        public void FinishApplication()
        {
            if (IsSwc) return;
            Mixins.Import();
            //ImportLateAssets();
        }
        #endregion

	    internal AbcInstance ImportType(AbcFile abc, string fullname)
		{
			return ImportType(abc, fullname, false);
		}

		internal AbcInstance ImportType(AbcFile abc, string fullname, bool safe)
		{
			try
			{
				return abc.ImportType(AppAssembly, fullname);
			}
			catch (Exception)
			{
				if (safe)
				{
					CompilerReport.Add(Warnings.UnableImportType, fullname);
					return null;
				}
				throw;
			}
		}
    }
}