<!--
***********************************************************************************************
DataDynamics.Common.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild.

***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />

  <!--
 Now that the standard targets have been brought in. Override some properties
 and items it created.
 -->
  <PropertyGroup>
    <AvailablePlatforms>$(AvailablePlatforms),.NET 1.1</AvailablePlatforms>

    <AssemblySearchPaths Condition=" '$(Platform)' == '.NET 1.1' ">
      {CandidateAssemblyFiles};
      $(ReferencePath);
      {HintPathFromItem};
      {TargetFrameworkDirectory};
      {AssemblyFolders};
      $(OutputPath);
      {GAC}
    </AssemblySearchPaths>

    <TargetFrameworkDirectory Condition=" '$(Platform)' == '.NET 1.1'">
      $(SystemRoot)\Microsoft.NET\Framework\v1.1.4322
    </TargetFrameworkDirectory>

  </PropertyGroup>

  <ItemGroup Condition=" '$(Platform)' == '.NET 1.1'">
    <TargetFrameworkDirectoryItem Include="$(SystemRoot)\Microsoft.NET\Framework\v1.1.4322">
      <InProject>false</InProject>
    </TargetFrameworkDirectoryItem>
  </ItemGroup>

  <!--
 Override this target from Microsoft.Common.Targets so that we can supply our own
 value for $(TargetFrameworkDirectory). This controls where assembly resolution
 logic finds FX assemblies.
 -->
  <Target
         Name="GetFrameworkPaths"
         DependsOnTargets="$(GetFrameworkPathsDependsOn)">

    <!-- Get the path to the target .NET framework directory. -->
    <GetFrameworkPath
     Condition=" '$(Platform)' != '.NET 1.1' ">
      <Output TaskParameter="Path" PropertyName="TargetFrameworkDirectory"/>
      <Output TaskParameter="Path" ItemName="TargetFrameworkDirectoryItem"/>
    </GetFrameworkPath>

    <!-- Get the path to the target .NET framework SDK directory. -->
    <GetFrameworkSDKPath
     Condition=" '$(Platform)' != '.NET 1.1' ">
      <Output TaskParameter="Path" PropertyName="TargetFrameworkSDKDirectory"/>
      <Output TaskParameter="Path" ItemName="TargetFrameworkSDKDirectoryItem"/>
    </GetFrameworkSDKPath>

  </Target>

  <!--
 For 1.1 builds, intercept the call to CorResGen target (which generates 2.0 resources) and
 slip in a call to our own CoreResGen_1_1.
 
 Handily, the devices version of the ResGen task is able to call the 1.1 version of
 ResGen directly.
 -->
  <UsingTask TaskName="CFResGen" AssemblyFile="$(MSBuildBinPath)\Microsoft.CompactFramework.Build.Tasks.dll" />
  <PropertyGroup Condition="'$(Platform)' == '.NET 1.1'">
    <ResGenDependsOn>ResolveAssemblyReferences;BeforeResGen;CoreResGen_1_1;AfterResGen</ResGenDependsOn>
  </PropertyGroup>
  <Target
         Name="CoreResGen_1_1"
         DependsOnTargets="$(CoreResGenDependsOn)">

    <CFResGen
              Condition = " '@(ResxWithNoCulture)' != ''"
              Sources = "@(ResxWithNoCulture)"
              UseSourcePath = "$(UseSourcePath)"
              StateFile = "$(IntermediateOutputPath)$(MSBuildProjectFile).CrossCompileResGen.Cache"
              OutputResources = "@(ManifestResourceWithNoCultureName->'$(IntermediateOutputPath)%(Identity).resources')"
        >
      <!-- Appending to 'FilesWritten' list lets us be part of Clean and Incremental Clean. -->
      <Output TaskParameter = "FilesWritten" ItemName="FileWrites"/>
      <Output TaskParameter = "OutputResources" ItemName="ManifestResourceWithNoCulture"/>
    </CFResGen>

    <CFResGen
              Condition = " '@(ResxWithCulture)' != ''"
              Sources = "@(ResxWithCulture)"
              UseSourcePath = "$(UseSourcePath)"
              StateFile = "$(IntermediateOutputPath)$(MSBuildProjectFile).CrossCompileResGen.Cache"
              OutputResources = "@(ManifestResourceWithCultureName->'$(IntermediateOutputPath)%(Identity).resources')"
        >
      <!-- Appending to 'FilesWritten' list lets us be part of Clean and Incremental Clean. -->
      <Output TaskParameter = "FilesWritten" ItemName="FileWrites"/>
      <Output TaskParameter = "OutputResources" ItemName="ManifestResourceWithCulture"/>

    </CFResGen>
  </Target>

</Project>
